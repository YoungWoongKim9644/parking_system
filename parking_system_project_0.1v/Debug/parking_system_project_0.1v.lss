
parking_system_project_0.1v.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ce  00800100  00002866  000028fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002866  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002bc  008004ce  008004ce  00002cc8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002cc8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000340  00000000  00000000  00002d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050f5  00000000  00000000  000030a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013f2  00000000  00000000  00008199  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026f6  00000000  00000000  0000958b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000a3c  00000000  00000000  0000bc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fc9  00000000  00000000  0000c6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000030cd  00000000  00000000  0000d689  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  00010756  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	4a c0       	rjmp	.+148    	; 0xca <__bad_interrupt>
      36:	00 00       	nop
      38:	49 c0       	rjmp	.+146    	; 0xcc <__vector_14>
      3a:	00 00       	nop
      3c:	3c c5       	rjmp	.+2680   	; 0xab6 <__vector_15>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	c8 c0       	rjmp	.+400    	; 0x1da <__vector_18>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	bf c0       	rjmp	.+382    	; 0x1f8 <__vector_30>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	14 e0       	ldi	r17, 0x04	; 4
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e6       	ldi	r30, 0x66	; 102
      a0:	f8 e2       	ldi	r31, 0x28	; 40
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	ae 3c       	cpi	r26, 0xCE	; 206
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	27 e0       	ldi	r18, 0x07	; 7
      b4:	ae ec       	ldi	r26, 0xCE	; 206
      b6:	b4 e0       	ldi	r27, 0x04	; 4
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	aa 38       	cpi	r26, 0x8A	; 138
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 9b 0a 	call	0x1536	; 0x1536 <main>
      c6:	0c 94 31 14 	jmp	0x2862	; 0x2862 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <__vector_14>:
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	8f 93       	push	r24
      de:	9f 93       	push	r25
      e0:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servo_count>
      e4:	84 36       	cpi	r24, 0x64	; 100
      e6:	09 f0       	breq	.+2      	; 0xea <__vector_14+0x1e>
      e8:	53 c0       	rjmp	.+166    	; 0x190 <__vector_14+0xc4>
      ea:	20 91 58 06 	lds	r18, 0x0658	; 0x800658 <servo_1_duty_ratio>
      ee:	30 91 59 06 	lds	r19, 0x0659	; 0x800659 <servo_1_duty_ratio+0x1>
      f2:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <servo_2_duty_ratio>
      f6:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <servo_2_duty_ratio+0x1>
      fa:	82 0f       	add	r24, r18
      fc:	93 1f       	adc	r25, r19
      fe:	89 2b       	or	r24, r25
     100:	49 f1       	breq	.+82     	; 0x154 <__vector_14+0x88>
     102:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <servo_PWM_stack>
     106:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <servo_PWM_stack+0x1>
     10a:	01 96       	adiw	r24, 0x01	; 1
     10c:	90 93 dc 04 	sts	0x04DC, r25	; 0x8004dc <servo_PWM_stack+0x1>
     110:	80 93 db 04 	sts	0x04DB, r24	; 0x8004db <servo_PWM_stack>
     114:	80 91 db 04 	lds	r24, 0x04DB	; 0x8004db <servo_PWM_stack>
     118:	90 91 dc 04 	lds	r25, 0x04DC	; 0x8004dc <servo_PWM_stack+0x1>
     11c:	84 36       	cpi	r24, 0x64	; 100
     11e:	91 05       	cpc	r25, r1
     120:	e1 f4       	brne	.+56     	; 0x15a <__vector_14+0x8e>
     122:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <servo_1_duty_ratio>
     126:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <servo_1_duty_ratio+0x1>
     12a:	89 2b       	or	r24, r25
     12c:	21 f0       	breq	.+8      	; 0x136 <__vector_14+0x6a>
     12e:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <servo_1_duty_ratio+0x1>
     132:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <servo_1_duty_ratio>
     136:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <servo_2_duty_ratio>
     13a:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <servo_2_duty_ratio+0x1>
     13e:	89 2b       	or	r24, r25
     140:	21 f0       	breq	.+8      	; 0x14a <__vector_14+0x7e>
     142:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <servo_2_duty_ratio+0x1>
     146:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <servo_2_duty_ratio>
     14a:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <servo_PWM_stack+0x1>
     14e:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <servo_PWM_stack>
     152:	03 c0       	rjmp	.+6      	; 0x15a <__vector_14+0x8e>
     154:	87 b7       	in	r24, 0x37	; 55
     156:	8b 7f       	andi	r24, 0xFB	; 251
     158:	87 bf       	out	0x37, r24	; 55
     15a:	10 92 dd 04 	sts	0x04DD, r1	; 0x8004dd <servo_count>
     15e:	80 91 58 06 	lds	r24, 0x0658	; 0x800658 <servo_1_duty_ratio>
     162:	90 91 59 06 	lds	r25, 0x0659	; 0x800659 <servo_1_duty_ratio+0x1>
     166:	31 e0       	ldi	r19, 0x01	; 1
     168:	20 e0       	ldi	r18, 0x00	; 0
     16a:	89 2b       	or	r24, r25
     16c:	09 f4       	brne	.+2      	; 0x170 <__vector_14+0xa4>
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	83 2f       	mov	r24, r19
     172:	92 2f       	mov	r25, r18
     174:	20 91 68 07 	lds	r18, 0x0768	; 0x800768 <servo_2_duty_ratio>
     178:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <servo_2_duty_ratio+0x1>
     17c:	21 15       	cp	r18, r1
     17e:	31 05       	cpc	r19, r1
     180:	11 f0       	breq	.+4      	; 0x186 <__vector_14+0xba>
     182:	28 e0       	ldi	r18, 0x08	; 8
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	4b b3       	in	r20, 0x1b	; 27
     188:	82 2b       	or	r24, r18
     18a:	93 2b       	or	r25, r19
     18c:	84 2b       	or	r24, r20
     18e:	8b bb       	out	0x1b, r24	; 27
     190:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servo_count>
     194:	20 91 58 06 	lds	r18, 0x0658	; 0x800658 <servo_1_duty_ratio>
     198:	30 91 59 06 	lds	r19, 0x0659	; 0x800659 <servo_1_duty_ratio+0x1>
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	82 17       	cp	r24, r18
     1a0:	93 07       	cpc	r25, r19
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <__vector_14+0xda>
     1a4:	d8 98       	cbi	0x1b, 0	; 27
     1a6:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servo_count>
     1aa:	20 91 68 07 	lds	r18, 0x0768	; 0x800768 <servo_2_duty_ratio>
     1ae:	30 91 69 07 	lds	r19, 0x0769	; 0x800769 <servo_2_duty_ratio+0x1>
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	82 17       	cp	r24, r18
     1b6:	93 07       	cpc	r25, r19
     1b8:	09 f4       	brne	.+2      	; 0x1bc <__vector_14+0xf0>
     1ba:	db 98       	cbi	0x1b, 3	; 27
     1bc:	80 91 dd 04 	lds	r24, 0x04DD	; 0x8004dd <servo_count>
     1c0:	8f 5f       	subi	r24, 0xFF	; 255
     1c2:	80 93 dd 04 	sts	0x04DD, r24	; 0x8004dd <servo_count>
     1c6:	9f 91       	pop	r25
     1c8:	8f 91       	pop	r24
     1ca:	4f 91       	pop	r20
     1cc:	3f 91       	pop	r19
     1ce:	2f 91       	pop	r18
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_18>:
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	8f 93       	push	r24
     1e6:	8c b1       	in	r24, 0x0c	; 12
     1e8:	80 93 21 06 	sts	0x0621, r24	; 0x800621 <uart0+0x66>
     1ec:	8f 91       	pop	r24
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <__vector_30>:
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
     202:	0b b6       	in	r0, 0x3b	; 59
     204:	0f 92       	push	r0
     206:	1f 93       	push	r17
     208:	2f 93       	push	r18
     20a:	3f 93       	push	r19
     20c:	4f 93       	push	r20
     20e:	5f 93       	push	r21
     210:	6f 93       	push	r22
     212:	7f 93       	push	r23
     214:	8f 93       	push	r24
     216:	9f 93       	push	r25
     218:	af 93       	push	r26
     21a:	bf 93       	push	r27
     21c:	ef 93       	push	r30
     21e:	ff 93       	push	r31
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	00 d0       	rcall	.+0      	; 0x226 <__vector_30+0x2e>
     226:	1f 92       	push	r1
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	10 91 9c 00 	lds	r17, 0x009C	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
     230:	1e 33       	cpi	r17, 0x3E	; 62
     232:	21 f4       	brne	.+8      	; 0x23c <__vector_30+0x44>
     234:	81 e0       	ldi	r24, 0x01	; 1
     236:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <esp8266_send_ready_flag>
     23a:	42 c0       	rjmp	.+132    	; 0x2c0 <__vector_30+0xc8>
     23c:	1f 34       	cpi	r17, 0x4F	; 79
     23e:	21 f4       	brne	.+8      	; 0x248 <__vector_30+0x50>
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	80 93 da 04 	sts	0x04DA, r24	; 0x8004da <cnt.2477>
     246:	3c c0       	rjmp	.+120    	; 0x2c0 <__vector_30+0xc8>
     248:	1b 34       	cpi	r17, 0x4B	; 75
     24a:	51 f4       	brne	.+20     	; 0x260 <__vector_30+0x68>
     24c:	80 91 da 04 	lds	r24, 0x04DA	; 0x8004da <cnt.2477>
     250:	81 30       	cpi	r24, 0x01	; 1
     252:	09 f0       	breq	.+2      	; 0x256 <__vector_30+0x5e>
     254:	87 c0       	rjmp	.+270    	; 0x364 <__vector_30+0x16c>
     256:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <esp8266_return_result_flag>
     25a:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <cnt.2477>
     25e:	30 c0       	rjmp	.+96     	; 0x2c0 <__vector_30+0xc8>
     260:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <cnt.2477>
     264:	1b 32       	cpi	r17, 0x2B	; 43
     266:	21 f4       	brne	.+8      	; 0x270 <__vector_30+0x78>
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     26e:	76 c0       	rjmp	.+236    	; 0x35c <__vector_30+0x164>
     270:	19 34       	cpi	r17, 0x49	; 73
     272:	41 f4       	brne	.+16     	; 0x284 <__vector_30+0x8c>
     274:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <parse_cnt.2478>
     278:	81 30       	cpi	r24, 0x01	; 1
     27a:	11 f5       	brne	.+68     	; 0x2c0 <__vector_30+0xc8>
     27c:	82 e0       	ldi	r24, 0x02	; 2
     27e:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     282:	6c c0       	rjmp	.+216    	; 0x35c <__vector_30+0x164>
     284:	10 35       	cpi	r17, 0x50	; 80
     286:	41 f4       	brne	.+16     	; 0x298 <__vector_30+0xa0>
     288:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <parse_cnt.2478>
     28c:	82 30       	cpi	r24, 0x02	; 2
     28e:	c1 f4       	brne	.+48     	; 0x2c0 <__vector_30+0xc8>
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     296:	62 c0       	rjmp	.+196    	; 0x35c <__vector_30+0x164>
     298:	14 34       	cpi	r17, 0x44	; 68
     29a:	41 f4       	brne	.+16     	; 0x2ac <__vector_30+0xb4>
     29c:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <parse_cnt.2478>
     2a0:	83 30       	cpi	r24, 0x03	; 3
     2a2:	71 f4       	brne	.+28     	; 0x2c0 <__vector_30+0xc8>
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     2aa:	58 c0       	rjmp	.+176    	; 0x35c <__vector_30+0x164>
     2ac:	1c 32       	cpi	r17, 0x2C	; 44
     2ae:	41 f4       	brne	.+16     	; 0x2c0 <__vector_30+0xc8>
     2b0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <parse_cnt.2478>
     2b4:	84 30       	cpi	r24, 0x04	; 4
     2b6:	21 f4       	brne	.+8      	; 0x2c0 <__vector_30+0xc8>
     2b8:	85 e0       	ldi	r24, 0x05	; 5
     2ba:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     2be:	4e c0       	rjmp	.+156    	; 0x35c <__vector_30+0x164>
     2c0:	80 91 d9 04 	lds	r24, 0x04D9	; 0x8004d9 <parse_cnt.2478>
     2c4:	85 30       	cpi	r24, 0x05	; 5
     2c6:	91 f4       	brne	.+36     	; 0x2ec <__vector_30+0xf4>
     2c8:	10 93 de 04 	sts	0x04DE, r17	; 0x8004de <receive_length>
     2cc:	86 e0       	ldi	r24, 0x06	; 6
     2ce:	80 93 d9 04 	sts	0x04D9, r24	; 0x8004d9 <parse_cnt.2478>
     2d2:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <receive_length>
     2d6:	89 83       	std	Y+1, r24	; 0x01
     2d8:	1a 82       	std	Y+2, r1	; 0x02
     2da:	ce 01       	movw	r24, r28
     2dc:	01 96       	adiw	r24, 0x01	; 1
     2de:	0e 94 16 11 	call	0x222c	; 0x222c <atoi>
     2e2:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <receive_length_int+0x1>
     2e6:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <receive_length_int>
     2ea:	38 c0       	rjmp	.+112    	; 0x35c <__vector_30+0x164>
     2ec:	86 30       	cpi	r24, 0x06	; 6
     2ee:	c1 f4       	brne	.+48     	; 0x320 <__vector_30+0x128>
     2f0:	1a 33       	cpi	r17, 0x3A	; 58
     2f2:	71 f0       	breq	.+28     	; 0x310 <__vector_30+0x118>
     2f4:	80 91 de 04 	lds	r24, 0x04DE	; 0x8004de <receive_length>
     2f8:	89 83       	std	Y+1, r24	; 0x01
     2fa:	1a 83       	std	Y+2, r17	; 0x02
     2fc:	1b 82       	std	Y+3, r1	; 0x03
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 16 11 	call	0x222c	; 0x222c <atoi>
     306:	90 93 6b 07 	sts	0x076B, r25	; 0x80076b <receive_length_int+0x1>
     30a:	80 93 6a 07 	sts	0x076A, r24	; 0x80076a <receive_length_int>
     30e:	26 c0       	rjmp	.+76     	; 0x35c <__vector_30+0x164>
     310:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <parse_cnt.2478>
     314:	10 92 d8 04 	sts	0x04D8, r1	; 0x8004d8 <data_cnt.2479>
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	80 93 d7 04 	sts	0x04D7, r24	; 0x8004d7 <parse_data_flag.2480>
     31e:	1e c0       	rjmp	.+60     	; 0x35c <__vector_30+0x164>
     320:	80 91 d7 04 	lds	r24, 0x04D7	; 0x8004d7 <parse_data_flag.2480>
     324:	88 23       	and	r24, r24
     326:	c1 f0       	breq	.+48     	; 0x358 <__vector_30+0x160>
     328:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <data_cnt.2479>
     32c:	e8 2f       	mov	r30, r24
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	ec 5d       	subi	r30, 0xDC	; 220
     332:	f9 4f       	sbci	r31, 0xF9	; 249
     334:	10 83       	st	Z, r17
     336:	8f 5f       	subi	r24, 0xFF	; 255
     338:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <data_cnt.2479>
     33c:	20 91 6a 07 	lds	r18, 0x076A	; 0x80076a <receive_length_int>
     340:	30 91 6b 07 	lds	r19, 0x076B	; 0x80076b <receive_length_int+0x1>
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	82 17       	cp	r24, r18
     348:	93 07       	cpc	r25, r19
     34a:	41 f4       	brne	.+16     	; 0x35c <__vector_30+0x164>
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <esp8266_receiving_flag>
     352:	10 92 d7 04 	sts	0x04D7, r1	; 0x8004d7 <parse_data_flag.2480>
     356:	02 c0       	rjmp	.+4      	; 0x35c <__vector_30+0x164>
     358:	10 92 d9 04 	sts	0x04D9, r1	; 0x8004d9 <parse_cnt.2478>
     35c:	81 2f       	mov	r24, r17
     35e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     362:	03 c0       	rjmp	.+6      	; 0x36a <__vector_30+0x172>
     364:	10 92 da 04 	sts	0x04DA, r1	; 0x8004da <cnt.2477>
     368:	ab cf       	rjmp	.-170    	; 0x2c0 <__vector_30+0xc8>
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	ff 91       	pop	r31
     376:	ef 91       	pop	r30
     378:	bf 91       	pop	r27
     37a:	af 91       	pop	r26
     37c:	9f 91       	pop	r25
     37e:	8f 91       	pop	r24
     380:	7f 91       	pop	r23
     382:	6f 91       	pop	r22
     384:	5f 91       	pop	r21
     386:	4f 91       	pop	r20
     388:	3f 91       	pop	r19
     38a:	2f 91       	pop	r18
     38c:	1f 91       	pop	r17
     38e:	0f 90       	pop	r0
     390:	0b be       	out	0x3b, r0	; 59
     392:	0f 90       	pop	r0
     394:	0f be       	out	0x3f, r0	; 63
     396:	0f 90       	pop	r0
     398:	1f 90       	pop	r1
     39a:	18 95       	reti

0000039c <rfid_user_uid_buffer_init>:
     39c:	86 ee       	ldi	r24, 0xE6	; 230
     39e:	94 e0       	ldi	r25, 0x04	; 4
     3a0:	48 eb       	ldi	r20, 0xB8	; 184
     3a2:	55 e0       	ldi	r21, 0x05	; 5
     3a4:	25 e0       	ldi	r18, 0x05	; 5
     3a6:	e2 e4       	ldi	r30, 0x42	; 66
     3a8:	f1 e0       	ldi	r31, 0x01	; 1
     3aa:	dc 01       	movw	r26, r24
     3ac:	01 90       	ld	r0, Z+
     3ae:	0d 92       	st	X+, r0
     3b0:	2a 95       	dec	r18
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <rfid_user_uid_buffer_init+0x10>
     3b4:	05 96       	adiw	r24, 0x05	; 5
     3b6:	84 17       	cp	r24, r20
     3b8:	95 07       	cpc	r25, r21
     3ba:	a1 f7       	brne	.-24     	; 0x3a4 <rfid_user_uid_buffer_init+0x8>
     3bc:	47 e4       	ldi	r20, 0x47	; 71
     3be:	51 e0       	ldi	r21, 0x01	; 1
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	82 e0       	ldi	r24, 0x02	; 2
     3c4:	0e 94 0e 0c 	call	0x181c	; 0x181c <i2c_lcd_string>
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	89 e6       	ldi	r24, 0x69	; 105
     3cc:	98 e1       	ldi	r25, 0x18	; 24
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	90 40       	sbci	r25, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <rfid_user_uid_buffer_init+0x32>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <rfid_user_uid_buffer_init+0x3c>
     3d8:	00 00       	nop
     3da:	08 95       	ret

000003dc <mfrc_print_serial>:
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	c6 2f       	mov	r28, r22
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	91 05       	cpc	r25, r1
     3f0:	69 f1       	breq	.+90     	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     3f2:	82 30       	cpi	r24, 0x02	; 2
     3f4:	91 05       	cpc	r25, r1
     3f6:	09 f4       	brne	.+2      	; 0x3fa <mfrc_print_serial+0x1e>
     3f8:	55 c0       	rjmp	.+170    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     3fa:	89 2b       	or	r24, r25
     3fc:	09 f0       	breq	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
     3fe:	7e c0       	rjmp	.+252    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     400:	8c e5       	ldi	r24, 0x5C	; 92
     402:	91 e0       	ldi	r25, 0x01	; 1
     404:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     408:	00 e4       	ldi	r16, 0x40	; 64
     40a:	17 e0       	ldi	r17, 0x07	; 7
     40c:	0f 2e       	mov	r0, r31
     40e:	f2 e5       	ldi	r31, 0x52	; 82
     410:	ef 2e       	mov	r14, r31
     412:	f7 e0       	ldi	r31, 0x07	; 7
     414:	ff 2e       	mov	r15, r31
     416:	f0 2d       	mov	r31, r0
     418:	0f 2e       	mov	r0, r31
     41a:	f4 e4       	ldi	r31, 0x44	; 68
     41c:	cf 2e       	mov	r12, r31
     41e:	f7 e0       	ldi	r31, 0x07	; 7
     420:	df 2e       	mov	r13, r31
     422:	f0 2d       	mov	r31, r0
     424:	c1 11       	cpse	r28, r1
     426:	05 c0       	rjmp	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     428:	f8 01       	movw	r30, r16
     42a:	80 81       	ld	r24, Z
     42c:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     430:	04 c0       	rjmp	.+8      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     432:	f7 01       	movw	r30, r14
     434:	80 81       	ld	r24, Z
     436:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     43a:	0f 5f       	subi	r16, 0xFF	; 255
     43c:	1f 4f       	sbci	r17, 0xFF	; 255
     43e:	ff ef       	ldi	r31, 0xFF	; 255
     440:	ef 1a       	sub	r14, r31
     442:	ff 0a       	sbc	r15, r31
     444:	0c 15       	cp	r16, r12
     446:	1d 05       	cpc	r17, r13
     448:	69 f7       	brne	.-38     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     44a:	58 c0       	rjmp	.+176    	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     44c:	86 e6       	ldi	r24, 0x66	; 102
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     454:	00 e4       	ldi	r16, 0x40	; 64
     456:	17 e0       	ldi	r17, 0x07	; 7
     458:	0f 2e       	mov	r0, r31
     45a:	f2 e5       	ldi	r31, 0x52	; 82
     45c:	ef 2e       	mov	r14, r31
     45e:	f7 e0       	ldi	r31, 0x07	; 7
     460:	ff 2e       	mov	r15, r31
     462:	f0 2d       	mov	r31, r0
     464:	0f 2e       	mov	r0, r31
     466:	f4 e4       	ldi	r31, 0x44	; 68
     468:	cf 2e       	mov	r12, r31
     46a:	f7 e0       	ldi	r31, 0x07	; 7
     46c:	df 2e       	mov	r13, r31
     46e:	f0 2d       	mov	r31, r0
     470:	c1 11       	cpse	r28, r1
     472:	08 c0       	rjmp	.+16     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     474:	f8 01       	movw	r30, r16
     476:	80 81       	ld	r24, Z
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <IntToString>
     47e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     482:	07 c0       	rjmp	.+14     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     484:	f7 01       	movw	r30, r14
     486:	80 81       	ld	r24, Z
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <IntToString>
     48e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     492:	0f 5f       	subi	r16, 0xFF	; 255
     494:	1f 4f       	sbci	r17, 0xFF	; 255
     496:	ff ef       	ldi	r31, 0xFF	; 255
     498:	ef 1a       	sub	r14, r31
     49a:	ff 0a       	sbc	r15, r31
     49c:	0c 15       	cp	r16, r12
     49e:	1d 05       	cpc	r17, r13
     4a0:	39 f7       	brne	.-50     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     4a2:	2c c0       	rjmp	.+88     	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     4a4:	8e e6       	ldi	r24, 0x6E	; 110
     4a6:	91 e0       	ldi	r25, 0x01	; 1
     4a8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     4ac:	00 e4       	ldi	r16, 0x40	; 64
     4ae:	17 e0       	ldi	r17, 0x07	; 7
     4b0:	0f 2e       	mov	r0, r31
     4b2:	f2 e5       	ldi	r31, 0x52	; 82
     4b4:	ef 2e       	mov	r14, r31
     4b6:	f7 e0       	ldi	r31, 0x07	; 7
     4b8:	ff 2e       	mov	r15, r31
     4ba:	f0 2d       	mov	r31, r0
     4bc:	0f 2e       	mov	r0, r31
     4be:	f4 e4       	ldi	r31, 0x44	; 68
     4c0:	cf 2e       	mov	r12, r31
     4c2:	f7 e0       	ldi	r31, 0x07	; 7
     4c4:	df 2e       	mov	r13, r31
     4c6:	f0 2d       	mov	r31, r0
     4c8:	c1 11       	cpse	r28, r1
     4ca:	07 c0       	rjmp	.+14     	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     4cc:	f8 01       	movw	r30, r16
     4ce:	80 81       	ld	r24, Z
     4d0:	0e 94 1e 10 	call	0x203c	; 0x203c <HexToString>
     4d4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
     4da:	f7 01       	movw	r30, r14
     4dc:	80 81       	ld	r24, Z
     4de:	0e 94 1e 10 	call	0x203c	; 0x203c <HexToString>
     4e2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     4e6:	80 e2       	ldi	r24, 0x20	; 32
     4e8:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     4ec:	0f 5f       	subi	r16, 0xFF	; 255
     4ee:	1f 4f       	sbci	r17, 0xFF	; 255
     4f0:	ff ef       	ldi	r31, 0xFF	; 255
     4f2:	ef 1a       	sub	r14, r31
     4f4:	ff 0a       	sbc	r15, r31
     4f6:	0c 15       	cp	r16, r12
     4f8:	1d 05       	cpc	r17, r13
     4fa:	31 f7       	brne	.-52     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4fc:	cf 91       	pop	r28
     4fe:	1f 91       	pop	r17
     500:	0f 91       	pop	r16
     502:	ff 90       	pop	r15
     504:	ef 90       	pop	r14
     506:	df 90       	pop	r13
     508:	cf 90       	pop	r12
     50a:	08 95       	ret

0000050c <mfrc_check_and_data_receive_ch0>:
     50c:	cf 93       	push	r28
     50e:	80 91 d5 04 	lds	r24, 0x04D5	; 0x8004d5 <noise_flag.2496>
     512:	81 11       	cpse	r24, r1
     514:	09 c0       	rjmp	.+18     	; 0x528 <mfrc_check_and_data_receive_ch0+0x1c>
     516:	40 e0       	ldi	r20, 0x00	; 0
     518:	60 e4       	ldi	r22, 0x40	; 64
     51a:	77 e0       	ldi	r23, 0x07	; 7
     51c:	82 e5       	ldi	r24, 0x52	; 82
     51e:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     522:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_byte.2498>
     526:	1d c0       	rjmp	.+58     	; 0x562 <mfrc_check_and_data_receive_ch0+0x56>
     528:	80 91 d3 04 	lds	r24, 0x04D3	; 0x8004d3 <toggle_flag.2497>
     52c:	88 23       	and	r24, r24
     52e:	39 f0       	breq	.+14     	; 0x53e <mfrc_check_and_data_receive_ch0+0x32>
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	60 e4       	ldi	r22, 0x40	; 64
     534:	77 e0       	ldi	r23, 0x07	; 7
     536:	82 e5       	ldi	r24, 0x52	; 82
     538:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     53c:	0c c0       	rjmp	.+24     	; 0x556 <mfrc_check_and_data_receive_ch0+0x4a>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	60 e4       	ldi	r22, 0x40	; 64
     542:	77 e0       	ldi	r23, 0x07	; 7
     544:	82 e5       	ldi	r24, 0x52	; 82
     546:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     54a:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_byte.2498>
     54e:	83 30       	cpi	r24, 0x03	; 3
     550:	11 f4       	brne	.+4      	; 0x556 <mfrc_check_and_data_receive_ch0+0x4a>
     552:	10 92 d5 04 	sts	0x04D5, r1	; 0x8004d5 <noise_flag.2496>
     556:	90 91 d3 04 	lds	r25, 0x04D3	; 0x8004d3 <toggle_flag.2497>
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	89 27       	eor	r24, r25
     55e:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <toggle_flag.2497>
     562:	c0 91 d4 04 	lds	r28, 0x04D4	; 0x8004d4 <_byte.2498>
     566:	c1 30       	cpi	r28, 0x01	; 1
     568:	29 f0       	breq	.+10     	; 0x574 <mfrc_check_and_data_receive_ch0+0x68>
     56a:	88 e5       	ldi	r24, 0x58	; 88
     56c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     570:	c0 e0       	ldi	r28, 0x00	; 0
     572:	2c c0       	rjmp	.+88     	; 0x5cc <mfrc_check_and_data_receive_ch0+0xc0>
     574:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <detected_flag_ch0>
     578:	88 35       	cpi	r24, 0x58	; 88
     57a:	29 f5       	brne	.+74     	; 0x5c6 <mfrc_check_and_data_receive_ch0+0xba>
     57c:	8f e4       	ldi	r24, 0x4F	; 79
     57e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <detected_flag_ch0>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	80 93 d5 04 	sts	0x04D5, r24	; 0x8004d5 <noise_flag.2496>
     588:	80 93 d3 04 	sts	0x04D3, r24	; 0x8004d3 <toggle_flag.2497>
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	80 e4       	ldi	r24, 0x40	; 64
     590:	97 e0       	ldi	r25, 0x07	; 7
     592:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <mfrc522_get_card_serial>
     596:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <_byte.2498>
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	b1 f4       	brne	.+44     	; 0x5ca <mfrc_check_and_data_receive_ch0+0xbe>
     59e:	86 e7       	ldi	r24, 0x76	; 118
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	17 df       	rcall	.-466    	; 0x3dc <mfrc_print_serial>
     5ae:	60 e0       	ldi	r22, 0x00	; 0
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	13 df       	rcall	.-474    	; 0x3dc <mfrc_print_serial>
     5b6:	60 e0       	ldi	r22, 0x00	; 0
     5b8:	82 e0       	ldi	r24, 0x02	; 2
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	0f df       	rcall	.-482    	; 0x3dc <mfrc_print_serial>
     5be:	8a e0       	ldi	r24, 0x0A	; 10
     5c0:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     5c4:	03 c0       	rjmp	.+6      	; 0x5cc <mfrc_check_and_data_receive_ch0+0xc0>
     5c6:	c0 e0       	ldi	r28, 0x00	; 0
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <mfrc_check_and_data_receive_ch0+0xc0>
     5ca:	cf ef       	ldi	r28, 0xFF	; 255
     5cc:	8c 2f       	mov	r24, r28
     5ce:	cf 91       	pop	r28
     5d0:	08 95       	ret

000005d2 <mfrc_check_and_data_receive_ch1>:
     5d2:	cf 93       	push	r28
     5d4:	80 91 d2 04 	lds	r24, 0x04D2	; 0x8004d2 <noise_flag.2502>
     5d8:	81 11       	cpse	r24, r1
     5da:	09 c0       	rjmp	.+18     	; 0x5ee <mfrc_check_and_data_receive_ch1+0x1c>
     5dc:	41 e0       	ldi	r20, 0x01	; 1
     5de:	62 e5       	ldi	r22, 0x52	; 82
     5e0:	77 e0       	ldi	r23, 0x07	; 7
     5e2:	82 e5       	ldi	r24, 0x52	; 82
     5e4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     5e8:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_byte.2504>
     5ec:	1d c0       	rjmp	.+58     	; 0x628 <mfrc_check_and_data_receive_ch1+0x56>
     5ee:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <toggle_flag.2503>
     5f2:	88 23       	and	r24, r24
     5f4:	39 f0       	breq	.+14     	; 0x604 <mfrc_check_and_data_receive_ch1+0x32>
     5f6:	41 e0       	ldi	r20, 0x01	; 1
     5f8:	62 e5       	ldi	r22, 0x52	; 82
     5fa:	77 e0       	ldi	r23, 0x07	; 7
     5fc:	82 e5       	ldi	r24, 0x52	; 82
     5fe:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     602:	0c c0       	rjmp	.+24     	; 0x61c <mfrc_check_and_data_receive_ch1+0x4a>
     604:	41 e0       	ldi	r20, 0x01	; 1
     606:	62 e5       	ldi	r22, 0x52	; 82
     608:	77 e0       	ldi	r23, 0x07	; 7
     60a:	82 e5       	ldi	r24, 0x52	; 82
     60c:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <mfrc522_request>
     610:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_byte.2504>
     614:	83 30       	cpi	r24, 0x03	; 3
     616:	11 f4       	brne	.+4      	; 0x61c <mfrc_check_and_data_receive_ch1+0x4a>
     618:	10 92 d2 04 	sts	0x04D2, r1	; 0x8004d2 <noise_flag.2502>
     61c:	90 91 d0 04 	lds	r25, 0x04D0	; 0x8004d0 <toggle_flag.2503>
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	89 27       	eor	r24, r25
     624:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <toggle_flag.2503>
     628:	c0 91 d1 04 	lds	r28, 0x04D1	; 0x8004d1 <_byte.2504>
     62c:	c1 30       	cpi	r28, 0x01	; 1
     62e:	29 f0       	breq	.+10     	; 0x63a <mfrc_check_and_data_receive_ch1+0x68>
     630:	88 e5       	ldi	r24, 0x58	; 88
     632:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     636:	c0 e0       	ldi	r28, 0x00	; 0
     638:	2c c0       	rjmp	.+88     	; 0x692 <mfrc_check_and_data_receive_ch1+0xc0>
     63a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <detected_flag_ch1>
     63e:	88 35       	cpi	r24, 0x58	; 88
     640:	29 f5       	brne	.+74     	; 0x68c <mfrc_check_and_data_receive_ch1+0xba>
     642:	8f e4       	ldi	r24, 0x4F	; 79
     644:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <detected_flag_ch1>
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	80 93 d2 04 	sts	0x04D2, r24	; 0x8004d2 <noise_flag.2502>
     64e:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <toggle_flag.2503>
     652:	61 e0       	ldi	r22, 0x01	; 1
     654:	82 e5       	ldi	r24, 0x52	; 82
     656:	97 e0       	ldi	r25, 0x07	; 7
     658:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <mfrc522_get_card_serial>
     65c:	80 93 d1 04 	sts	0x04D1, r24	; 0x8004d1 <_byte.2504>
     660:	81 30       	cpi	r24, 0x01	; 1
     662:	b1 f4       	brne	.+44     	; 0x690 <mfrc_check_and_data_receive_ch1+0xbe>
     664:	89 e8       	ldi	r24, 0x89	; 137
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <uart0_tx_string>
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	b4 de       	rcall	.-664    	; 0x3dc <mfrc_print_serial>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	b0 de       	rcall	.-672    	; 0x3dc <mfrc_print_serial>
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	82 e0       	ldi	r24, 0x02	; 2
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	ac de       	rcall	.-680    	; 0x3dc <mfrc_print_serial>
     684:	8a e0       	ldi	r24, 0x0A	; 10
     686:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <uart0_tx_char>
     68a:	03 c0       	rjmp	.+6      	; 0x692 <mfrc_check_and_data_receive_ch1+0xc0>
     68c:	c0 e0       	ldi	r28, 0x00	; 0
     68e:	01 c0       	rjmp	.+2      	; 0x692 <mfrc_check_and_data_receive_ch1+0xc0>
     690:	cf ef       	ldi	r28, 0xFF	; 255
     692:	8c 2f       	mov	r24, r28
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <RC522_data_request_per_100ms>:
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	ec 01       	movw	r28, r24
     69e:	60 91 6c 07 	lds	r22, 0x076C	; 0x80076c <TICK>
     6a2:	70 91 6d 07 	lds	r23, 0x076D	; 0x80076d <TICK+0x1>
     6a6:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <TICK+0x2>
     6aa:	90 91 6f 07 	lds	r25, 0x076F	; 0x80076f <TICK+0x3>
     6ae:	24 e6       	ldi	r18, 0x64	; 100
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	40 e0       	ldi	r20, 0x00	; 0
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <__udivmodsi4>
     6ba:	67 2b       	or	r22, r23
     6bc:	68 2b       	or	r22, r24
     6be:	69 2b       	or	r22, r25
     6c0:	89 f4       	brne	.+34     	; 0x6e4 <RC522_data_request_per_100ms+0x4c>
     6c2:	98 81       	ld	r25, Y
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	89 27       	eor	r24, r25
     6c8:	88 83       	st	Y, r24
     6ca:	81 11       	cpse	r24, r1
     6cc:	06 c0       	rjmp	.+12     	; 0x6da <RC522_data_request_per_100ms+0x42>
     6ce:	1e df       	rcall	.-452    	; 0x50c <mfrc_check_and_data_receive_ch0>
     6d0:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <received_state>
     6d4:	10 92 44 07 	sts	0x0744, r1	; 0x800744 <rfid_uid_ch0+0x4>
     6d8:	05 c0       	rjmp	.+10     	; 0x6e4 <RC522_data_request_per_100ms+0x4c>
     6da:	7b df       	rcall	.-266    	; 0x5d2 <mfrc_check_and_data_receive_ch1>
     6dc:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <received_state>
     6e0:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <rfid_uid_ch1+0x4>
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <buzz_MUTE>:
     6ea:	eb e8       	ldi	r30, 0x8B	; 139
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	80 81       	ld	r24, Z
     6f0:	8f 7b       	andi	r24, 0xBF	; 191
     6f2:	80 83       	st	Z, r24
     6f4:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <music_flag>
     6f8:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <buzz_tick_enable_flag+0x1>
     6fc:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <buzz_tick_enable_flag>
     700:	08 95       	ret

00000702 <setSoundNote>:
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	41 f0       	breq	.+16     	; 0x716 <setSoundNote+0x14>
     706:	eb e8       	ldi	r30, 0x8B	; 139
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	20 81       	ld	r18, Z
     70c:	20 64       	ori	r18, 0x40	; 64
     70e:	20 83       	st	Z, r18
     710:	0c 94 95 0f 	jmp	0x1f2a	; 0x1f2a <setICR3>
     714:	08 95       	ret
     716:	eb e8       	ldi	r30, 0x8B	; 139
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8f 7b       	andi	r24, 0xBF	; 191
     71e:	80 83       	st	Z, r24
     720:	08 95       	ret

00000722 <buzz_play>:
     722:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <music_flag>
     726:	82 30       	cpi	r24, 0x02	; 2
     728:	09 f4       	brne	.+2      	; 0x72c <buzz_play+0xa>
     72a:	76 c0       	rjmp	.+236    	; 0x818 <buzz_play+0xf6>
     72c:	28 f4       	brcc	.+10     	; 0x738 <buzz_play+0x16>
     72e:	88 23       	and	r24, r24
     730:	61 f0       	breq	.+24     	; 0x74a <buzz_play+0x28>
     732:	81 30       	cpi	r24, 0x01	; 1
     734:	61 f0       	breq	.+24     	; 0x74e <buzz_play+0x2c>
     736:	08 95       	ret
     738:	84 30       	cpi	r24, 0x04	; 4
     73a:	09 f4       	brne	.+2      	; 0x73e <buzz_play+0x1c>
     73c:	37 c1       	rjmp	.+622    	; 0x9ac <buzz_play+0x28a>
     73e:	08 f4       	brcc	.+2      	; 0x742 <buzz_play+0x20>
     740:	d0 c0       	rjmp	.+416    	; 0x8e2 <buzz_play+0x1c0>
     742:	85 30       	cpi	r24, 0x05	; 5
     744:	09 f4       	brne	.+2      	; 0x748 <buzz_play+0x26>
     746:	75 c1       	rjmp	.+746    	; 0xa32 <buzz_play+0x310>
     748:	08 95       	ret
     74a:	cf cf       	rjmp	.-98     	; 0x6ea <buzz_MUTE>
     74c:	08 95       	ret
     74e:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     752:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     756:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     75a:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     75e:	88 3c       	cpi	r24, 0xC8	; 200
     760:	91 05       	cpc	r25, r1
     762:	a1 05       	cpc	r26, r1
     764:	b1 05       	cpc	r27, r1
     766:	20 f4       	brcc	.+8      	; 0x770 <buzz_play+0x4e>
     768:	8b e9       	ldi	r24, 0x9B	; 155
     76a:	96 e0       	ldi	r25, 0x06	; 6
     76c:	ca cf       	rjmp	.-108    	; 0x702 <setSoundNote>
     76e:	08 95       	ret
     770:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     774:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     778:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     77c:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     780:	88 3c       	cpi	r24, 0xC8	; 200
     782:	91 05       	cpc	r25, r1
     784:	a1 05       	cpc	r26, r1
     786:	b1 05       	cpc	r27, r1
     788:	21 f4       	brne	.+8      	; 0x792 <buzz_play+0x70>
     78a:	87 ee       	ldi	r24, 0xE7	; 231
     78c:	95 e0       	ldi	r25, 0x05	; 5
     78e:	b9 cf       	rjmp	.-142    	; 0x702 <setSoundNote>
     790:	08 95       	ret
     792:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     796:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     79a:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     79e:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     7a2:	80 39       	cpi	r24, 0x90	; 144
     7a4:	91 40       	sbci	r25, 0x01	; 1
     7a6:	a1 05       	cpc	r26, r1
     7a8:	b1 05       	cpc	r27, r1
     7aa:	21 f4       	brne	.+8      	; 0x7b4 <buzz_play+0x92>
     7ac:	85 e6       	ldi	r24, 0x65	; 101
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	a8 cf       	rjmp	.-176    	; 0x702 <setSoundNote>
     7b2:	08 95       	ret
     7b4:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     7b8:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     7bc:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     7c0:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     7c4:	88 35       	cpi	r24, 0x58	; 88
     7c6:	92 40       	sbci	r25, 0x02	; 2
     7c8:	a1 05       	cpc	r26, r1
     7ca:	b1 05       	cpc	r27, r1
     7cc:	21 f4       	brne	.+8      	; 0x7d6 <buzz_play+0xb4>
     7ce:	8d ef       	ldi	r24, 0xFD	; 253
     7d0:	93 e0       	ldi	r25, 0x03	; 3
     7d2:	97 cf       	rjmp	.-210    	; 0x702 <setSoundNote>
     7d4:	08 95       	ret
     7d6:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     7da:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     7de:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     7e2:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     7e6:	80 32       	cpi	r24, 0x20	; 32
     7e8:	93 40       	sbci	r25, 0x03	; 3
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <buzz_play+0xd6>
     7f0:	88 ef       	ldi	r24, 0xF8	; 248
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	86 cf       	rjmp	.-244    	; 0x702 <setSoundNote>
     7f6:	08 95       	ret
     7f8:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     7fc:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     800:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     804:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     808:	80 3b       	cpi	r24, 0xB0	; 176
     80a:	94 40       	sbci	r25, 0x04	; 4
     80c:	a1 05       	cpc	r26, r1
     80e:	b1 05       	cpc	r27, r1
     810:	09 f0       	breq	.+2      	; 0x814 <buzz_play+0xf2>
     812:	50 c1       	rjmp	.+672    	; 0xab4 <buzz_play+0x392>
     814:	6a cf       	rjmp	.-300    	; 0x6ea <buzz_MUTE>
     816:	08 95       	ret
     818:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     81c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     820:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     824:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     828:	88 3c       	cpi	r24, 0xC8	; 200
     82a:	91 05       	cpc	r25, r1
     82c:	a1 05       	cpc	r26, r1
     82e:	b1 05       	cpc	r27, r1
     830:	20 f4       	brcc	.+8      	; 0x83a <buzz_play+0x118>
     832:	8b e9       	ldi	r24, 0x9B	; 155
     834:	96 e0       	ldi	r25, 0x06	; 6
     836:	65 cf       	rjmp	.-310    	; 0x702 <setSoundNote>
     838:	08 95       	ret
     83a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     83e:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     842:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     846:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     84a:	82 3d       	cpi	r24, 0xD2	; 210
     84c:	91 05       	cpc	r25, r1
     84e:	a1 05       	cpc	r26, r1
     850:	b1 05       	cpc	r27, r1
     852:	21 f4       	brne	.+8      	; 0x85c <buzz_play+0x13a>
     854:	80 e0       	ldi	r24, 0x00	; 0
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	54 cf       	rjmp	.-344    	; 0x702 <setSoundNote>
     85a:	08 95       	ret
     85c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     860:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     864:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     868:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     86c:	8c 3d       	cpi	r24, 0xDC	; 220
     86e:	91 05       	cpc	r25, r1
     870:	a1 05       	cpc	r26, r1
     872:	b1 05       	cpc	r27, r1
     874:	21 f4       	brne	.+8      	; 0x87e <buzz_play+0x15c>
     876:	87 ee       	ldi	r24, 0xE7	; 231
     878:	95 e0       	ldi	r25, 0x05	; 5
     87a:	43 cf       	rjmp	.-378    	; 0x702 <setSoundNote>
     87c:	08 95       	ret
     87e:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     882:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     886:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     88a:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     88e:	80 39       	cpi	r24, 0x90	; 144
     890:	91 40       	sbci	r25, 0x01	; 1
     892:	a1 05       	cpc	r26, r1
     894:	b1 05       	cpc	r27, r1
     896:	21 f4       	brne	.+8      	; 0x8a0 <buzz_play+0x17e>
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	32 cf       	rjmp	.-412    	; 0x702 <setSoundNote>
     89e:	08 95       	ret
     8a0:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     8a4:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     8a8:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     8ac:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     8b0:	8e 3a       	cpi	r24, 0xAE	; 174
     8b2:	91 40       	sbci	r25, 0x01	; 1
     8b4:	a1 05       	cpc	r26, r1
     8b6:	b1 05       	cpc	r27, r1
     8b8:	21 f4       	brne	.+8      	; 0x8c2 <buzz_play+0x1a0>
     8ba:	85 e6       	ldi	r24, 0x65	; 101
     8bc:	94 e0       	ldi	r25, 0x04	; 4
     8be:	21 cf       	rjmp	.-446    	; 0x702 <setSoundNote>
     8c0:	08 95       	ret
     8c2:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     8c6:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     8ca:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     8ce:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     8d2:	88 35       	cpi	r24, 0x58	; 88
     8d4:	92 40       	sbci	r25, 0x02	; 2
     8d6:	a1 05       	cpc	r26, r1
     8d8:	b1 05       	cpc	r27, r1
     8da:	09 f0       	breq	.+2      	; 0x8de <buzz_play+0x1bc>
     8dc:	eb c0       	rjmp	.+470    	; 0xab4 <buzz_play+0x392>
     8de:	05 cf       	rjmp	.-502    	; 0x6ea <buzz_MUTE>
     8e0:	08 95       	ret
     8e2:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     8e6:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     8ea:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     8ee:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     8f2:	8b 34       	cpi	r24, 0x4B	; 75
     8f4:	91 05       	cpc	r25, r1
     8f6:	a1 05       	cpc	r26, r1
     8f8:	b1 05       	cpc	r27, r1
     8fa:	20 f4       	brcc	.+8      	; 0x904 <buzz_play+0x1e2>
     8fc:	82 e1       	ldi	r24, 0x12	; 18
     8fe:	94 e0       	ldi	r25, 0x04	; 4
     900:	00 cf       	rjmp	.-512    	; 0x702 <setSoundNote>
     902:	08 95       	ret
     904:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     908:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     90c:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     910:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     914:	86 39       	cpi	r24, 0x96	; 150
     916:	91 05       	cpc	r25, r1
     918:	a1 05       	cpc	r26, r1
     91a:	b1 05       	cpc	r27, r1
     91c:	20 f4       	brcc	.+8      	; 0x926 <buzz_play+0x204>
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	ef ce       	rjmp	.-546    	; 0x702 <setSoundNote>
     924:	08 95       	ret
     926:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     92a:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     92e:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     932:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     936:	81 3e       	cpi	r24, 0xE1	; 225
     938:	91 05       	cpc	r25, r1
     93a:	a1 05       	cpc	r26, r1
     93c:	b1 05       	cpc	r27, r1
     93e:	20 f4       	brcc	.+8      	; 0x948 <buzz_play+0x226>
     940:	82 e1       	ldi	r24, 0x12	; 18
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	de ce       	rjmp	.-580    	; 0x702 <setSoundNote>
     946:	08 95       	ret
     948:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     94c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     950:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     954:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     958:	8c 32       	cpi	r24, 0x2C	; 44
     95a:	91 40       	sbci	r25, 0x01	; 1
     95c:	a1 05       	cpc	r26, r1
     95e:	b1 05       	cpc	r27, r1
     960:	20 f4       	brcc	.+8      	; 0x96a <buzz_play+0x248>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	cd ce       	rjmp	.-614    	; 0x702 <setSoundNote>
     968:	08 95       	ret
     96a:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     96e:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     972:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     976:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     97a:	87 37       	cpi	r24, 0x77	; 119
     97c:	91 40       	sbci	r25, 0x01	; 1
     97e:	a1 05       	cpc	r26, r1
     980:	b1 05       	cpc	r27, r1
     982:	20 f4       	brcc	.+8      	; 0x98c <buzz_play+0x26a>
     984:	82 e1       	ldi	r24, 0x12	; 18
     986:	94 e0       	ldi	r25, 0x04	; 4
     988:	bc ce       	rjmp	.-648    	; 0x702 <setSoundNote>
     98a:	08 95       	ret
     98c:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     990:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     994:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     998:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     99c:	82 3c       	cpi	r24, 0xC2	; 194
     99e:	91 40       	sbci	r25, 0x01	; 1
     9a0:	a1 05       	cpc	r26, r1
     9a2:	b1 05       	cpc	r27, r1
     9a4:	09 f0       	breq	.+2      	; 0x9a8 <buzz_play+0x286>
     9a6:	86 c0       	rjmp	.+268    	; 0xab4 <buzz_play+0x392>
     9a8:	a0 ce       	rjmp	.-704    	; 0x6ea <buzz_MUTE>
     9aa:	08 95       	ret
     9ac:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     9b0:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     9b4:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     9b8:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     9bc:	84 36       	cpi	r24, 0x64	; 100
     9be:	91 05       	cpc	r25, r1
     9c0:	a1 05       	cpc	r26, r1
     9c2:	b1 05       	cpc	r27, r1
     9c4:	20 f4       	brcc	.+8      	; 0x9ce <buzz_play+0x2ac>
     9c6:	82 e1       	ldi	r24, 0x12	; 18
     9c8:	94 e0       	ldi	r25, 0x04	; 4
     9ca:	9b ce       	rjmp	.-714    	; 0x702 <setSoundNote>
     9cc:	08 95       	ret
     9ce:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     9d2:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     9d6:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     9da:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     9de:	88 3c       	cpi	r24, 0xC8	; 200
     9e0:	91 05       	cpc	r25, r1
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	20 f4       	brcc	.+8      	; 0x9f0 <buzz_play+0x2ce>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	8a ce       	rjmp	.-748    	; 0x702 <setSoundNote>
     9ee:	08 95       	ret
     9f0:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     9f4:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     9f8:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     9fc:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     a00:	8c 32       	cpi	r24, 0x2C	; 44
     a02:	91 40       	sbci	r25, 0x01	; 1
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	20 f4       	brcc	.+8      	; 0xa12 <buzz_play+0x2f0>
     a0a:	82 e1       	ldi	r24, 0x12	; 18
     a0c:	94 e0       	ldi	r25, 0x04	; 4
     a0e:	79 ce       	rjmp	.-782    	; 0x702 <setSoundNote>
     a10:	08 95       	ret
     a12:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     a16:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     a1a:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     a1e:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     a22:	82 3c       	cpi	r24, 0xC2	; 194
     a24:	91 40       	sbci	r25, 0x01	; 1
     a26:	a1 05       	cpc	r26, r1
     a28:	b1 05       	cpc	r27, r1
     a2a:	09 f0       	breq	.+2      	; 0xa2e <buzz_play+0x30c>
     a2c:	43 c0       	rjmp	.+134    	; 0xab4 <buzz_play+0x392>
     a2e:	5d ce       	rjmp	.-838    	; 0x6ea <buzz_MUTE>
     a30:	08 95       	ret
     a32:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     a36:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     a3a:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     a3e:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     a42:	84 36       	cpi	r24, 0x64	; 100
     a44:	91 05       	cpc	r25, r1
     a46:	a1 05       	cpc	r26, r1
     a48:	b1 05       	cpc	r27, r1
     a4a:	20 f4       	brcc	.+8      	; 0xa54 <buzz_play+0x332>
     a4c:	87 e4       	ldi	r24, 0x47	; 71
     a4e:	90 e1       	ldi	r25, 0x10	; 16
     a50:	58 ce       	rjmp	.-848    	; 0x702 <setSoundNote>
     a52:	08 95       	ret
     a54:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     a58:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     a5c:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     a60:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     a64:	88 3c       	cpi	r24, 0xC8	; 200
     a66:	91 05       	cpc	r25, r1
     a68:	a1 05       	cpc	r26, r1
     a6a:	b1 05       	cpc	r27, r1
     a6c:	20 f4       	brcc	.+8      	; 0xa76 <buzz_play+0x354>
     a6e:	80 e0       	ldi	r24, 0x00	; 0
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	47 ce       	rjmp	.-882    	; 0x702 <setSoundNote>
     a74:	08 95       	ret
     a76:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     a7a:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     a7e:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     a82:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     a86:	8c 32       	cpi	r24, 0x2C	; 44
     a88:	91 40       	sbci	r25, 0x01	; 1
     a8a:	a1 05       	cpc	r26, r1
     a8c:	b1 05       	cpc	r27, r1
     a8e:	20 f4       	brcc	.+8      	; 0xa98 <buzz_play+0x376>
     a90:	84 e2       	ldi	r24, 0x24	; 36
     a92:	98 e0       	ldi	r25, 0x08	; 8
     a94:	36 ce       	rjmp	.-916    	; 0x702 <setSoundNote>
     a96:	08 95       	ret
     a98:	80 91 70 07 	lds	r24, 0x0770	; 0x800770 <TICK+0x4>
     a9c:	90 91 71 07 	lds	r25, 0x0771	; 0x800771 <TICK+0x5>
     aa0:	a0 91 72 07 	lds	r26, 0x0772	; 0x800772 <TICK+0x6>
     aa4:	b0 91 73 07 	lds	r27, 0x0773	; 0x800773 <TICK+0x7>
     aa8:	82 3c       	cpi	r24, 0xC2	; 194
     aaa:	91 40       	sbci	r25, 0x01	; 1
     aac:	a1 05       	cpc	r26, r1
     aae:	b1 05       	cpc	r27, r1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <buzz_play+0x392>
     ab2:	1b ce       	rjmp	.-970    	; 0x6ea <buzz_MUTE>
     ab4:	08 95       	ret

00000ab6 <__vector_15>:
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
     adc:	ec e6       	ldi	r30, 0x6C	; 108
     ade:	f7 e0       	ldi	r31, 0x07	; 7
     ae0:	80 81       	ld	r24, Z
     ae2:	91 81       	ldd	r25, Z+1	; 0x01
     ae4:	a2 81       	ldd	r26, Z+2	; 0x02
     ae6:	b3 81       	ldd	r27, Z+3	; 0x03
     ae8:	01 96       	adiw	r24, 0x01	; 1
     aea:	a1 1d       	adc	r26, r1
     aec:	b1 1d       	adc	r27, r1
     aee:	80 83       	st	Z, r24
     af0:	91 83       	std	Z+1, r25	; 0x01
     af2:	a2 83       	std	Z+2, r26	; 0x02
     af4:	b3 83       	std	Z+3, r27	; 0x03
     af6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <logojector_tick_enable_flag>
     afa:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <logojector_tick_enable_flag+0x1>
     afe:	89 2b       	or	r24, r25
     b00:	59 f0       	breq	.+22     	; 0xb18 <__vector_15+0x62>
     b02:	80 85       	ldd	r24, Z+8	; 0x08
     b04:	91 85       	ldd	r25, Z+9	; 0x09
     b06:	a2 85       	ldd	r26, Z+10	; 0x0a
     b08:	b3 85       	ldd	r27, Z+11	; 0x0b
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	a1 1d       	adc	r26, r1
     b0e:	b1 1d       	adc	r27, r1
     b10:	80 87       	std	Z+8, r24	; 0x08
     b12:	91 87       	std	Z+9, r25	; 0x09
     b14:	a2 87       	std	Z+10, r26	; 0x0a
     b16:	b3 87       	std	Z+11, r27	; 0x0b
     b18:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <lcd_tick_enable_flag>
     b1c:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <lcd_tick_enable_flag+0x1>
     b20:	89 2b       	or	r24, r25
     b22:	69 f0       	breq	.+26     	; 0xb3e <__vector_15+0x88>
     b24:	ec e6       	ldi	r30, 0x6C	; 108
     b26:	f7 e0       	ldi	r31, 0x07	; 7
     b28:	84 85       	ldd	r24, Z+12	; 0x0c
     b2a:	95 85       	ldd	r25, Z+13	; 0x0d
     b2c:	a6 85       	ldd	r26, Z+14	; 0x0e
     b2e:	b7 85       	ldd	r27, Z+15	; 0x0f
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	a1 1d       	adc	r26, r1
     b34:	b1 1d       	adc	r27, r1
     b36:	84 87       	std	Z+12, r24	; 0x0c
     b38:	95 87       	std	Z+13, r25	; 0x0d
     b3a:	a6 87       	std	Z+14, r26	; 0x0e
     b3c:	b7 87       	std	Z+15, r27	; 0x0f
     b3e:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <exit_gate_tick_enable_flag>
     b42:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <exit_gate_tick_enable_flag+0x1>
     b46:	89 2b       	or	r24, r25
     b48:	69 f0       	breq	.+26     	; 0xb64 <__vector_15+0xae>
     b4a:	ec e6       	ldi	r30, 0x6C	; 108
     b4c:	f7 e0       	ldi	r31, 0x07	; 7
     b4e:	80 89       	ldd	r24, Z+16	; 0x10
     b50:	91 89       	ldd	r25, Z+17	; 0x11
     b52:	a2 89       	ldd	r26, Z+18	; 0x12
     b54:	b3 89       	ldd	r27, Z+19	; 0x13
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	a1 1d       	adc	r26, r1
     b5a:	b1 1d       	adc	r27, r1
     b5c:	80 8b       	std	Z+16, r24	; 0x10
     b5e:	91 8b       	std	Z+17, r25	; 0x11
     b60:	a2 8b       	std	Z+18, r26	; 0x12
     b62:	b3 8b       	std	Z+19, r27	; 0x13
     b64:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <entrance_gate_tick_enable_flag>
     b68:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <entrance_gate_tick_enable_flag+0x1>
     b6c:	89 2b       	or	r24, r25
     b6e:	69 f0       	breq	.+26     	; 0xb8a <__vector_15+0xd4>
     b70:	ec e6       	ldi	r30, 0x6C	; 108
     b72:	f7 e0       	ldi	r31, 0x07	; 7
     b74:	84 89       	ldd	r24, Z+20	; 0x14
     b76:	95 89       	ldd	r25, Z+21	; 0x15
     b78:	a6 89       	ldd	r26, Z+22	; 0x16
     b7a:	b7 89       	ldd	r27, Z+23	; 0x17
     b7c:	01 96       	adiw	r24, 0x01	; 1
     b7e:	a1 1d       	adc	r26, r1
     b80:	b1 1d       	adc	r27, r1
     b82:	84 8b       	std	Z+20, r24	; 0x14
     b84:	95 8b       	std	Z+21, r25	; 0x15
     b86:	a6 8b       	std	Z+22, r26	; 0x16
     b88:	b7 8b       	std	Z+23, r27	; 0x17
     b8a:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <timeout_tick_enable_flag>
     b8e:	90 91 ba 05 	lds	r25, 0x05BA	; 0x8005ba <timeout_tick_enable_flag+0x1>
     b92:	89 2b       	or	r24, r25
     b94:	69 f0       	breq	.+26     	; 0xbb0 <__vector_15+0xfa>
     b96:	ec e6       	ldi	r30, 0x6C	; 108
     b98:	f7 e0       	ldi	r31, 0x07	; 7
     b9a:	80 8d       	ldd	r24, Z+24	; 0x18
     b9c:	91 8d       	ldd	r25, Z+25	; 0x19
     b9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
     ba0:	b3 8d       	ldd	r27, Z+27	; 0x1b
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	a1 1d       	adc	r26, r1
     ba6:	b1 1d       	adc	r27, r1
     ba8:	80 8f       	std	Z+24, r24	; 0x18
     baa:	91 8f       	std	Z+25, r25	; 0x19
     bac:	a2 8f       	std	Z+26, r26	; 0x1a
     bae:	b3 8f       	std	Z+27, r27	; 0x1b
     bb0:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <buzz_tick_enable_flag>
     bb4:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <buzz_tick_enable_flag+0x1>
     bb8:	89 2b       	or	r24, r25
     bba:	71 f0       	breq	.+28     	; 0xbd8 <__vector_15+0x122>
     bbc:	ec e6       	ldi	r30, 0x6C	; 108
     bbe:	f7 e0       	ldi	r31, 0x07	; 7
     bc0:	84 81       	ldd	r24, Z+4	; 0x04
     bc2:	95 81       	ldd	r25, Z+5	; 0x05
     bc4:	a6 81       	ldd	r26, Z+6	; 0x06
     bc6:	b7 81       	ldd	r27, Z+7	; 0x07
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	a1 1d       	adc	r26, r1
     bcc:	b1 1d       	adc	r27, r1
     bce:	84 83       	std	Z+4, r24	; 0x04
     bd0:	95 83       	std	Z+5, r25	; 0x05
     bd2:	a6 83       	std	Z+6, r26	; 0x06
     bd4:	b7 83       	std	Z+7, r27	; 0x07
     bd6:	a5 dd       	rcall	.-1206   	; 0x722 <buzz_play>
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	bf 91       	pop	r27
     bde:	af 91       	pop	r26
     be0:	9f 91       	pop	r25
     be2:	8f 91       	pop	r24
     be4:	7f 91       	pop	r23
     be6:	6f 91       	pop	r22
     be8:	5f 91       	pop	r21
     bea:	4f 91       	pop	r20
     bec:	3f 91       	pop	r19
     bee:	2f 91       	pop	r18
     bf0:	0f 90       	pop	r0
     bf2:	0b be       	out	0x3b, r0	; 59
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <start_timeout_count>:
     bfe:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <TICK+0x18>
     c02:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <TICK+0x19>
     c06:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <TICK+0x1a>
     c0a:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <TICK+0x1b>
     c0e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c12:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     c16:	08 95       	ret

00000c18 <request_reset_to_admin>:
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	cd b7       	in	r28, 0x3d	; 61
     c1e:	de b7       	in	r29, 0x3e	; 62
     c20:	65 97       	sbiw	r28, 0x15	; 21
     c22:	0f b6       	in	r0, 0x3f	; 63
     c24:	f8 94       	cli
     c26:	de bf       	out	0x3e, r29	; 62
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	cd bf       	out	0x3d, r28	; 61
     c2c:	bc 01       	movw	r22, r24
     c2e:	9a e0       	ldi	r25, 0x0A	; 10
     c30:	e5 e0       	ldi	r30, 0x05	; 5
     c32:	f1 e0       	ldi	r31, 0x01	; 1
     c34:	de 01       	movw	r26, r28
     c36:	11 96       	adiw	r26, 0x01	; 1
     c38:	01 90       	ld	r0, Z+
     c3a:	0d 92       	st	X+, r0
     c3c:	9a 95       	dec	r25
     c3e:	e1 f7       	brne	.-8      	; 0xc38 <request_reset_to_admin+0x20>
     c40:	fe 01       	movw	r30, r28
     c42:	3b 96       	adiw	r30, 0x0b	; 11
     c44:	8b e0       	ldi	r24, 0x0B	; 11
     c46:	df 01       	movw	r26, r30
     c48:	1d 92       	st	X+, r1
     c4a:	8a 95       	dec	r24
     c4c:	e9 f7       	brne	.-6      	; 0xc48 <request_reset_to_admin+0x30>
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 33 11 	call	0x2266	; 0x2266 <strcat>
     c56:	f1 d5       	rcall	.+3042   	; 0x183a <i2c_lcd_clear>
     c58:	4c e9       	ldi	r20, 0x9C	; 156
     c5a:	51 e0       	ldi	r21, 0x01	; 1
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	dd d5       	rcall	.+3002   	; 0x181c <i2c_lcd_string>
     c62:	49 ea       	ldi	r20, 0xA9	; 169
     c64:	51 e0       	ldi	r21, 0x01	; 1
     c66:	60 e0       	ldi	r22, 0x00	; 0
     c68:	82 e0       	ldi	r24, 0x02	; 2
     c6a:	d8 d5       	rcall	.+2992   	; 0x181c <i2c_lcd_string>
     c6c:	ae 01       	movw	r20, r28
     c6e:	4f 5f       	subi	r20, 0xFF	; 255
     c70:	5f 4f       	sbci	r21, 0xFF	; 255
     c72:	60 e0       	ldi	r22, 0x00	; 0
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	d2 d5       	rcall	.+2980   	; 0x181c <i2c_lcd_string>
     c78:	65 96       	adiw	r28, 0x15	; 21
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	08 95       	ret

00000c8a <timeout_check>:
     c8a:	40 91 84 07 	lds	r20, 0x0784	; 0x800784 <TICK+0x18>
     c8e:	50 91 85 07 	lds	r21, 0x0785	; 0x800785 <TICK+0x19>
     c92:	60 91 86 07 	lds	r22, 0x0786	; 0x800786 <TICK+0x1a>
     c96:	70 91 87 07 	lds	r23, 0x0787	; 0x800787 <TICK+0x1b>
     c9a:	41 31       	cpi	r20, 0x11	; 17
     c9c:	57 42       	sbci	r21, 0x27	; 39
     c9e:	61 05       	cpc	r22, r1
     ca0:	71 05       	cpc	r23, r1
     ca2:	38 f0       	brcs	.+14     	; 0xcb2 <timeout_check+0x28>
     ca4:	21 e0       	ldi	r18, 0x01	; 1
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cac:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
     cb0:	b3 df       	rcall	.-154    	; 0xc18 <request_reset_to_admin>
     cb2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     cb6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     cba:	00 97       	sbiw	r24, 0x00	; 0
     cbc:	f1 f7       	brne	.-4      	; 0xcba <timeout_check+0x30>
     cbe:	08 95       	ret

00000cc0 <esp8266_init>:
     cc0:	cf 92       	push	r12
     cc2:	df 92       	push	r13
     cc4:	ef 92       	push	r14
     cc6:	ff 92       	push	r15
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	7c 01       	movw	r14, r24
     cd2:	6b 01       	movw	r12, r22
     cd4:	ea 01       	movw	r28, r20
     cd6:	89 01       	movw	r16, r18
     cd8:	92 df       	rcall	.-220    	; 0xbfe <start_timeout_count>
     cda:	8c eb       	ldi	r24, 0xBC	; 188
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     ce2:	2f ef       	ldi	r18, 0xFF	; 255
     ce4:	81 e1       	ldi	r24, 0x11	; 17
     ce6:	9a e7       	ldi	r25, 0x7A	; 122
     ce8:	21 50       	subi	r18, 0x01	; 1
     cea:	80 40       	sbci	r24, 0x00	; 0
     cec:	90 40       	sbci	r25, 0x00	; 0
     cee:	e1 f7       	brne	.-8      	; 0xce8 <esp8266_init+0x28>
     cf0:	00 c0       	rjmp	.+0      	; 0xcf2 <esp8266_init+0x32>
     cf2:	00 00       	nop
     cf4:	85 ec       	ldi	r24, 0xC5	; 197
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	c8 df       	rcall	.-112    	; 0xc8a <timeout_check>
     cfa:	4c ec       	ldi	r20, 0xCC	; 204
     cfc:	51 e0       	ldi	r21, 0x01	; 1
     cfe:	60 e0       	ldi	r22, 0x00	; 0
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	8c d5       	rcall	.+2840   	; 0x181c <i2c_lcd_string>
     d04:	7c df       	rcall	.-264    	; 0xbfe <start_timeout_count>
     d06:	81 ee       	ldi	r24, 0xE1	; 225
     d08:	91 e0       	ldi	r25, 0x01	; 1
     d0a:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     d0e:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d12:	81 11       	cpse	r24, r1
     d14:	07 c0       	rjmp	.+14     	; 0xd24 <esp8266_init+0x64>
     d16:	8a ee       	ldi	r24, 0xEA	; 234
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	b7 df       	rcall	.-146    	; 0xc8a <timeout_check>
     d1c:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d20:	88 23       	and	r24, r24
     d22:	c9 f3       	breq	.-14     	; 0xd16 <esp8266_init+0x56>
     d24:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     d28:	6a df       	rcall	.-300    	; 0xbfe <start_timeout_count>
     d2a:	81 ef       	ldi	r24, 0xF1	; 241
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     d32:	2f ef       	ldi	r18, 0xFF	; 255
     d34:	87 ea       	ldi	r24, 0xA7	; 167
     d36:	91 e6       	ldi	r25, 0x61	; 97
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	80 40       	sbci	r24, 0x00	; 0
     d3c:	90 40       	sbci	r25, 0x00	; 0
     d3e:	e1 f7       	brne	.-8      	; 0xd38 <esp8266_init+0x78>
     d40:	00 c0       	rjmp	.+0      	; 0xd42 <esp8266_init+0x82>
     d42:	00 00       	nop
     d44:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	9e df       	rcall	.-196    	; 0xc8a <timeout_check>
     d4e:	49 e0       	ldi	r20, 0x09	; 9
     d50:	52 e0       	ldi	r21, 0x02	; 2
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	62 d5       	rcall	.+2756   	; 0x181c <i2c_lcd_string>
     d58:	52 df       	rcall	.-348    	; 0xbfe <start_timeout_count>
     d5a:	8e e1       	ldi	r24, 0x1E	; 30
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     d62:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d66:	81 11       	cpse	r24, r1
     d68:	07 c0       	rjmp	.+14     	; 0xd78 <esp8266_init+0xb8>
     d6a:	8b e2       	ldi	r24, 0x2B	; 43
     d6c:	92 e0       	ldi	r25, 0x02	; 2
     d6e:	8d df       	rcall	.-230    	; 0xc8a <timeout_check>
     d70:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d74:	88 23       	and	r24, r24
     d76:	c9 f3       	breq	.-14     	; 0xd6a <esp8266_init+0xaa>
     d78:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     d7c:	40 df       	rcall	.-384    	; 0xbfe <start_timeout_count>
     d7e:	86 e3       	ldi	r24, 0x36	; 54
     d80:	92 e0       	ldi	r25, 0x02	; 2
     d82:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     d86:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d8a:	81 11       	cpse	r24, r1
     d8c:	07 c0       	rjmp	.+14     	; 0xd9c <esp8266_init+0xdc>
     d8e:	81 e4       	ldi	r24, 0x41	; 65
     d90:	92 e0       	ldi	r25, 0x02	; 2
     d92:	7b df       	rcall	.-266    	; 0xc8a <timeout_check>
     d94:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     d98:	88 23       	and	r24, r24
     d9a:	c9 f3       	breq	.-14     	; 0xd8e <esp8266_init+0xce>
     d9c:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     da0:	4a e4       	ldi	r20, 0x4A	; 74
     da2:	52 e0       	ldi	r21, 0x02	; 2
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	39 d5       	rcall	.+2674   	; 0x181c <i2c_lcd_string>
     daa:	29 df       	rcall	.-430    	; 0xbfe <start_timeout_count>
     dac:	a6 01       	movw	r20, r12
     dae:	b7 01       	movw	r22, r14
     db0:	8f e5       	ldi	r24, 0x5F	; 95
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 4d 10 	call	0x209a	; 0x209a <connect_to_AP>
     db8:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     dbc:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     dc0:	81 11       	cpse	r24, r1
     dc2:	07 c0       	rjmp	.+14     	; 0xdd2 <esp8266_init+0x112>
     dc4:	8a e6       	ldi	r24, 0x6A	; 106
     dc6:	92 e0       	ldi	r25, 0x02	; 2
     dc8:	60 df       	rcall	.-320    	; 0xc8a <timeout_check>
     dca:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     dce:	88 23       	and	r24, r24
     dd0:	c9 f3       	breq	.-14     	; 0xdc4 <esp8266_init+0x104>
     dd2:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     dd6:	43 e7       	ldi	r20, 0x73	; 115
     dd8:	52 e0       	ldi	r21, 0x02	; 2
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	82 e0       	ldi	r24, 0x02	; 2
     dde:	1e d5       	rcall	.+2620   	; 0x181c <i2c_lcd_string>
     de0:	0e df       	rcall	.-484    	; 0xbfe <start_timeout_count>
     de2:	88 e8       	ldi	r24, 0x88	; 136
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     dea:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     dee:	81 11       	cpse	r24, r1
     df0:	07 c0       	rjmp	.+14     	; 0xe00 <esp8266_init+0x140>
     df2:	83 e9       	ldi	r24, 0x93	; 147
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	49 df       	rcall	.-366    	; 0xc8a <timeout_check>
     df8:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     dfc:	88 23       	and	r24, r24
     dfe:	c9 f3       	breq	.-14     	; 0xdf2 <esp8266_init+0x132>
     e00:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     e04:	4c e9       	ldi	r20, 0x9C	; 156
     e06:	52 e0       	ldi	r21, 0x02	; 2
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	07 d5       	rcall	.+2574   	; 0x181c <i2c_lcd_string>
     e0e:	f7 de       	rcall	.-530    	; 0xbfe <start_timeout_count>
     e10:	b8 01       	movw	r22, r16
     e12:	ce 01       	movw	r24, r28
     e14:	0e 94 a3 10 	call	0x2146	; 0x2146 <TCP_connect>
     e18:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <uart1_tx_string>
     e1c:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     e20:	81 11       	cpse	r24, r1
     e22:	07 c0       	rjmp	.+14     	; 0xe32 <esp8266_init+0x172>
     e24:	81 eb       	ldi	r24, 0xB1	; 177
     e26:	92 e0       	ldi	r25, 0x02	; 2
     e28:	30 df       	rcall	.-416    	; 0xc8a <timeout_check>
     e2a:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <esp8266_return_result_flag>
     e2e:	88 23       	and	r24, r24
     e30:	c9 f3       	breq	.-14     	; 0xe24 <esp8266_init+0x164>
     e32:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <esp8266_return_result_flag>
     e36:	4d eb       	ldi	r20, 0xBD	; 189
     e38:	52 e0       	ldi	r21, 0x02	; 2
     e3a:	60 e0       	ldi	r22, 0x00	; 0
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	ee d4       	rcall	.+2524   	; 0x181c <i2c_lcd_string>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	81 ee       	ldi	r24, 0xE1	; 225
     e44:	94 e0       	ldi	r25, 0x04	; 4
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <esp8266_init+0x186>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <esp8266_init+0x190>
     e50:	00 00       	nop
     e52:	42 ed       	ldi	r20, 0xD2	; 210
     e54:	52 e0       	ldi	r21, 0x02	; 2
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	e0 d4       	rcall	.+2496   	; 0x181c <i2c_lcd_string>
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	1f 91       	pop	r17
     e62:	0f 91       	pop	r16
     e64:	ff 90       	pop	r15
     e66:	ef 90       	pop	r14
     e68:	df 90       	pop	r13
     e6a:	cf 90       	pop	r12
     e6c:	08 95       	ret

00000e6e <logojector_ON>:
     e6e:	ac 9a       	sbi	0x15, 4	; 21
     e70:	08 95       	ret

00000e72 <logojector_OFF>:
     e72:	ac 98       	cbi	0x15, 4	; 21
     e74:	08 95       	ret

00000e76 <set_servo>:
     e76:	9c 01       	movw	r18, r24
     e78:	97 b7       	in	r25, 0x37	; 55
     e7a:	94 60       	ori	r25, 0x04	; 4
     e7c:	97 bf       	out	0x37, r25	; 55
     e7e:	10 92 dc 04 	sts	0x04DC, r1	; 0x8004dc <servo_PWM_stack+0x1>
     e82:	10 92 db 04 	sts	0x04DB, r1	; 0x8004db <servo_PWM_stack>
     e86:	21 15       	cp	r18, r1
     e88:	31 05       	cpc	r19, r1
     e8a:	39 f4       	brne	.+14     	; 0xe9a <set_servo+0x24>
     e8c:	6d 5f       	subi	r22, 0xFD	; 253
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	70 93 59 06 	sts	0x0659, r23	; 0x800659 <servo_1_duty_ratio+0x1>
     e94:	60 93 58 06 	sts	0x0658, r22	; 0x800658 <servo_1_duty_ratio>
     e98:	08 95       	ret
     e9a:	21 30       	cpi	r18, 0x01	; 1
     e9c:	31 05       	cpc	r19, r1
     e9e:	31 f4       	brne	.+12     	; 0xeac <set_servo+0x36>
     ea0:	6d 5f       	subi	r22, 0xFD	; 253
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	70 93 69 07 	sts	0x0769, r23	; 0x800769 <servo_2_duty_ratio+0x1>
     ea8:	60 93 68 07 	sts	0x0768, r22	; 0x800768 <servo_2_duty_ratio>
     eac:	08 95       	ret

00000eae <tick_enable>:
	 tick_enable(flag);
	 
 }
 
 void tick_enable(int tick_name){
	 switch(tick_name){
     eae:	84 30       	cpi	r24, 0x04	; 4
     eb0:	91 05       	cpc	r25, r1
     eb2:	59 f1       	breq	.+86     	; 0xf0a <tick_enable+0x5c>
     eb4:	34 f4       	brge	.+12     	; 0xec2 <tick_enable+0x14>
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	91 05       	cpc	r25, r1
     eba:	49 f0       	breq	.+18     	; 0xece <tick_enable+0x20>
     ebc:	02 97       	sbiw	r24, 0x02	; 2
     ebe:	b1 f0       	breq	.+44     	; 0xeec <tick_enable+0x3e>
     ec0:	08 95       	ret
     ec2:	85 30       	cpi	r24, 0x05	; 5
     ec4:	91 05       	cpc	r25, r1
     ec6:	81 f1       	breq	.+96     	; 0xf28 <tick_enable+0x7a>
     ec8:	06 97       	sbiw	r24, 0x06	; 6
     eca:	e9 f1       	breq	.+122    	; 0xf46 <tick_enable+0x98>
     ecc:	08 95       	ret
		 case TICK_BUZZ: TICK.buzz_1ms=0; buzz_tick_enable_flag=1; break;
     ece:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <TICK+0x4>
     ed2:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <TICK+0x5>
     ed6:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <TICK+0x6>
     eda:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <TICK+0x7>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <buzz_tick_enable_flag+0x1>
     ee6:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <buzz_tick_enable_flag>
     eea:	08 95       	ret
		 case TICK_LOGOJECTOR:TICK.logojector_tick_1ms=0; logojector_tick_enable_flag=1; break;
     eec:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <TICK+0x8>
     ef0:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <TICK+0x9>
     ef4:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <TICK+0xa>
     ef8:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <TICK+0xb>
     efc:	81 e0       	ldi	r24, 0x01	; 1
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	90 93 23 06 	sts	0x0623, r25	; 0x800623 <logojector_tick_enable_flag+0x1>
     f04:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <logojector_tick_enable_flag>
     f08:	08 95       	ret
		 //case TICK_LCD: lcd_tick_enable_flag=1;
		 case TICK_EXIT_GATE: TICK.exit_gate_tick_1ms=0; exit_gate_tick_enable_flag=1; break;
     f0a:	10 92 7c 07 	sts	0x077C, r1	; 0x80077c <TICK+0x10>
     f0e:	10 92 7d 07 	sts	0x077D, r1	; 0x80077d <TICK+0x11>
     f12:	10 92 7e 07 	sts	0x077E, r1	; 0x80077e <TICK+0x12>
     f16:	10 92 7f 07 	sts	0x077F, r1	; 0x80077f <TICK+0x13>
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	90 93 65 07 	sts	0x0765, r25	; 0x800765 <exit_gate_tick_enable_flag+0x1>
     f22:	80 93 64 07 	sts	0x0764, r24	; 0x800764 <exit_gate_tick_enable_flag>
     f26:	08 95       	ret
		 case TICK_ENTRANCE_GATE: TICK.entrance_gate_tick_1ms=0; entrance_gate_tick_enable_flag=1; break;
     f28:	10 92 80 07 	sts	0x0780, r1	; 0x800780 <TICK+0x14>
     f2c:	10 92 81 07 	sts	0x0781, r1	; 0x800781 <TICK+0x15>
     f30:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <TICK+0x16>
     f34:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <TICK+0x17>
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <entrance_gate_tick_enable_flag+0x1>
     f40:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <entrance_gate_tick_enable_flag>
     f44:	08 95       	ret
		 case TICK_TIMEOUT :TICK.timeout_tick_1ms=0; timeout_tick_enable_flag=1; break;
     f46:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <TICK+0x18>
     f4a:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <TICK+0x19>
     f4e:	10 92 86 07 	sts	0x0786, r1	; 0x800786 <TICK+0x1a>
     f52:	10 92 87 07 	sts	0x0787, r1	; 0x800787 <TICK+0x1b>
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 ba 05 	sts	0x05BA, r25	; 0x8005ba <timeout_tick_enable_flag+0x1>
     f5e:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <timeout_tick_enable_flag>
     f62:	08 95       	ret

00000f64 <setSoundClip>:
//부저 관련 함수들
void setSoundClip(char clip){
	 // 부저 관련 tick.clear
	 
	
	 switch(clip)
     f64:	82 30       	cpi	r24, 0x02	; 2
     f66:	99 f0       	breq	.+38     	; 0xf8e <setSoundClip+0x2a>
     f68:	28 f4       	brcc	.+10     	; 0xf74 <setSoundClip+0x10>
     f6a:	88 23       	and	r24, r24
     f6c:	49 f0       	breq	.+18     	; 0xf80 <setSoundClip+0x1c>
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	51 f0       	breq	.+20     	; 0xf86 <setSoundClip+0x22>
     f72:	1c c0       	rjmp	.+56     	; 0xfac <setSoundClip+0x48>
     f74:	84 30       	cpi	r24, 0x04	; 4
     f76:	99 f0       	breq	.+38     	; 0xf9e <setSoundClip+0x3a>
     f78:	70 f0       	brcs	.+28     	; 0xf96 <setSoundClip+0x32>
     f7a:	85 30       	cpi	r24, 0x05	; 5
     f7c:	a1 f0       	breq	.+40     	; 0xfa6 <setSoundClip+0x42>
     f7e:	16 c0       	rjmp	.+44     	; 0xfac <setSoundClip+0x48>
	 {
		 
		   case BUZZ_MUTE: music_flag=BUZZ_MUTE; break;
     f80:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <music_flag>
     f84:	13 c0       	rjmp	.+38     	; 0xfac <setSoundClip+0x48>
		   case BUZZ_ON: music_flag=BUZZ_ON; break;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <music_flag>
     f8c:	0f c0       	rjmp	.+30     	; 0xfac <setSoundClip+0x48>
		   case BUZZ_SUCCESS: music_flag=BUZZ_SUCCESS; break;
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <music_flag>
     f94:	0b c0       	rjmp	.+22     	; 0xfac <setSoundClip+0x48>
		   case BUZZ_NOT_REGISTERED: music_flag=BUZZ_NOT_REGISTERED; break;
     f96:	83 e0       	ldi	r24, 0x03	; 3
     f98:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <music_flag>
     f9c:	07 c0       	rjmp	.+14     	; 0xfac <setSoundClip+0x48>
		   case BUZZ_FAIL: music_flag=BUZZ_FAIL; break;
     f9e:	84 e0       	ldi	r24, 0x04	; 4
     fa0:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <music_flag>
     fa4:	03 c0       	rjmp	.+6      	; 0xfac <setSoundClip+0x48>
		   case BUZZ_ESP8266_CONNECTED: music_flag=BUZZ_ESP8266_CONNECTED; break;
     fa6:	85 e0       	ldi	r24, 0x05	; 5
     fa8:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <music_flag>
		   
	 }
	 tick_enable(TICK_BUZZ); //여기 안에 TICK.buzz_1ms=0해주는 코드가 포함되어 있음.
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	7e cf       	rjmp	.-260    	; 0xeae <tick_enable>
     fb2:	08 95       	ret

00000fb4 <start_timer>:
	
 }
 
 void start_timer(int flag)
 {
	 TICK.tick_1ms=0;
     fb4:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <TICK>
     fb8:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <TICK+0x1>
     fbc:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <TICK+0x2>
     fc0:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <TICK+0x3>
	 if(flag!=TICK_EXIT_GATE){// LCD가 출력되는 모든 상황에서 lcd tick 초기화가 된다.
     fc4:	84 30       	cpi	r24, 0x04	; 4
     fc6:	91 05       	cpc	r25, r1
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <start_timer+0x32>
		 TICK.lcd_tick_1ms=0;lcd_tick_enable_flag=1;
     fca:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <TICK+0xc>
     fce:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <TICK+0xd>
     fd2:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <TICK+0xe>
     fd6:	10 92 7b 07 	sts	0x077B, r1	; 0x80077b <TICK+0xf>
     fda:	21 e0       	ldi	r18, 0x01	; 1
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	30 93 89 07 	sts	0x0789, r19	; 0x800789 <lcd_tick_enable_flag+0x1>
     fe2:	20 93 88 07 	sts	0x0788, r18	; 0x800788 <lcd_tick_enable_flag>
	 } 
	 

	 //셋된 플래그들에 맞게 타이머 감지를 시작함.
	 tick_enable(flag);
     fe6:	63 cf       	rjmp	.-314    	; 0xeae <tick_enable>
     fe8:	08 95       	ret

00000fea <RC522_data_state_check_and_actuate>:
		}
	}
}

void RC522_data_state_check_and_actuate(char *tggl)
{
     fea:	af 92       	push	r10
     fec:	bf 92       	push	r11
     fee:	cf 92       	push	r12
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	6c 97       	sbiw	r28, 0x1c	; 28
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	9c 01       	movw	r18, r24
	if(received_state==RECEIVE_NONE); //do nothing
	else if(received_state==RECEIVE_SUCCESS)
    1010:	90 91 50 07 	lds	r25, 0x0750	; 0x800750 <received_state>
    1014:	91 30       	cpi	r25, 0x01	; 1
    1016:	09 f0       	breq	.+2      	; 0x101a <__DATA_REGION_LENGTH__+0x1a>
    1018:	ba c1       	rjmp	.+884    	; 0x138e <__stack+0x28f>
    101a:	f9 01       	movw	r30, r18
	{//Received data service routine.
		//send to esp8266 and receive result data.
		
		static int user_count=0;//입구,출구 둘다 사용해야 하는 변수이므로 일단 여기다가 선언함.
		if((*tggl)==ENTRANCE_GATE){
    101c:	80 81       	ld	r24, Z
    101e:	81 11       	cpse	r24, r1
    1020:	59 c1       	rjmp	.+690    	; 0x12d4 <__stack+0x1d5>
			//esp8266에 uid와 입구게이트 정보 전송 함수
			//while(전송 완료될 때 까지 대기)???
			
			
			/*이부분은 esp8266 구현한 뒤에 넣어야 된다 */
			uart1_tx_string("AT+CIPSEND=11\r\n"); //4byte길이 데이터 전송 예정
    1022:	87 ee       	ldi	r24, 0xE7	; 231
    1024:	92 e0       	ldi	r25, 0x02	; 2
    1026:	cd d7       	rcall	.+3994   	; 0x1fc2 <uart1_tx_string>
			// '>' 문자가 확인될 때까지 대기
			while(!esp8266_send_ready_flag);//'>'문자 들어왔는지 검사
    1028:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <esp8266_send_ready_flag>
    102c:	88 23       	and	r24, r24
    102e:	e1 f3       	breq	.-8      	; 0x1028 <__DATA_REGION_LENGTH__+0x28>
			esp8266_send_ready_flag=0;
    1030:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <esp8266_send_ready_flag>
			
			//esp8266으로 uid데이터 전송
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
    1034:	82 e3       	ldi	r24, 0x32	; 50
    1036:	e4 e2       	ldi	r30, 0x24	; 36
    1038:	f6 e0       	ldi	r31, 0x06	; 6
    103a:	df 01       	movw	r26, r30
    103c:	1d 92       	st	X+, r1
    103e:	8a 95       	dec	r24
    1040:	e9 f7       	brne	.-6      	; 0x103c <__DATA_REGION_LENGTH__+0x3c>
    1042:	00 e4       	ldi	r16, 0x40	; 64
    1044:	17 e0       	ldi	r17, 0x07	; 7
    1046:	0f 2e       	mov	r0, r31
    1048:	f4 e4       	ldi	r31, 0x44	; 68
    104a:	ef 2e       	mov	r14, r31
    104c:	f7 e0       	ldi	r31, 0x07	; 7
    104e:	ff 2e       	mov	r15, r31
    1050:	f0 2d       	mov	r31, r0
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
    1052:	f8 01       	movw	r30, r16
    1054:	81 91       	ld	r24, Z+
    1056:	8f 01       	movw	r16, r30
    1058:	f1 d7       	rcall	.+4066   	; 0x203c <HexToString>
    105a:	b3 d7       	rcall	.+3942   	; 0x1fc2 <uart1_tx_string>
				uart1_tx_char(' ');
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	a9 d7       	rcall	.+3922   	; 0x1fb2 <uart1_tx_char>
    1060:	0e 15       	cp	r16, r14
			
			//미리 받을 사전 준비 시작.
			memset(esp8266_received_data,0,sizeof(esp8266_received_data)); 
			
			//uid 데이터 전송
			for(int i=0; i<4; i++)
    1062:	1f 05       	cpc	r17, r15
    1064:	b1 f7       	brne	.-20     	; 0x1052 <__DATA_REGION_LENGTH__+0x52>
			{
				uart1_tx_string(HexToString(rfid_uid_ch0[i]));
				uart1_tx_char(' ');
			}
			uart1_tx_string("\r\n");
    1066:	8e ed       	ldi	r24, 0xDE	; 222
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	ab d7       	rcall	.+3926   	; 0x1fc2 <uart1_tx_string>
    106c:	80 91 e0 04 	lds	r24, 0x04E0	; 0x8004e0 <esp8266_receiving_flag>

			
			//esp8266을 통해 uid전송 후, 서버에서 결과물을 다시 전송해주기까지 대기
			while(!esp8266_receiving_flag); //ISR내에서 버퍼에 모두 담을때 까지 대기 esp8266_received_data[] 에 저장
    1070:	88 23       	and	r24, r24
    1072:	e1 f3       	breq	.-8      	; 0x106c <__DATA_REGION_LENGTH__+0x6c>
    1074:	10 92 e0 04 	sts	0x04E0, r1	; 0x8004e0 <esp8266_receiving_flag>
			esp8266_receiving_flag=0;
    1078:	80 91 24 06 	lds	r24, 0x0624	; 0x800624 <esp8266_received_data>
			//esp8266_receive_complete_flag=0;
			if(esp8266_received_data[0]=='O'){
    107c:	8f 34       	cpi	r24, 0x4F	; 79
    107e:	09 f0       	breq	.+2      	; 0x1082 <__DATA_REGION_LENGTH__+0x82>
    1080:	dd c0       	rjmp	.+442    	; 0x123c <__stack+0x13d>
    1082:	80 e2       	ldi	r24, 0x20	; 32
				//DB 테이블에 존재하는 uid일 경우 해당 구문을 들어옴
				
				strncpy((char*)esp8266_received_data,"  ",2);
    1084:	90 e2       	ldi	r25, 0x20	; 32
    1086:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <esp8266_received_data+0x1>
    108a:	80 93 24 06 	sts	0x0624, r24	; 0x800624 <esp8266_received_data>
    108e:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <rfid_user_flag+0x1>
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
    1092:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <rfid_user_flag>
    1096:	06 ee       	ldi	r16, 0xE6	; 230
    1098:	14 e0       	ldi	r17, 0x04	; 4
    109a:	e1 2c       	mov	r14, r1
				for(int i=0; i<MAX_USER_COUNT;i++)
    109c:	f1 2c       	mov	r15, r1
    109e:	cc 24       	eor	r12, r12
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
						rfid_user_flag=1;
    10a0:	c3 94       	inc	r12
    10a2:	d1 2c       	mov	r13, r1
    10a4:	62 e4       	ldi	r22, 0x42	; 66
				for(int i=0; i<MAX_USER_COUNT;i++)
				{
					
					//인덱스를 모두 체크해줘서 한번 인식이 유저의 경우
					// 다시 카드 인식시키지 않도록 구현
					if(strcmp((char*)rfid_user_uid_buffer[i],"0000")==0){
    10a6:	71 e0       	ldi	r23, 0x01	; 1
    10a8:	c8 01       	movw	r24, r16
    10aa:	0e 94 3e 11 	call	0x227c	; 0x227c <strcmp>
    10ae:	89 2b       	or	r24, r25
    10b0:	49 f4       	brne	.+18     	; 0x10c4 <__DATA_REGION_LENGTH__+0xc4>
    10b2:	f0 92 e5 04 	sts	0x04E5, r15	; 0x8004e5 <rfid_user_count_pointer+0x1>
						//해당 위치의 버퍼가 비어있는 것이 확인된다면
						rfid_user_count_pointer=i;
    10b6:	e0 92 e4 04 	sts	0x04E4, r14	; 0x8004e4 <rfid_user_count_pointer>
    10ba:	d0 92 e3 04 	sts	0x04E3, r13	; 0x8004e3 <rfid_user_flag+0x1>
						rfid_user_flag=1;
    10be:	c0 92 e2 04 	sts	0x04E2, r12	; 0x8004e2 <rfid_user_flag>
    10c2:	0c c0       	rjmp	.+24     	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10c4:	60 e4       	ldi	r22, 0x40	; 64
						//i=MAX_USER_COUNT;//루프를 나오기 위함
					}
					else if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch0)==0)
    10c6:	77 e0       	ldi	r23, 0x07	; 7
    10c8:	c8 01       	movw	r24, r16
    10ca:	0e 94 3e 11 	call	0x227c	; 0x227c <strcmp>
    10ce:	89 2b       	or	r24, r25
    10d0:	29 f4       	brne	.+10     	; 0x10dc <__DATA_REGION_LENGTH__+0xdc>
    10d2:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <rfid_user_flag+0x1>
					{
						//만일 버퍼 안에 기존 유저가 들어있는 것이 확인됐을 때 
						i=MAX_USER_COUNT; //그 이후는 의미 없기 때문에 그냥 빠져나옴
						rfid_user_flag=0;
    10d6:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <rfid_user_flag>
    10da:	91 c0       	rjmp	.+290    	; 0x11fe <__stack+0xff>
    10dc:	ff ef       	ldi	r31, 0xFF	; 255
				
				strncpy((char*)esp8266_received_data,"  ",2);
				
				//현재 입장객 버퍼 비어있는 인덱스 체크
				rfid_user_flag=0;
				for(int i=0; i<MAX_USER_COUNT;i++)
    10de:	ef 1a       	sub	r14, r31
    10e0:	ff 0a       	sbc	r15, r31
    10e2:	0b 5f       	subi	r16, 0xFB	; 251
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	8a e2       	ldi	r24, 0x2A	; 42
    10e8:	e8 16       	cp	r14, r24
    10ea:	f1 04       	cpc	r15, r1
    10ec:	d9 f6       	brne	.-74     	; 0x10a4 <__DATA_REGION_LENGTH__+0xa4>
    10ee:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <rfid_user_flag>
					//else rfid_user_flag=0;//모두 꽉 차 있음.
					
				}
				
				
				if(rfid_user_flag){//DB에 uid가 존재할뿐더러, 최초 입장시에만 해당 구문을 들어감. 이후에는 인식안됨.
    10f2:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <rfid_user_flag+0x1>
    10f6:	89 2b       	or	r24, r25
    10f8:	09 f4       	brne	.+2      	; 0x10fc <__DATA_REGION_LENGTH__+0xfc>
    10fa:	81 c0       	rjmp	.+258    	; 0x11fe <__stack+0xff>
    10fc:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <rfid_user_count_pointer>
					strcpy((char*)rfid_user_uid_buffer[rfid_user_count_pointer],(char*)rfid_uid_ch0);
    1100:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <rfid_user_count_pointer+0x1>
    1104:	9c 01       	movw	r18, r24
    1106:	22 0f       	add	r18, r18
    1108:	33 1f       	adc	r19, r19
    110a:	22 0f       	add	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	82 0f       	add	r24, r18
    1110:	93 1f       	adc	r25, r19
    1112:	60 e4       	ldi	r22, 0x40	; 64
    1114:	77 e0       	ldi	r23, 0x07	; 7
    1116:	8a 51       	subi	r24, 0x1A	; 26
    1118:	9b 4f       	sbci	r25, 0xFB	; 251
    111a:	0e 94 47 11 	call	0x228e	; 0x228e <strcpy>
    111e:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__data_end>
					
					//사용자 인식이 정상적으로 되면 1회에 한해서 증가시킴.
					if(user_count<MAX_USER_COUNT)user_count++; //단, 주차장 최대 수용 수 보다는 작아야 함.
    1122:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <__data_end+0x1>
    1126:	8a 32       	cpi	r24, 0x2A	; 42
    1128:	91 05       	cpc	r25, r1
    112a:	2c f4       	brge	.+10     	; 0x1136 <__stack+0x37>
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	90 93 cf 04 	sts	0x04CF, r25	; 0x8004cf <__data_end+0x1>
    1132:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <__data_end>
    1136:	8a e2       	ldi	r24, 0x2A	; 42
							
					char MAX_USER_COUNT_STR[4];
					char USER_COUNT_STR[4];
					strcpy(MAX_USER_COUNT_STR,IntToString((int)MAX_USER_COUNT));
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	51 d7       	rcall	.+3746   	; 0x1fde <IntToString>
    113c:	bc 01       	movw	r22, r24
    113e:	ce 01       	movw	r24, r28
    1140:	49 96       	adiw	r24, 0x19	; 25
    1142:	0e 94 47 11 	call	0x228e	; 0x228e <strcpy>
    1146:	20 91 ce 04 	lds	r18, 0x04CE	; 0x8004ce <__data_end>
					strcpy(USER_COUNT_STR,IntToString((int)MAX_USER_COUNT-user_count));
    114a:	30 91 cf 04 	lds	r19, 0x04CF	; 0x8004cf <__data_end+0x1>
    114e:	8a e2       	ldi	r24, 0x2A	; 42
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	82 1b       	sub	r24, r18
    1154:	93 0b       	sbc	r25, r19
    1156:	43 d7       	rcall	.+3718   	; 0x1fde <IntToString>
    1158:	bc 01       	movw	r22, r24
    115a:	ce 01       	movw	r24, r28
    115c:	45 96       	adiw	r24, 0x15	; 21
    115e:	0e 94 47 11 	call	0x228e	; 0x228e <strcpy>
    1162:	8e e0       	ldi	r24, 0x0E	; 14
					
					char empty_space_str[20]="Empty Space=[";
    1164:	ea e1       	ldi	r30, 0x1A	; 26
    1166:	f1 e0       	ldi	r31, 0x01	; 1
    1168:	8e 01       	movw	r16, r28
    116a:	0f 5f       	subi	r16, 0xFF	; 255
    116c:	1f 4f       	sbci	r17, 0xFF	; 255
    116e:	d8 01       	movw	r26, r16
    1170:	01 90       	ld	r0, Z+
    1172:	0d 92       	st	X+, r0
    1174:	8a 95       	dec	r24
    1176:	e1 f7       	brne	.-8      	; 0x1170 <__stack+0x71>
    1178:	fe 01       	movw	r30, r28
    117a:	3f 96       	adiw	r30, 0x0f	; 15
    117c:	86 e0       	ldi	r24, 0x06	; 6
    117e:	df 01       	movw	r26, r30
    1180:	1d 92       	st	X+, r1
    1182:	8a 95       	dec	r24
    1184:	e9 f7       	brne	.-6      	; 0x1180 <__stack+0x81>
    1186:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,USER_COUNT_STR);
    1188:	6b 5e       	subi	r22, 0xEB	; 235
    118a:	7f 4f       	sbci	r23, 0xFF	; 255
    118c:	c8 01       	movw	r24, r16
    118e:	0e 94 33 11 	call	0x2266	; 0x2266 <strcat>
    1192:	f8 01       	movw	r30, r16
					strcat((char*)empty_space_str,"/");
    1194:	01 90       	ld	r0, Z+
    1196:	00 20       	and	r0, r0
    1198:	e9 f7       	brne	.-6      	; 0x1194 <__stack+0x95>
    119a:	31 97       	sbiw	r30, 0x01	; 1
    119c:	8f e2       	ldi	r24, 0x2F	; 47
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	91 83       	std	Z+1, r25	; 0x01
    11a2:	80 83       	st	Z, r24
    11a4:	be 01       	movw	r22, r28
					strcat((char*)empty_space_str,MAX_USER_COUNT_STR);
    11a6:	67 5e       	subi	r22, 0xE7	; 231
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	c8 01       	movw	r24, r16
    11ac:	0e 94 33 11 	call	0x2266	; 0x2266 <strcat>
    11b0:	f8 01       	movw	r30, r16
					strcat((char*)empty_space_str,"]");
    11b2:	01 90       	ld	r0, Z+
    11b4:	00 20       	and	r0, r0
    11b6:	e9 f7       	brne	.-6      	; 0x11b2 <__stack+0xb3>
    11b8:	31 97       	sbiw	r30, 0x01	; 1
    11ba:	8d e5       	ldi	r24, 0x5D	; 93
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	91 83       	std	Z+1, r25	; 0x01
    11c0:	80 83       	st	Z, r24
    11c2:	67 e0       	ldi	r22, 0x07	; 7
					//start_timer(); //ticktim을 0으로 클리어시킴.
					
					//서보모터 입구 오픈 코드 작성
					
					//set_gate_state(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN);
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	55 de       	rcall	.-854    	; 0xe76 <set_servo>
    11cc:	85 e0       	ldi	r24, 0x05	; 5
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	f1 de       	rcall	.-542    	; 0xfb4 <start_timer>
    11d2:	4d de       	rcall	.-870    	; 0xe6e <logojector_ON>
					logojector_ON();
    11d4:	82 e0       	ldi	r24, 0x02	; 2
					start_timer(TICK_LOGOJECTOR);
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	ed de       	rcall	.-550    	; 0xfb4 <start_timer>
    11da:	2f d3       	rcall	.+1630   	; 0x183a <i2c_lcd_clear>
					
					//LCD ON
					i2c_lcd_clear();
    11dc:	47 ef       	ldi	r20, 0xF7	; 247
    11de:	52 e0       	ldi	r21, 0x02	; 2
					i2c_lcd_string(0,0,"Welcome,");
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	1b d3       	rcall	.+1590   	; 0x181c <i2c_lcd_string>
    11e6:	44 e2       	ldi	r20, 0x24	; 36
    11e8:	56 e0       	ldi	r21, 0x06	; 6
					i2c_lcd_string(1,0,(char*)esp8266_received_data);
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	16 d3       	rcall	.+1580   	; 0x181c <i2c_lcd_string>
    11f0:	a8 01       	movw	r20, r16
					i2c_lcd_string(2,0,(char*)empty_space_str);
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	82 e0       	ldi	r24, 0x02	; 2
    11f6:	12 d3       	rcall	.+1572   	; 0x181c <i2c_lcd_string>
    11f8:	82 e0       	ldi	r24, 0x02	; 2
					setSoundClip(BUZZ_SUCCESS);
    11fa:	b4 de       	rcall	.-664    	; 0xf64 <setSoundClip>
    11fc:	34 c0       	rjmp	.+104    	; 0x1266 <__stack+0x167>
    11fe:	67 e0       	ldi	r22, 0x07	; 7
				}
				else {//한 번 초과로 인식시켰을 때 지나는 구문
					
					//서보모터 입구 오픈 코드 작성
					
					set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN); //2 == 딱 중간, 7 == 180도
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	37 de       	rcall	.-914    	; 0xe76 <set_servo>
					start_timer(TICK_ENTRANCE_GATE); //ticktim을 0으로 클리어시킴.
    1208:	85 e0       	ldi	r24, 0x05	; 5
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	d3 de       	rcall	.-602    	; 0xfb4 <start_timer>
					
					start_timer(TICK_LOGOJECTOR);
    120e:	82 e0       	ldi	r24, 0x02	; 2
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	d0 de       	rcall	.-608    	; 0xfb4 <start_timer>
					logojector_ON();
    1214:	2c de       	rcall	.-936    	; 0xe6e <logojector_ON>
    1216:	11 d3       	rcall	.+1570   	; 0x183a <i2c_lcd_clear>
					//LCD ON
					i2c_lcd_clear();  
    1218:	47 ef       	ldi	r20, 0xF7	; 247
					i2c_lcd_string(0,0,"Welcome,");
    121a:	52 e0       	ldi	r21, 0x02	; 2
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	fd d2       	rcall	.+1530   	; 0x181c <i2c_lcd_string>
					i2c_lcd_string(1,2,(char*)esp8266_received_data);
    1222:	44 e2       	ldi	r20, 0x24	; 36
    1224:	56 e0       	ldi	r21, 0x06	; 6
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	81 e0       	ldi	r24, 0x01	; 1
					i2c_lcd_string(2,0,"Already Recognized");
    122a:	f8 d2       	rcall	.+1520   	; 0x181c <i2c_lcd_string>
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	53 e0       	ldi	r21, 0x03	; 3
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	82 e0       	ldi	r24, 0x02	; 2
					
					setSoundClip(BUZZ_SUCCESS);
    1234:	f3 d2       	rcall	.+1510   	; 0x181c <i2c_lcd_string>
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	95 de       	rcall	.-726    	; 0xf64 <setSoundClip>
    123a:	15 c0       	rjmp	.+42     	; 0x1266 <__stack+0x167>
				}
			}//if(esp8266_received_data[0]=='O') end
			else if(esp8266_received_data[0]!='O') 
			{
				start_timer(TICK_LCD);
    123c:	83 e0       	ldi	r24, 0x03	; 3
    123e:	90 e0       	ldi	r25, 0x00	; 0
				setSoundClip(BUZZ_NOT_REGISTERED);
    1240:	b9 de       	rcall	.-654    	; 0xfb4 <start_timer>
    1242:	83 e0       	ldi	r24, 0x03	; 3
				
				i2c_lcd_clear();
    1244:	8f de       	rcall	.-738    	; 0xf64 <setSoundClip>
				i2c_lcd_string(0,0,"Sorry,");
    1246:	f9 d2       	rcall	.+1522   	; 0x183a <i2c_lcd_clear>
    1248:	43 e1       	ldi	r20, 0x13	; 19
    124a:	53 e0       	ldi	r21, 0x03	; 3
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	80 e0       	ldi	r24, 0x00	; 0
				i2c_lcd_string(1,2,"This card is");
    1250:	e5 d2       	rcall	.+1482   	; 0x181c <i2c_lcd_string>
    1252:	4a e1       	ldi	r20, 0x1A	; 26
    1254:	53 e0       	ldi	r21, 0x03	; 3
    1256:	62 e0       	ldi	r22, 0x02	; 2
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	e0 d2       	rcall	.+1472   	; 0x181c <i2c_lcd_string>
				i2c_lcd_string(2,2,"not registered.");
    125c:	47 e2       	ldi	r20, 0x27	; 39
    125e:	53 e0       	ldi	r21, 0x03	; 3
    1260:	62 e0       	ldi	r22, 0x02	; 2
    1262:	82 e0       	ldi	r24, 0x02	; 2
    1264:	db d2       	rcall	.+1462   	; 0x181c <i2c_lcd_string>
			}
			//_delay_ms(20);
			//dummy test code (서버로부터 결과 값 수신 결과 확인)
			
			#if DUMMY_TEST_SERIAL
				uart0_tx_char('\n');
    1266:	8a e0       	ldi	r24, 0x0A	; 10
    1268:	92 d6       	rcall	.+3364   	; 0x1f8e <uart0_tx_char>
				uart0_tx_string("From server : ");
    126a:	87 e3       	ldi	r24, 0x37	; 55
    126c:	93 e0       	ldi	r25, 0x03	; 3
    126e:	93 d6       	rcall	.+3366   	; 0x1f96 <uart0_tx_string>
    1270:	84 e2       	ldi	r24, 0x24	; 36
				uart0_tx_string((char*)esp8266_received_data);
    1272:	96 e0       	ldi	r25, 0x06	; 6
    1274:	90 d6       	rcall	.+3360   	; 0x1f96 <uart0_tx_string>
    1276:	8a e0       	ldi	r24, 0x0A	; 10
				uart0_tx_char('\n');
    1278:	8a d6       	rcall	.+3348   	; 0x1f8e <uart0_tx_char>
    127a:	0f 2e       	mov	r0, r31
    127c:	f7 ee       	ldi	r31, 0xE7	; 231
    127e:	cf 2e       	mov	r12, r31
    1280:	f4 e0       	ldi	r31, 0x04	; 4
    1282:	df 2e       	mov	r13, r31
    1284:	f0 2d       	mov	r31, r0
    1286:	0f 2e       	mov	r0, r31
    1288:	f9 eb       	ldi	r31, 0xB9	; 185
    128a:	af 2e       	mov	r10, r31
    128c:	f5 e0       	ldi	r31, 0x05	; 5
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
    128e:	bf 2e       	mov	r11, r31
    1290:	f0 2d       	mov	r31, r0
    1292:	8b e5       	ldi	r24, 0x5B	; 91
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    1294:	7c d6       	rcall	.+3320   	; 0x1f8e <uart0_tx_char>
    1296:	f6 01       	movw	r30, r12
    1298:	31 97       	sbiw	r30, 0x01	; 1
    129a:	80 81       	ld	r24, Z
    129c:	cf d6       	rcall	.+3486   	; 0x203c <HexToString>
    129e:	7b d6       	rcall	.+3318   	; 0x1f96 <uart0_tx_string>
    12a0:	76 01       	movw	r14, r12
    12a2:	00 e0       	ldi	r16, 0x00	; 0
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    12a4:	10 e0       	ldi	r17, 0x00	; 0
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    12a6:	80 e2       	ldi	r24, 0x20	; 32
    12a8:	72 d6       	rcall	.+3300   	; 0x1f8e <uart0_tx_char>
    12aa:	0f 5f       	subi	r16, 0xFF	; 255
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    12ac:	1f 4f       	sbci	r17, 0xFF	; 255
    12ae:	f7 01       	movw	r30, r14
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    12b0:	81 91       	ld	r24, Z+
    12b2:	7f 01       	movw	r14, r30
    12b4:	c3 d6       	rcall	.+3462   	; 0x203c <HexToString>
    12b6:	6f d6       	rcall	.+3294   	; 0x1f96 <uart0_tx_string>
    12b8:	03 30       	cpi	r16, 0x03	; 3
    12ba:	11 05       	cpc	r17, r1
    12bc:	a1 f7       	brne	.-24     	; 0x12a6 <__stack+0x1a7>
						if(j!=3)uart0_tx_char(' ');
    12be:	8d e5       	ldi	r24, 0x5D	; 93
    12c0:	66 d6       	rcall	.+3276   	; 0x1f8e <uart0_tx_char>
    12c2:	8a e0       	ldi	r24, 0x0A	; 10
						//_delay_ms(10);
					}
				
				
					uart0_tx_char(']');
    12c4:	64 d6       	rcall	.+3272   	; 0x1f8e <uart0_tx_char>
    12c6:	f5 e0       	ldi	r31, 0x05	; 5
    12c8:	cf 0e       	add	r12, r31
					uart0_tx_char('\n');
    12ca:	d1 1c       	adc	r13, r1
    12cc:	ac 14       	cp	r10, r12
    12ce:	bd 04       	cpc	r11, r13
    12d0:	01 f7       	brne	.-64     	; 0x1292 <__stack+0x193>
    12d2:	5d c0       	rjmp	.+186    	; 0x138e <__stack+0x28f>
    12d4:	81 30       	cpi	r24, 0x01	; 1
				uart0_tx_string("From server : ");
				uart0_tx_string((char*)esp8266_received_data);
				uart0_tx_char('\n');
			
				//dummy test code (이용객 저장 버퍼 상태 표시)
				for(int i=0;i<MAX_USER_COUNT;i++){
    12d6:	09 f0       	breq	.+2      	; 0x12da <__stack+0x1db>
    12d8:	5a c0       	rjmp	.+180    	; 0x138e <__stack+0x28f>
    12da:	06 ee       	ldi	r16, 0xE6	; 230
    12dc:	14 e0       	ldi	r17, 0x04	; 4
			
			//LCD 뷰어 및 5초 카운트 후 다시 리셋
			
		}//if(toggle==ENTRANCE_GATE) end
		
		else if((*tggl)==EXIT_GATE)
    12de:	0f 2e       	mov	r0, r31
    12e0:	f8 eb       	ldi	r31, 0xB8	; 184
    12e2:	ef 2e       	mov	r14, r31
    12e4:	f5 e0       	ldi	r31, 0x05	; 5
    12e6:	ff 2e       	mov	r15, r31
    12e8:	f0 2d       	mov	r31, r0
    12ea:	62 e5       	ldi	r22, 0x52	; 82
    12ec:	77 e0       	ldi	r23, 0x07	; 7
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
			{
				if(strcmp((char*)rfid_user_uid_buffer[i],(char*)rfid_uid_ch1)==0){//출구에서 찍은 카드가 이용객 버퍼에 존재한다면
    12ee:	c8 01       	movw	r24, r16
    12f0:	c5 d7       	rcall	.+3978   	; 0x227c <strcmp>
    12f2:	89 2b       	or	r24, r25
    12f4:	d9 f4       	brne	.+54     	; 0x132c <__stack+0x22d>
    12f6:	85 e0       	ldi	r24, 0x05	; 5
    12f8:	e2 e4       	ldi	r30, 0x42	; 66
    12fa:	f1 e0       	ldi	r31, 0x01	; 1
					strcpy((char*)rfid_user_uid_buffer[i],"0000");
    12fc:	d8 01       	movw	r26, r16
    12fe:	01 90       	ld	r0, Z+
    1300:	0d 92       	st	X+, r0
    1302:	8a 95       	dec	r24
    1304:	e1 f7       	brne	.-8      	; 0x12fe <__stack+0x1ff>
    1306:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <__data_end>
					//절대 버퍼에는 중복되는 값이 들어가지 않도록 코드가 작성되어 있기 때문에 여기다가 명령구문을 넣어도 될듯
					user_count--; //이용자 카운트를 감소시킴.
    130a:	90 91 cf 04 	lds	r25, 0x04CF	; 0x8004cf <__data_end+0x1>
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	90 93 cf 04 	sts	0x04CF, r25	; 0x8004cf <__data_end+0x1>
    1314:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <__data_end>
					
					//출구 서보모터 동작 코드
					set_servo(SERVO_EXIT_GATE,SERVO_GATE_OPEN); //3 == 딱 중간, 7 == 180도
    1318:	67 e0       	ldi	r22, 0x07	; 7
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	aa dd       	rcall	.-1196   	; 0xe76 <set_servo>
					start_timer(TICK_EXIT_GATE); //틱 활성화 및 카운트 시작
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	90 e0       	ldi	r25, 0x00	; 0
					
					//수정요청(멜로디)
					setSoundClip(BUZZ_SUCCESS);
    1326:	46 de       	rcall	.-884    	; 0xfb4 <start_timer>
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	1c de       	rcall	.-968    	; 0xf64 <setSoundClip>
    132c:	0b 5f       	subi	r16, 0xFB	; 251
		{
			//esp8266에 uid와 출구게이트 정보 전송 함수
			//구현안하기로 함
			// 구현해둬야 함. ==> 사람들 나가는 것 정도는 확인할 필요가 있음.
			
			for(int i=0; i<MAX_USER_COUNT;i++)
    132e:	1f 4f       	sbci	r17, 0xFF	; 255
    1330:	0e 15       	cp	r16, r14
    1332:	1f 05       	cpc	r17, r15
    1334:	d1 f6       	brne	.-76     	; 0x12ea <__stack+0x1eb>
    1336:	0f 2e       	mov	r0, r31
    1338:	f7 ee       	ldi	r31, 0xE7	; 231
    133a:	cf 2e       	mov	r12, r31
    133c:	f4 e0       	ldi	r31, 0x04	; 4
    133e:	df 2e       	mov	r13, r31
    1340:	f0 2d       	mov	r31, r0
    1342:	0f 2e       	mov	r0, r31
    1344:	f9 eb       	ldi	r31, 0xB9	; 185
    1346:	af 2e       	mov	r10, r31
    1348:	f5 e0       	ldi	r31, 0x05	; 5
    134a:	bf 2e       	mov	r11, r31
			} 
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
    134c:	f0 2d       	mov	r31, r0
    134e:	8b e5       	ldi	r24, 0x5B	; 91
    1350:	1e d6       	rcall	.+3132   	; 0x1f8e <uart0_tx_char>
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    1352:	f6 01       	movw	r30, r12
    1354:	31 97       	sbiw	r30, 0x01	; 1
    1356:	80 81       	ld	r24, Z
    1358:	71 d6       	rcall	.+3298   	; 0x203c <HexToString>
    135a:	1d d6       	rcall	.+3130   	; 0x1f96 <uart0_tx_string>
    135c:	76 01       	movw	r14, r12
    135e:	00 e0       	ldi	r16, 0x00	; 0
    1360:	10 e0       	ldi	r17, 0x00	; 0
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	14 d6       	rcall	.+3112   	; 0x1f8e <uart0_tx_char>
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
						if(j!=3)uart0_tx_char(' ');
    1366:	0f 5f       	subi	r16, 0xFF	; 255
    1368:	1f 4f       	sbci	r17, 0xFF	; 255
    136a:	d7 01       	movw	r26, r14
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
				
					uart0_tx_char('[');
					//uart0_tx_string((char*)rfid_user_uid_buffer[i]);
					for(int j=0;j<4;j++){
    136c:	8d 91       	ld	r24, X+
    136e:	7d 01       	movw	r14, r26
						uart0_tx_string(HexToString(rfid_user_uid_buffer[i][j]));
    1370:	65 d6       	rcall	.+3274   	; 0x203c <HexToString>
    1372:	11 d6       	rcall	.+3106   	; 0x1f96 <uart0_tx_string>
    1374:	03 30       	cpi	r16, 0x03	; 3
    1376:	11 05       	cpc	r17, r1
    1378:	a1 f7       	brne	.-24     	; 0x1362 <__stack+0x263>
    137a:	8d e5       	ldi	r24, 0x5D	; 93
    137c:	08 d6       	rcall	.+3088   	; 0x1f8e <uart0_tx_char>
						if(j!=3)uart0_tx_char(' ');
    137e:	8a e0       	ldi	r24, 0x0A	; 10
    1380:	06 d6       	rcall	.+3084   	; 0x1f8e <uart0_tx_char>
    1382:	b5 e0       	ldi	r27, 0x05	; 5
					}
					uart0_tx_char(']');
    1384:	cb 0e       	add	r12, r27
    1386:	d1 1c       	adc	r13, r1
    1388:	ca 14       	cp	r12, r10
					uart0_tx_char('\n');
    138a:	db 04       	cpc	r13, r11
    138c:	01 f7       	brne	.-64     	; 0x134e <__stack+0x24f>
    138e:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <received_state>
    1392:	6c 96       	adiw	r28, 0x1c	; 28
    1394:	0f b6       	in	r0, 0x3f	; 63
				}//그곳 버퍼를 비움
				
			} 
			//dummy test code
			#if DUMMY_TEST_SERIAL
				for(int i=0;i<MAX_USER_COUNT;i++){
    1396:	f8 94       	cli
    1398:	de bf       	out	0x3e, r29	; 62
    139a:	0f be       	out	0x3f, r0	; 63
		//i2c_lcd_string(1,2,esp8266_received_data);
		i2c_lcd_string(2,0,"Plz, Re-tagging. ");
		
	}
	
	received_state=RECEIVE_NONE;
    139c:	cd bf       	out	0x3d, r28	; 61
    139e:	df 91       	pop	r29
}
    13a0:	cf 91       	pop	r28
    13a2:	1f 91       	pop	r17
    13a4:	0f 91       	pop	r16
    13a6:	ff 90       	pop	r15
    13a8:	ef 90       	pop	r14
    13aa:	df 90       	pop	r13
    13ac:	cf 90       	pop	r12
    13ae:	bf 90       	pop	r11
    13b0:	af 90       	pop	r10
    13b2:	08 95       	ret

000013b4 <systems_init>:
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	64 97       	sbiw	r28, 0x14	; 20
		//else if(received_state==RECEIVE_FAIL); 
		
    }
}

void systems_init(void){
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
	sei();
    13cc:	78 94       	sei
	//DDRA|=0x03; //test Port
	//0~3번비트	: 스테핑모터 제어
	//DDRA=0x0f;
	//PA0, PA3 : 각각 서보모터 제어핀
	DDRA = (1<<DDRA0)|(1<<DDRA3);
    13ce:	89 e0       	ldi	r24, 0x09	; 9
    13d0:	8a bb       	out	0x1a, r24	; 26
	//4번비트	: 릴레이스위치
	DDRC |= (1<<DDRC4);
    13d2:	a4 9a       	sbi	0x14, 4	; 20
	cli(); //전역 인터럽트 해제
    13d4:	f8 94       	cli
	
	timer0_init();
    13d6:	82 d5       	rcall	.+2820   	; 0x1edc <timer0_init>
	timer1_init();
    13d8:	8a d5       	rcall	.+2836   	; 0x1eee <timer1_init>
	timer3_init();
    13da:	97 d5       	rcall	.+2862   	; 0x1f0a <timer3_init>
	
	tick_enable(TICK_TIMEOUT);
    13dc:	86 e0       	ldi	r24, 0x06	; 6
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	66 dd       	rcall	.-1332   	; 0xeae <tick_enable>
    13e2:	78 94       	sei
	
	sei(); //전역 인터럽트 허용
    13e4:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <TICK>
	TICK.tick_1ms=0;
    13e8:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <TICK+0x1>
    13ec:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <TICK+0x2>
    13f0:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <TICK+0x3>
	//사용하는 기능들 초기화 작업
	
	logojector_OFF();
    13f4:	3e dd       	rcall	.-1412   	; 0xe72 <logojector_OFF>
	uart_init(0,BAUD_9600); //debug channel
    13f6:	60 e8       	ldi	r22, 0x80	; 128
    13f8:	75 e2       	ldi	r23, 0x25	; 37
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	9a d5       	rcall	.+2868   	; 0x1f34 <uart_init>
	uart_init(1,BAUD_9600);//esp8266() : Rx:PD2, Tx:PD3
    1400:	60 e8       	ldi	r22, 0x80	; 128
    1402:	75 e2       	ldi	r23, 0x25	; 37
    1404:	81 e0       	ldi	r24, 0x01	; 1
	#if MOTOR_DEBUG_WITHOUT_ANOTHER_SENSOR
		mfrc522_init(CH0);
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	95 d5       	rcall	.+2858   	; 0x1f34 <uart_init>
		mfrc522_init(CH1);
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	fa d3       	rcall	.+2036   	; 0x1c02 <mfrc522_init>
    140e:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_init();
    1410:	f8 d3       	rcall	.+2032   	; 0x1c02 <mfrc522_init>
	
	
		i2c_lcd_string(0,0,"====================");
    1412:	79 d1       	rcall	.+754    	; 0x1706 <i2c_lcd_init>
    1414:	46 e4       	ldi	r20, 0x46	; 70
    1416:	53 e0       	ldi	r21, 0x03	; 3
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	80 e0       	ldi	r24, 0x00	; 0
		i2c_lcd_string(1,0,"  SYSTEM BOOTING...");
    141c:	ff d1       	rcall	.+1022   	; 0x181c <i2c_lcd_string>
    141e:	4b e5       	ldi	r20, 0x5B	; 91
    1420:	53 e0       	ldi	r21, 0x03	; 3
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	81 e0       	ldi	r24, 0x01	; 1
		i2c_lcd_string(2,0,"     __________     ");
    1426:	fa d1       	rcall	.+1012   	; 0x181c <i2c_lcd_string>
    1428:	4f e6       	ldi	r20, 0x6F	; 111
    142a:	53 e0       	ldi	r21, 0x03	; 3
    142c:	60 e0       	ldi	r22, 0x00	; 0
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	f5 d1       	rcall	.+1002   	; 0x181c <i2c_lcd_string>
		i2c_lcd_string(3,0,"====================");
    1432:	46 e4       	ldi	r20, 0x46	; 70
    1434:	53 e0       	ldi	r21, 0x03	; 3
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	f0 d1       	rcall	.+992    	; 0x181c <i2c_lcd_string>
		setSoundClip(BUZZ_ON);
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	92 dd       	rcall	.-1244   	; 0xf64 <setSoundClip>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1440:	2f ef       	ldi	r18, 0xFF	; 255
    1442:	81 e1       	ldi	r24, 0x11	; 17
    1444:	9a e7       	ldi	r25, 0x7A	; 122
    1446:	21 50       	subi	r18, 0x01	; 1
    1448:	80 40       	sbci	r24, 0x00	; 0
    144a:	90 40       	sbci	r25, 0x00	; 0
    144c:	e1 f7       	brne	.-8      	; 0x1446 <systems_init+0x92>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <systems_init+0x9c>
		_delay_ms(2500);
	
		//로딩 시작. RFID모듈체크, ESP8266 연결 체크
	
		mfrc522_version_check(CH0);
    1450:	00 00       	nop
    1452:	80 e0       	ldi	r24, 0x00	; 0
		mfrc522_IRQ_enable(CH0);
    1454:	1e d4       	rcall	.+2108   	; 0x1c92 <mfrc522_version_check>
    1456:	80 e0       	ldi	r24, 0x00	; 0
    1458:	72 d4       	rcall	.+2276   	; 0x1d3e <mfrc522_IRQ_enable>
		mfrc522_version_check(CH1);
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	1a d4       	rcall	.+2100   	; 0x1c92 <mfrc522_version_check>
    145e:	81 e0       	ldi	r24, 0x01	; 1
		mfrc522_IRQ_enable(CH1);
    1460:	6e d4       	rcall	.+2268   	; 0x1d3e <mfrc522_IRQ_enable>
    1462:	24 e8       	ldi	r18, 0x84	; 132
    1464:	33 e0       	ldi	r19, 0x03	; 3
		esp8266_init((unsigned char*)SSID,(unsigned char*)PASSWORD,(unsigned char*)IP,(unsigned char*)PORT);
    1466:	49 e8       	ldi	r20, 0x89	; 137
    1468:	53 e0       	ldi	r21, 0x03	; 3
    146a:	67 e9       	ldi	r22, 0x97	; 151
    146c:	73 e0       	ldi	r23, 0x03	; 3
    146e:	80 ea       	ldi	r24, 0xA0	; 160
    1470:	93 e0       	ldi	r25, 0x03	; 3
    1472:	26 dc       	rcall	.-1972   	; 0xcc0 <esp8266_init>
    1474:	0e 94 ce 01 	call	0x39c	; 0x39c <rfid_user_uid_buffer_init>
    1478:	8f e0       	ldi	r24, 0x0F	; 15
		rfid_user_uid_buffer_init();
    147a:	ee e2       	ldi	r30, 0x2E	; 46
    147c:	f1 e0       	ldi	r31, 0x01	; 1
	
		char version_buf[20] = " Firmware Ver ";
    147e:	8e 01       	movw	r16, r28
    1480:	0f 5f       	subi	r16, 0xFF	; 255
    1482:	1f 4f       	sbci	r17, 0xFF	; 255
    1484:	d8 01       	movw	r26, r16
    1486:	01 90       	ld	r0, Z+
    1488:	0d 92       	st	X+, r0
    148a:	8a 95       	dec	r24
    148c:	e1 f7       	brne	.-8      	; 0x1486 <systems_init+0xd2>
    148e:	fe 01       	movw	r30, r28
    1490:	70 96       	adiw	r30, 0x10	; 16
    1492:	85 e0       	ldi	r24, 0x05	; 5
    1494:	df 01       	movw	r26, r30
    1496:	1d 92       	st	X+, r1
    1498:	8a 95       	dec	r24
    149a:	e9 f7       	brne	.-6      	; 0x1496 <systems_init+0xe2>
    149c:	d8 01       	movw	r26, r16
    149e:	0d 90       	ld	r0, X+
		strcat(version_buf,(const char*)FIRMWARE_VERSION);
    14a0:	00 20       	and	r0, r0
    14a2:	e9 f7       	brne	.-6      	; 0x149e <systems_init+0xea>
    14a4:	11 97       	sbiw	r26, 0x01	; 1
    14a6:	86 e0       	ldi	r24, 0x06	; 6
    14a8:	e6 ea       	ldi	r30, 0xA6	; 166
    14aa:	f3 e0       	ldi	r31, 0x03	; 3
    14ac:	01 90       	ld	r0, Z+
    14ae:	0d 92       	st	X+, r0
    14b0:	8a 95       	dec	r24
    14b2:	e1 f7       	brne	.-8      	; 0x14ac <systems_init+0xf8>
		i2c_lcd_string(0,0,"====================");
    14b4:	46 e4       	ldi	r20, 0x46	; 70
    14b6:	53 e0       	ldi	r21, 0x03	; 3
    14b8:	60 e0       	ldi	r22, 0x00	; 0
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	af d1       	rcall	.+862    	; 0x181c <i2c_lcd_string>
		i2c_lcd_string(1,0,"  Parking System    ");
    14be:	4c ea       	ldi	r20, 0xAC	; 172
    14c0:	53 e0       	ldi	r21, 0x03	; 3
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	81 e0       	ldi	r24, 0x01	; 1
    14c6:	aa d1       	rcall	.+852    	; 0x181c <i2c_lcd_string>
		i2c_lcd_string(2,0, version_buf);
    14c8:	a8 01       	movw	r20, r16
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	82 e0       	ldi	r24, 0x02	; 2
    14ce:	a6 d1       	rcall	.+844    	; 0x181c <i2c_lcd_string>
    14d0:	46 e4       	ldi	r20, 0x46	; 70
		i2c_lcd_string(3,0,"====================");
    14d2:	53 e0       	ldi	r21, 0x03	; 3
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	83 e0       	ldi	r24, 0x03	; 3
    14d8:	a1 d1       	rcall	.+834    	; 0x181c <i2c_lcd_string>
    14da:	85 e0       	ldi	r24, 0x05	; 5
    14dc:	43 dd       	rcall	.-1402   	; 0xf64 <setSoundClip>
		setSoundClip(BUZZ_ESP8266_CONNECTED);
    14de:	62 e0       	ldi	r22, 0x02	; 2
    14e0:	70 e0       	ldi	r23, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
		
		//main loop start.
		set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	c7 dc       	rcall	.-1650   	; 0xe76 <set_servo>
    14e8:	62 e0       	ldi	r22, 0x02	; 2
    14ea:	70 e0       	ldi	r23, 0x00	; 0
		set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	c2 dc       	rcall	.-1660   	; 0xe76 <set_servo>
    14f2:	bf ef       	ldi	r27, 0xFF	; 255
    14f4:	27 ea       	ldi	r18, 0xA7	; 167
    14f6:	81 e6       	ldi	r24, 0x61	; 97
    14f8:	b1 50       	subi	r27, 0x01	; 1
    14fa:	20 40       	sbci	r18, 0x00	; 0
    14fc:	80 40       	sbci	r24, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <systems_init+0x144>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <systems_init+0x14e>
    1502:	00 00       	nop
    1504:	10 92 59 06 	sts	0x0659, r1	; 0x800659 <servo_1_duty_ratio+0x1>
    1508:	10 92 58 06 	sts	0x0658, r1	; 0x800658 <servo_1_duty_ratio>
	}
}

void servo_release(int ch) {
	
	 	if(ch==SERVO_ENTRANCE_GATE) {servo_1_duty_ratio=0; }//PORTA&=~(1<<PORTA0);
    150c:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <servo_2_duty_ratio+0x1>
    1510:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <servo_2_duty_ratio>
	 	else if(ch==SERVO_EXIT_GATE){servo_2_duty_ratio=0;} //PORTA&=~(1<<PORTA3);
    1514:	92 d1       	rcall	.+804    	; 0x183a <i2c_lcd_clear>
    1516:	92 d0       	rcall	.+292    	; 0x163c <i2c_lcd_noBacklight>
    1518:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <timeout_tick_enable_flag+0x1>
		set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
		set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
		_delay_ms(2000);
		servo_release(SERVO_CH_0);
		servo_release(SERVO_CH_1);
		i2c_lcd_clear();
    151c:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <timeout_tick_enable_flag>
		i2c_lcd_noBacklight();
    1520:	64 96       	adiw	r28, 0x14	; 20
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
		 case TICK_TIMEOUT: timeout_tick_enable_flag=0; break;	  
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
		i2c_lcd_clear();
		i2c_lcd_noBacklight();
	#endif
	tick_disable(TICK_TIMEOUT);
	
}
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	08 95       	ret

00001536 <main>:
    1536:	3e df       	rcall	.-388    	; 0x13b4 <systems_init>
    1538:	62 e0       	ldi	r22, 0x02	; 2
    153a:	70 e0       	ldi	r23, 0x00	; 0
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0

	
	
	
	
	set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
    1540:	9a dc       	rcall	.-1740   	; 0xe76 <set_servo>
	set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	95 dc       	rcall	.-1750   	; 0xe76 <set_servo>
// 	_delay_ms(10000);
// 	set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_OPEN);
// 	set_servo(SERVO_EXIT_GATE,SERVO_GATE_OPEN);
// 	
	//dummy
	DDRA|=0x80;
    154c:	d7 9a       	sbi	0x1a, 7	; 26
		RC522_data_state_check_and_actuate(&toggle);
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
		{
				if(TICK.logojector_tick_1ms>(int)SET_LOGOJECTOR_TIMER_SIZE) //SET_LOGOJECTOR_TIMER_SIZE
    154e:	cc e6       	ldi	r28, 0x6C	; 108
		//setSoundClip(BUZZ_ON);
		
		//to use 2 RFID channels
		static char toggle=0; 
		//every 100ms, return RFID Reader state
		RC522_data_request_per_100ms(&toggle);
    1550:	d7 e0       	ldi	r29, 0x07	; 7
    1552:	86 ed       	ldi	r24, 0xD6	; 214
    1554:	94 e0       	ldi	r25, 0x04	; 4
		RC522_data_state_check_and_actuate(&toggle);
    1556:	a0 d8       	rcall	.-3776   	; 0x698 <RC522_data_request_per_100ms>
    1558:	86 ed       	ldi	r24, 0xD6	; 214
    155a:	94 e0       	ldi	r25, 0x04	; 4
    155c:	46 dd       	rcall	.-1396   	; 0xfea <RC522_data_state_check_and_actuate>
		
		//입장 시, 확인이 성공된 유저의 경우
		if(logojector_tick_enable_flag)
    155e:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <logojector_tick_enable_flag>
    1562:	90 91 23 06 	lds	r25, 0x0623	; 0x800623 <logojector_tick_enable_flag+0x1>
    1566:	89 2b       	or	r24, r25
    1568:	91 f0       	breq	.+36     	; 0x158e <main+0x58>
		{
				if(TICK.logojector_tick_1ms>(int)SET_LOGOJECTOR_TIMER_SIZE) //SET_LOGOJECTOR_TIMER_SIZE
    156a:	88 85       	ldd	r24, Y+8	; 0x08
    156c:	99 85       	ldd	r25, Y+9	; 0x09
    156e:	aa 85       	ldd	r26, Y+10	; 0x0a
    1570:	bb 85       	ldd	r27, Y+11	; 0x0b
    1572:	81 33       	cpi	r24, 0x31	; 49
    1574:	95 47       	sbci	r25, 0x75	; 117
    1576:	a1 05       	cpc	r26, r1
    1578:	b1 05       	cpc	r27, r1
				{
					//로고젝터 오프
					logojector_OFF();
    157a:	48 f0       	brcs	.+18     	; 0x158e <main+0x58>
    157c:	7a dc       	rcall	.-1804   	; 0xe72 <logojector_OFF>
 }
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
    157e:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <logojector_tick_enable_flag+0x1>
    1582:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <logojector_tick_enable_flag>
				{
					//로고젝터 오프
					logojector_OFF();
					
					tick_disable(TICK_LOGOJECTOR);
					logojector_tick_enable_flag=STOP_TIMER;
    1586:	10 92 23 06 	sts	0x0623, r1	; 0x800623 <logojector_tick_enable_flag+0x1>
    158a:	10 92 22 06 	sts	0x0622, r1	; 0x800622 <logojector_tick_enable_flag>
				}
		}
		//명령이 동시에 발생할 때, 백라이트 끄는 함수가 호출되지 않는 상황이 생겼다. 이에 대한 처리코드
		//그냥 구문을 아예 따로 lcd관련해서 timer를 분리하였다.
		if(lcd_tick_enable_flag)
    158e:	80 91 88 07 	lds	r24, 0x0788	; 0x800788 <lcd_tick_enable_flag>
    1592:	90 91 89 07 	lds	r25, 0x0789	; 0x800789 <lcd_tick_enable_flag+0x1>
    1596:	89 2b       	or	r24, r25
    1598:	91 f0       	breq	.+36     	; 0x15be <main+0x88>
		{
			if(TICK.lcd_tick_1ms==12000)
    159a:	8c 85       	ldd	r24, Y+12	; 0x0c
    159c:	9d 85       	ldd	r25, Y+13	; 0x0d
    159e:	ae 85       	ldd	r26, Y+14	; 0x0e
    15a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    15a2:	80 3e       	cpi	r24, 0xE0	; 224
    15a4:	9e 42       	sbci	r25, 0x2E	; 46
    15a6:	a1 05       	cpc	r26, r1
    15a8:	b1 05       	cpc	r27, r1
			{
				i2c_lcd_noBacklight();
    15aa:	49 f4       	brne	.+18     	; 0x15be <main+0x88>
    15ac:	47 d0       	rcall	.+142    	; 0x163c <i2c_lcd_noBacklight>
 
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
    15ae:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <lcd_tick_enable_flag+0x1>
    15b2:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <lcd_tick_enable_flag>
		{
			if(TICK.lcd_tick_1ms==12000)
			{
				i2c_lcd_noBacklight();
				tick_disable(TICK_LCD);
				lcd_tick_enable_flag=STOP_TIMER;
    15b6:	10 92 89 07 	sts	0x0789, r1	; 0x800789 <lcd_tick_enable_flag+0x1>
    15ba:	10 92 88 07 	sts	0x0788, r1	; 0x800788 <lcd_tick_enable_flag>
			}
		}

		//입구에서 등록된 유저가 카드를 찍었을 때 해당 구문을 돈다.
		if(entrance_gate_tick_enable_flag)
    15be:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <entrance_gate_tick_enable_flag>
    15c2:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <entrance_gate_tick_enable_flag+0x1>
    15c6:	89 2b       	or	r24, r25
    15c8:	c1 f0       	breq	.+48     	; 0x15fa <main+0xc4>
			
			//가끔 여기 문을 안들어감 뭐가 문젠지는 확인이 안됨. 
			//if(TICK.entrance_gate_tick_1ms==1000) servo_release(SERVO_ENTRANCE_GATE);
			
			//else 
			if(TICK.entrance_gate_tick_1ms==10000)//10초
    15ca:	8c 89       	ldd	r24, Y+20	; 0x14
    15cc:	9d 89       	ldd	r25, Y+21	; 0x15
    15ce:	ae 89       	ldd	r26, Y+22	; 0x16
    15d0:	bf 89       	ldd	r27, Y+23	; 0x17
    15d2:	80 31       	cpi	r24, 0x10	; 16
    15d4:	97 42       	sbci	r25, 0x27	; 39
    15d6:	a1 05       	cpc	r26, r1
    15d8:	b1 05       	cpc	r27, r1
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    15da:	79 f4       	brne	.+30     	; 0x15fa <main+0xc4>
    15dc:	85 e0       	ldi	r24, 0x05	; 5
    15de:	c2 dc       	rcall	.-1660   	; 0xf64 <setSoundClip>
				//입구 서보모터 닫는 명령
				set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	70 e0       	ldi	r23, 0x00	; 0
    15e4:	80 e0       	ldi	r24, 0x00	; 0
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	46 dc       	rcall	.-1908   	; 0xe76 <set_servo>
    15ea:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <entrance_gate_tick_enable_flag+0x1>
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
		 case TICK_ENTRANCE_GATE: entrance_gate_tick_enable_flag=0; break;
    15ee:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <entrance_gate_tick_enable_flag>
    15f2:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <entrance_gate_tick_enable_flag+0x1>
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//입구 서보모터 닫는 명령
				set_servo(SERVO_ENTRANCE_GATE,SERVO_GATE_CLOSE);
				tick_disable(TICK_ENTRANCE_GATE);
				entrance_gate_tick_enable_flag=STOP_TIMER;
    15f6:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <entrance_gate_tick_enable_flag>
    15fa:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <exit_gate_tick_enable_flag>
			}
			//set_servo명령을 넣어봄으로써 변수값이 정상적으로 변하는지 체크해보기. 집에가서
			
			
		}
		if (exit_gate_tick_enable_flag)
    15fe:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <exit_gate_tick_enable_flag+0x1>
    1602:	89 2b       	or	r24, r25
    1604:	09 f4       	brne	.+2      	; 0x1608 <main+0xd2>
    1606:	a5 cf       	rjmp	.-182    	; 0x1552 <main+0x1c>
    1608:	88 89       	ldd	r24, Y+16	; 0x10
		{

			//if(TICK.exit_gate_tick_1ms==1000) servo_release(SERVO_EXIT_GATE);
			//else 
			if(TICK.exit_gate_tick_1ms==10000)//5초
    160a:	99 89       	ldd	r25, Y+17	; 0x11
    160c:	aa 89       	ldd	r26, Y+18	; 0x12
    160e:	bb 89       	ldd	r27, Y+19	; 0x13
    1610:	80 31       	cpi	r24, 0x10	; 16
    1612:	97 42       	sbci	r25, 0x27	; 39
    1614:	a1 05       	cpc	r26, r1
    1616:	b1 05       	cpc	r27, r1
    1618:	09 f0       	breq	.+2      	; 0x161c <main+0xe6>
			{
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
    161a:	9b cf       	rjmp	.-202    	; 0x1552 <main+0x1c>
    161c:	85 e0       	ldi	r24, 0x05	; 5
    161e:	a2 dc       	rcall	.-1724   	; 0xf64 <setSoundClip>
				//출구 서보모터 닫는 명령
				set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	26 dc       	rcall	.-1972   	; 0xe76 <set_servo>
    162a:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <exit_gate_tick_enable_flag+0x1>
 void tick_disable(int tick_name){
	 switch(tick_name){
		 case TICK_BUZZ: buzz_tick_enable_flag=0; break;
		 case TICK_LOGOJECTOR:logojector_tick_enable_flag=0; break;
		 case TICK_LCD: lcd_tick_enable_flag=0; break;
		 case TICK_EXIT_GATE: exit_gate_tick_enable_flag=0; break;
    162e:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <exit_gate_tick_enable_flag>
    1632:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <exit_gate_tick_enable_flag+0x1>
				//수정희망(멜로디 변경)
				setSoundClip(BUZZ_ESP8266_CONNECTED);
				//출구 서보모터 닫는 명령
				set_servo(SERVO_EXIT_GATE,SERVO_GATE_CLOSE);
				tick_disable(TICK_EXIT_GATE);
				exit_gate_tick_enable_flag=STOP_TIMER;
    1636:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <exit_gate_tick_enable_flag>
    163a:	8b cf       	rjmp	.-234    	; 0x1552 <main+0x1c>

0000163c <i2c_lcd_noBacklight>:
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	00 d0       	rcall	.+0      	; 0x1642 <i2c_lcd_noBacklight+0x6>
    1642:	00 d0       	rcall	.+0      	; 0x1644 <i2c_lcd_noBacklight+0x8>
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	89 83       	std	Y+1, r24	; 0x01
    164c:	1a 82       	std	Y+2, r1	; 0x02
    164e:	84 e1       	ldi	r24, 0x14	; 20
    1650:	8b 83       	std	Y+3, r24	; 0x03
    1652:	80 e1       	ldi	r24, 0x10	; 16
    1654:	8c 83       	std	Y+4, r24	; 0x04
    1656:	44 e0       	ldi	r20, 0x04	; 4
    1658:	50 e0       	ldi	r21, 0x00	; 0
    165a:	be 01       	movw	r22, r28
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1664:	4a d1       	rcall	.+660    	; 0x18fa <i2c_transmit>
    1666:	81 11       	cpse	r24, r1
    1668:	f6 cf       	rjmp	.-20     	; 0x1656 <i2c_lcd_noBacklight+0x1a>
    166a:	8f e3       	ldi	r24, 0x3F	; 63
    166c:	9c e9       	ldi	r25, 0x9C	; 156
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	f1 f7       	brne	.-4      	; 0x166e <i2c_lcd_noBacklight+0x32>
    1672:	00 c0       	rjmp	.+0      	; 0x1674 <i2c_lcd_noBacklight+0x38>
    1674:	00 00       	nop
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <i2c_lcd_command_8>:
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	00 d0       	rcall	.+0      	; 0x168a <i2c_lcd_command_8+0x6>
    168a:	cd b7       	in	r28, 0x3d	; 61
    168c:	de b7       	in	r29, 0x3e	; 62
    168e:	80 7f       	andi	r24, 0xF0	; 240
    1690:	98 2f       	mov	r25, r24
    1692:	9c 60       	ori	r25, 0x0C	; 12
    1694:	99 83       	std	Y+1, r25	; 0x01
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	8a 83       	std	Y+2, r24	; 0x02
    169a:	42 e0       	ldi	r20, 0x02	; 2
    169c:	50 e0       	ldi	r21, 0x00	; 0
    169e:	be 01       	movw	r22, r28
    16a0:	6f 5f       	subi	r22, 0xFF	; 255
    16a2:	7f 4f       	sbci	r23, 0xFF	; 255
    16a4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    16a8:	28 d1       	rcall	.+592    	; 0x18fa <i2c_transmit>
    16aa:	81 11       	cpse	r24, r1
    16ac:	f6 cf       	rjmp	.-20     	; 0x169a <i2c_lcd_command_8+0x16>
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	df 91       	pop	r29
    16b4:	cf 91       	pop	r28
    16b6:	08 95       	ret

000016b8 <i2c_lcd_command>:
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	00 d0       	rcall	.+0      	; 0x16be <i2c_lcd_command+0x6>
    16be:	00 d0       	rcall	.+0      	; 0x16c0 <i2c_lcd_command+0x8>
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	98 2f       	mov	r25, r24
    16c6:	90 7f       	andi	r25, 0xF0	; 240
    16c8:	29 2f       	mov	r18, r25
    16ca:	2c 60       	ori	r18, 0x0C	; 12
    16cc:	29 83       	std	Y+1, r18	; 0x01
    16ce:	98 60       	ori	r25, 0x08	; 8
    16d0:	9a 83       	std	Y+2, r25	; 0x02
    16d2:	20 e1       	ldi	r18, 0x10	; 16
    16d4:	82 9f       	mul	r24, r18
    16d6:	c0 01       	movw	r24, r0
    16d8:	11 24       	eor	r1, r1
    16da:	98 2f       	mov	r25, r24
    16dc:	9c 60       	ori	r25, 0x0C	; 12
    16de:	9b 83       	std	Y+3, r25	; 0x03
    16e0:	88 60       	ori	r24, 0x08	; 8
    16e2:	8c 83       	std	Y+4, r24	; 0x04
    16e4:	44 e0       	ldi	r20, 0x04	; 4
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    16f2:	03 d1       	rcall	.+518    	; 0x18fa <i2c_transmit>
    16f4:	81 11       	cpse	r24, r1
    16f6:	f6 cf       	rjmp	.-20     	; 0x16e4 <i2c_lcd_command+0x2c>
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	df 91       	pop	r29
    1702:	cf 91       	pop	r28
    1704:	08 95       	ret

00001706 <i2c_lcd_init>:
    1706:	be d0       	rcall	.+380    	; 0x1884 <i2c_init>
    1708:	2f ef       	ldi	r18, 0xFF	; 255
    170a:	89 e6       	ldi	r24, 0x69	; 105
    170c:	98 e1       	ldi	r25, 0x18	; 24
    170e:	21 50       	subi	r18, 0x01	; 1
    1710:	80 40       	sbci	r24, 0x00	; 0
    1712:	90 40       	sbci	r25, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <i2c_lcd_init+0x8>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <i2c_lcd_init+0x12>
    1718:	00 00       	nop
    171a:	81 ec       	ldi	r24, 0xC1	; 193
    171c:	93 e0       	ldi	r25, 0x03	; 3
    171e:	3b d4       	rcall	.+2166   	; 0x1f96 <uart0_tx_string>
    1720:	80 e3       	ldi	r24, 0x30	; 48
    1722:	b0 df       	rcall	.-160    	; 0x1684 <i2c_lcd_command_8>
    1724:	8f e1       	ldi	r24, 0x1F	; 31
    1726:	9e e4       	ldi	r25, 0x4E	; 78
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <i2c_lcd_init+0x22>
    172c:	00 c0       	rjmp	.+0      	; 0x172e <i2c_lcd_init+0x28>
    172e:	00 00       	nop
    1730:	80 e3       	ldi	r24, 0x30	; 48
    1732:	a8 df       	rcall	.-176    	; 0x1684 <i2c_lcd_command_8>
    1734:	8f e8       	ldi	r24, 0x8F	; 143
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	01 97       	sbiw	r24, 0x01	; 1
    173a:	f1 f7       	brne	.-4      	; 0x1738 <i2c_lcd_init+0x32>
    173c:	00 c0       	rjmp	.+0      	; 0x173e <i2c_lcd_init+0x38>
    173e:	00 00       	nop
    1740:	80 e3       	ldi	r24, 0x30	; 48
    1742:	a0 df       	rcall	.-192    	; 0x1684 <i2c_lcd_command_8>
    1744:	8f e8       	ldi	r24, 0x8F	; 143
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <i2c_lcd_init+0x42>
    174c:	00 c0       	rjmp	.+0      	; 0x174e <i2c_lcd_init+0x48>
    174e:	00 00       	nop
    1750:	80 e2       	ldi	r24, 0x20	; 32
    1752:	98 df       	rcall	.-208    	; 0x1684 <i2c_lcd_command_8>
    1754:	8f e8       	ldi	r24, 0x8F	; 143
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	f1 f7       	brne	.-4      	; 0x1758 <i2c_lcd_init+0x52>
    175c:	00 c0       	rjmp	.+0      	; 0x175e <i2c_lcd_init+0x58>
    175e:	00 00       	nop
    1760:	88 e2       	ldi	r24, 0x28	; 40
    1762:	aa df       	rcall	.-172    	; 0x16b8 <i2c_lcd_command>
    1764:	87 ec       	ldi	r24, 0xC7	; 199
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <i2c_lcd_init+0x62>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <i2c_lcd_init+0x68>
    176e:	00 00       	nop
    1770:	88 e0       	ldi	r24, 0x08	; 8
    1772:	a2 df       	rcall	.-188    	; 0x16b8 <i2c_lcd_command>
    1774:	87 ec       	ldi	r24, 0xC7	; 199
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <i2c_lcd_init+0x72>
    177c:	00 c0       	rjmp	.+0      	; 0x177e <i2c_lcd_init+0x78>
    177e:	00 00       	nop
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	9a df       	rcall	.-204    	; 0x16b8 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1784:	8f ed       	ldi	r24, 0xDF	; 223
    1786:	9e e2       	ldi	r25, 0x2E	; 46
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <i2c_lcd_init+0x82>
    178c:	00 c0       	rjmp	.+0      	; 0x178e <i2c_lcd_init+0x88>
    178e:	00 00       	nop
    1790:	86 e0       	ldi	r24, 0x06	; 6
    1792:	92 df       	rcall	.-220    	; 0x16b8 <i2c_lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1794:	87 ec       	ldi	r24, 0xC7	; 199
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <i2c_lcd_init+0x92>
    179c:	00 c0       	rjmp	.+0      	; 0x179e <i2c_lcd_init+0x98>
    179e:	00 00       	nop
    17a0:	8c e0       	ldi	r24, 0x0C	; 12
    17a2:	8a df       	rcall	.-236    	; 0x16b8 <i2c_lcd_command>
    17a4:	87 ec       	ldi	r24, 0xC7	; 199
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <i2c_lcd_init+0xa2>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <i2c_lcd_init+0xa8>
    17ae:	00 00       	nop
    17b0:	81 ee       	ldi	r24, 0xE1	; 225
    17b2:	93 e0       	ldi	r25, 0x03	; 3
    17b4:	f0 c3       	rjmp	.+2016   	; 0x1f96 <uart0_tx_string>
    17b6:	08 95       	ret

000017b8 <i2c_lcd_data>:
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	00 d0       	rcall	.+0      	; 0x17be <i2c_lcd_data+0x6>
    17be:	00 d0       	rcall	.+0      	; 0x17c0 <i2c_lcd_data+0x8>
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	98 2f       	mov	r25, r24
    17c6:	90 7f       	andi	r25, 0xF0	; 240
    17c8:	29 2f       	mov	r18, r25
    17ca:	2d 60       	ori	r18, 0x0D	; 13
    17cc:	29 83       	std	Y+1, r18	; 0x01
    17ce:	99 60       	ori	r25, 0x09	; 9
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	20 e1       	ldi	r18, 0x10	; 16
    17d4:	82 9f       	mul	r24, r18
    17d6:	c0 01       	movw	r24, r0
    17d8:	11 24       	eor	r1, r1
    17da:	98 2f       	mov	r25, r24
    17dc:	9d 60       	ori	r25, 0x0D	; 13
    17de:	9b 83       	std	Y+3, r25	; 0x03
    17e0:	89 60       	ori	r24, 0x09	; 9
    17e2:	8c 83       	std	Y+4, r24	; 0x04
    17e4:	44 e0       	ldi	r20, 0x04	; 4
    17e6:	50 e0       	ldi	r21, 0x00	; 0
    17e8:	be 01       	movw	r22, r28
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    17f2:	83 d0       	rcall	.+262    	; 0x18fa <i2c_transmit>
    17f4:	81 11       	cpse	r24, r1
    17f6:	f6 cf       	rjmp	.-20     	; 0x17e4 <i2c_lcd_data+0x2c>
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	df 91       	pop	r29
    1802:	cf 91       	pop	r28
    1804:	08 95       	ret

00001806 <i2c_lcd_goto_XY>:
    1806:	e8 2f       	mov	r30, r24
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	ee 0f       	add	r30, r30
    180c:	ff 1f       	adc	r31, r31
    180e:	e9 50       	subi	r30, 0x09	; 9
    1810:	fc 4f       	sbci	r31, 0xFC	; 252
    1812:	80 81       	ld	r24, Z
    1814:	86 0f       	add	r24, r22
    1816:	80 68       	ori	r24, 0x80	; 128
    1818:	4f cf       	rjmp	.-354    	; 0x16b8 <i2c_lcd_command>
    181a:	08 95       	ret

0000181c <i2c_lcd_string>:
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	ea 01       	movw	r28, r20
    1822:	f1 df       	rcall	.-30     	; 0x1806 <i2c_lcd_goto_XY>
    1824:	88 81       	ld	r24, Y
    1826:	88 23       	and	r24, r24
    1828:	29 f0       	breq	.+10     	; 0x1834 <i2c_lcd_string+0x18>
    182a:	21 96       	adiw	r28, 0x01	; 1
    182c:	c5 df       	rcall	.-118    	; 0x17b8 <i2c_lcd_data>
    182e:	89 91       	ld	r24, Y+
    1830:	81 11       	cpse	r24, r1
    1832:	fc cf       	rjmp	.-8      	; 0x182c <i2c_lcd_string+0x10>
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <i2c_lcd_clear>:
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	00 d0       	rcall	.+0      	; 0x1840 <i2c_lcd_clear+0x6>
    1840:	00 d0       	rcall	.+0      	; 0x1842 <i2c_lcd_clear+0x8>
    1842:	cd b7       	in	r28, 0x3d	; 61
    1844:	de b7       	in	r29, 0x3e	; 62
    1846:	8c e0       	ldi	r24, 0x0C	; 12
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	88 e0       	ldi	r24, 0x08	; 8
    184c:	8a 83       	std	Y+2, r24	; 0x02
    184e:	8c e1       	ldi	r24, 0x1C	; 28
    1850:	8b 83       	std	Y+3, r24	; 0x03
    1852:	88 e1       	ldi	r24, 0x18	; 24
    1854:	8c 83       	std	Y+4, r24	; 0x04
    1856:	44 e0       	ldi	r20, 0x04	; 4
    1858:	50 e0       	ldi	r21, 0x00	; 0
    185a:	be 01       	movw	r22, r28
    185c:	6f 5f       	subi	r22, 0xFF	; 255
    185e:	7f 4f       	sbci	r23, 0xFF	; 255
    1860:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <I2C_addr_PCF8574>
    1864:	4a d0       	rcall	.+148    	; 0x18fa <i2c_transmit>
    1866:	81 11       	cpse	r24, r1
    1868:	f6 cf       	rjmp	.-20     	; 0x1856 <i2c_lcd_clear+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    186a:	8f e3       	ldi	r24, 0x3F	; 63
    186c:	9c e9       	ldi	r25, 0x9C	; 156
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <i2c_lcd_clear+0x34>
    1872:	00 c0       	rjmp	.+0      	; 0x1874 <i2c_lcd_clear+0x3a>
    1874:	00 00       	nop
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	0f 90       	pop	r0
    187e:	df 91       	pop	r29
    1880:	cf 91       	pop	r28
    1882:	08 95       	ret

00001884 <i2c_init>:
    1884:	88 e4       	ldi	r24, 0x48	; 72
    1886:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    188a:	08 95       	ret

0000188c <i2c_start>:
    188c:	e4 e7       	ldi	r30, 0x74	; 116
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	10 82       	st	Z, r1
    1892:	94 ea       	ldi	r25, 0xA4	; 164
    1894:	90 83       	st	Z, r25
    1896:	90 81       	ld	r25, Z
    1898:	99 23       	and	r25, r25
    189a:	ec f7       	brge	.-6      	; 0x1896 <i2c_start+0xa>
    189c:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18a0:	98 7f       	andi	r25, 0xF8	; 248
    18a2:	98 30       	cpi	r25, 0x08	; 8
    18a4:	a1 f4       	brne	.+40     	; 0x18ce <i2c_start+0x42>
    18a6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18aa:	84 e8       	ldi	r24, 0x84	; 132
    18ac:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18b0:	e4 e7       	ldi	r30, 0x74	; 116
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	88 23       	and	r24, r24
    18b8:	ec f7       	brge	.-6      	; 0x18b4 <i2c_start+0x28>
    18ba:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18be:	98 7f       	andi	r25, 0xF8	; 248
    18c0:	98 31       	cpi	r25, 0x18	; 24
    18c2:	39 f0       	breq	.+14     	; 0x18d2 <i2c_start+0x46>
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 34       	cpi	r25, 0x40	; 64
    18c8:	29 f4       	brne	.+10     	; 0x18d4 <i2c_start+0x48>
    18ca:	80 e0       	ldi	r24, 0x00	; 0
    18cc:	08 95       	ret
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	08 95       	ret
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	08 95       	ret

000018d6 <i2c_write>:
    18d6:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
    18da:	84 e8       	ldi	r24, 0x84	; 132
    18dc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    18e0:	e4 e7       	ldi	r30, 0x74	; 116
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	ec f7       	brge	.-6      	; 0x18e4 <i2c_write+0xe>
    18ea:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    18ee:	98 7f       	andi	r25, 0xF8	; 248
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	98 32       	cpi	r25, 0x28	; 40
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <i2c_write+0x22>
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	08 95       	ret

000018fa <i2c_transmit>:
    18fa:	cf 92       	push	r12
    18fc:	df 92       	push	r13
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	6b 01       	movw	r12, r22
    190a:	8a 01       	movw	r16, r20
    190c:	bf df       	rcall	.-130    	; 0x188c <i2c_start>
    190e:	f8 2e       	mov	r15, r24
    1910:	81 11       	cpse	r24, r1
    1912:	17 c0       	rjmp	.+46     	; 0x1942 <i2c_transmit+0x48>
    1914:	01 15       	cp	r16, r1
    1916:	11 05       	cpc	r17, r1
    1918:	81 f0       	breq	.+32     	; 0x193a <i2c_transmit+0x40>
    191a:	e6 01       	movw	r28, r12
    191c:	0c 0d       	add	r16, r12
    191e:	1d 1d       	adc	r17, r13
    1920:	89 91       	ld	r24, Y+
    1922:	d9 df       	rcall	.-78     	; 0x18d6 <i2c_write>
    1924:	81 11       	cpse	r24, r1
    1926:	10 c0       	rjmp	.+32     	; 0x1948 <i2c_transmit+0x4e>
    1928:	8f e9       	ldi	r24, 0x9F	; 159
    192a:	9f e0       	ldi	r25, 0x0F	; 15
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	f1 f7       	brne	.-4      	; 0x192c <i2c_transmit+0x32>
    1930:	00 c0       	rjmp	.+0      	; 0x1932 <i2c_transmit+0x38>
    1932:	00 00       	nop
    1934:	0c 17       	cp	r16, r28
    1936:	1d 07       	cpc	r17, r29
    1938:	99 f7       	brne	.-26     	; 0x1920 <i2c_transmit+0x26>
    193a:	84 e9       	ldi	r24, 0x94	; 148
    193c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
    1940:	05 c0       	rjmp	.+10     	; 0x194c <i2c_transmit+0x52>
    1942:	ff 24       	eor	r15, r15
    1944:	f3 94       	inc	r15
    1946:	02 c0       	rjmp	.+4      	; 0x194c <i2c_transmit+0x52>
    1948:	ff 24       	eor	r15, r15
    194a:	f3 94       	inc	r15
    194c:	8f 2d       	mov	r24, r15
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	1f 91       	pop	r17
    1954:	0f 91       	pop	r16
    1956:	ff 90       	pop	r15
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	08 95       	ret

0000195e <mfrc522_write>:




static void mfrc522_write(unsigned char reg, unsigned char value, unsigned char channel)
{
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	16 2f       	mov	r17, r22
	
	//spi 통신 시작 (굳이 없어도 될듯)
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<(channel));
    1966:	95 b3       	in	r25, 0x15	; 21
    1968:	c1 e0       	ldi	r28, 0x01	; 1
    196a:	d0 e0       	ldi	r29, 0x00	; 0
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <mfrc522_write+0x14>
    196e:	cc 0f       	add	r28, r28
    1970:	dd 1f       	adc	r29, r29
    1972:	4a 95       	dec	r20
    1974:	e2 f7       	brpl	.-8      	; 0x196e <mfrc522_write+0x10>
    1976:	2c 2f       	mov	r18, r28
    1978:	20 95       	com	r18
    197a:	92 23       	and	r25, r18
    197c:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 (MSB == 0 is for writing. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((reg<<1)&0x7E);
    197e:	88 0f       	add	r24, r24
    1980:	8e 77       	andi	r24, 0x7E	; 126
    1982:	a3 d2       	rcall	.+1350   	; 0x1eca <spi_master_tx>
	//이후 레지스터 내부 값 전송
	spi_master_tx(value);
    1984:	81 2f       	mov	r24, r17
    1986:	a1 d2       	rcall	.+1346   	; 0x1eca <spi_master_tx>
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    1988:	85 b3       	in	r24, 0x15	; 21
    198a:	c8 2b       	or	r28, r24
    198c:	c5 bb       	out	0x15, r28	; 21
	//spi 통신 종료	 (굳이 없어도 될듯)
	
	
}
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	08 95       	ret

00001996 <mfrc522_read>:
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F

}

static unsigned char mfrc522_read(unsigned char reg, unsigned char channel){
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
	unsigned char value=0;
	//RC522와 연결된 SS핀 LOW출력
	SS_PORT &= ~(1<<channel);
    199a:	95 b3       	in	r25, 0x15	; 21
    199c:	c1 e0       	ldi	r28, 0x01	; 1
    199e:	d0 e0       	ldi	r29, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <mfrc522_read+0x10>
    19a2:	cc 0f       	add	r28, r28
    19a4:	dd 1f       	adc	r29, r29
    19a6:	6a 95       	dec	r22
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <mfrc522_read+0xc>
    19aa:	2c 2f       	mov	r18, r28
    19ac:	20 95       	com	r18
    19ae:	92 23       	and	r25, r18
    19b0:	95 bb       	out	0x15, r25	; 21
	//SPI 라인을 통해 regisger 주소 전송 ( MSB == 1 is for reading. LSB is not used in address. Datasheet section 8.1.2.3.)
	spi_master_tx((((reg<<1)&0x7E)|0x80));
    19b2:	88 0f       	add	r24, r24
    19b4:	8e 77       	andi	r24, 0x7E	; 126
    19b6:	80 68       	ori	r24, 0x80	; 128
    19b8:	88 d2       	rcall	.+1296   	; 0x1eca <spi_master_tx>
	value = spi_master_rx(); //send dummy data and receive data.
    19ba:	8b d2       	rcall	.+1302   	; 0x1ed2 <spi_master_rx>
    19bc:	95 b3       	in	r25, 0x15	; 21
	//RC522와 연결된 SS핀 HIGH출력
	SS_PORT |= (1<<channel);
    19be:	c9 2b       	or	r28, r25
    19c0:	c5 bb       	out	0x15, r28	; 21
    19c2:	df 91       	pop	r29
	
	return value;
}
    19c4:	cf 91       	pop	r28
    19c6:	08 95       	ret

000019c8 <mfrc522_to_card>:
    19c8:	2f 92       	push	r2

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
    19ca:	3f 92       	push	r3
    19cc:	4f 92       	push	r4
    19ce:	5f 92       	push	r5
    19d0:	6f 92       	push	r6
    19d2:	7f 92       	push	r7
    19d4:	8f 92       	push	r8
    19d6:	9f 92       	push	r9
    19d8:	af 92       	push	r10
    19da:	bf 92       	push	r11
    19dc:	cf 92       	push	r12
    19de:	df 92       	push	r13
    19e0:	ef 92       	push	r14
    19e2:	ff 92       	push	r15
    19e4:	0f 93       	push	r16
    19e6:	1f 93       	push	r17
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	f8 2e       	mov	r15, r24
    19ee:	a6 2e       	mov	r10, r22
    19f0:	b7 2e       	mov	r11, r23
    19f2:	44 2e       	mov	r4, r20
    19f4:	22 2e       	mov	r2, r18
    19f6:	d3 2e       	mov	r13, r19
	uint8_t lastBits;
	uint8_t n;
	uint8_t	tmp;
	uint32_t i;

	switch (cmd)
    19f8:	8c e0       	ldi	r24, 0x0C	; 12
    19fa:	f8 16       	cp	r15, r24
    19fc:	59 f0       	breq	.+22     	; 0x1a14 <mfrc522_to_card+0x4c>
    19fe:	ee e0       	ldi	r30, 0x0E	; 14
    1a00:	fe 12       	cpse	r15, r30
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <mfrc522_to_card+0x5e>
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
    1a04:	68 94       	set
    1a06:	cc 24       	eor	r12, r12
    1a08:	c4 f8       	bld	r12, 4

	switch (cmd)
	{
		case MFRC522_CMD_MFAuthent:		//Certification cards close
		{
			irqEn = 0x12;
    1a0a:	0f 2e       	mov	r0, r31
    1a0c:	f2 e1       	ldi	r31, 0x12	; 18
    1a0e:	3f 2e       	mov	r3, r31
    1a10:	f0 2d       	mov	r31, r0
    1a12:	0b c0       	rjmp	.+22     	; 0x1a2a <mfrc522_to_card+0x62>
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
    1a14:	0f 2e       	mov	r0, r31
    1a16:	f0 e3       	ldi	r31, 0x30	; 48
    1a18:	cf 2e       	mov	r12, r31
    1a1a:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case MFRC522_CMD_Transceive:	//Transmit FIFO data
		{
			irqEn = 0x77;
    1a1c:	0f 2e       	mov	r0, r31
    1a1e:	f7 e7       	ldi	r31, 0x77	; 119
    1a20:	3f 2e       	mov	r3, r31
    1a22:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
    1a24:	02 c0       	rjmp	.+4      	; 0x1a2a <mfrc522_to_card+0x62>

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
	uint8_t waitIRq = 0x00;
    1a26:	c1 2c       	mov	r12, r1
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
	uint8_t irqEn = 0x00;
    1a28:	31 2c       	mov	r3, r1
		default:
		break;
	}
	
	///////////////////////////////////////////============여기-==========//////////
	mfrc522_write(ComIEnReg, irqEn|0x80,ch);	//Interrupt request 원래 주석으로 달려있었떤 곳임.
    1a2a:	4e 2d       	mov	r20, r14
    1a2c:	63 2d       	mov	r22, r3
    1a2e:	60 68       	ori	r22, 0x80	; 128
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	95 df       	rcall	.-214    	; 0x195e <mfrc522_write>
	n=mfrc522_read(ComIrqReg,ch);
    1a34:	6e 2d       	mov	r22, r14
    1a36:	84 e0       	ldi	r24, 0x04	; 4
    1a38:	ae df       	rcall	.-164    	; 0x1996 <mfrc522_read>
	mfrc522_write(ComIrqReg,n&(~0x80),ch);//clear all interrupt bits
    1a3a:	68 2f       	mov	r22, r24
    1a3c:	6f 77       	andi	r22, 0x7F	; 127
    1a3e:	4e 2d       	mov	r20, r14
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	8d df       	rcall	.-230    	; 0x195e <mfrc522_write>
	n=mfrc522_read(FIFOLevelReg,ch);
    1a44:	6e 2d       	mov	r22, r14
    1a46:	8a e0       	ldi	r24, 0x0A	; 10
    1a48:	a6 df       	rcall	.-180    	; 0x1996 <mfrc522_read>
    1a4a:	68 2f       	mov	r22, r24
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
    1a4c:	60 68       	ori	r22, 0x80	; 128
    1a4e:	4e 2d       	mov	r20, r14
    1a50:	8a e0       	ldi	r24, 0x0A	; 10
    1a52:	85 df       	rcall	.-246    	; 0x195e <mfrc522_write>
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???
    1a54:	4e 2d       	mov	r20, r14
    1a56:	60 e0       	ldi	r22, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	81 df       	rcall	.-254    	; 0x195e <mfrc522_write>
    1a5c:	51 2c       	mov	r5, r1

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1a5e:	61 2c       	mov	r6, r1
    1a60:	71 2c       	mov	r7, r1
    1a62:	41 14       	cp	r4, r1
    1a64:	51 04       	cpc	r5, r1
    1a66:	61 04       	cpc	r6, r1
    1a68:	71 04       	cpc	r7, r1
    1a6a:	99 f0       	breq	.+38     	; 0x1a92 <mfrc522_to_card+0xca>
    1a6c:	ca 2d       	mov	r28, r10
    1a6e:	db 2d       	mov	r29, r11
    1a70:	81 2c       	mov	r8, r1
    1a72:	91 2c       	mov	r9, r1
    1a74:	54 01       	movw	r10, r8
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
    1a76:	69 91       	ld	r22, Y+
    1a78:	4e 2d       	mov	r20, r14
    1a7a:	89 e0       	ldi	r24, 0x09	; 9
    1a7c:	70 df       	rcall	.-288    	; 0x195e <mfrc522_write>
    1a7e:	ff ef       	ldi	r31, 0xFF	; 255
	mfrc522_write(FIFOLevelReg,n|0x80,ch);//flush FIFO data
	
	mfrc522_write(CommandReg, MFRC522_CMD_Idle,ch);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
	for (i=0; i<send_data_len; i++)
    1a80:	8f 1a       	sub	r8, r31
    1a82:	9f 0a       	sbc	r9, r31
    1a84:	af 0a       	sbc	r10, r31
    1a86:	bf 0a       	sbc	r11, r31
    1a88:	84 14       	cp	r8, r4
    1a8a:	95 04       	cpc	r9, r5
    1a8c:	a6 04       	cpc	r10, r6
    1a8e:	b7 04       	cpc	r11, r7
    1a90:	90 f3       	brcs	.-28     	; 0x1a76 <mfrc522_to_card+0xae>
	{
		mfrc522_write(FIFODataReg, send_data[i],ch);
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd,ch);
    1a92:	4e 2d       	mov	r20, r14
    1a94:	6f 2d       	mov	r22, r15
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	62 df       	rcall	.-316    	; 0x195e <mfrc522_write>
	if (cmd == MFRC522_CMD_Transceive)
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	f8 12       	cpse	r15, r24
	{
		n=mfrc522_read(BitFramingReg,ch);
    1a9e:	08 c0       	rjmp	.+16     	; 0x1ab0 <mfrc522_to_card+0xe8>
    1aa0:	6e 2d       	mov	r22, r14
    1aa2:	8d e0       	ldi	r24, 0x0D	; 13
		mfrc522_write(BitFramingReg,n|0x80,ch);
    1aa4:	78 df       	rcall	.-272    	; 0x1996 <mfrc522_read>
    1aa6:	68 2f       	mov	r22, r24
    1aa8:	60 68       	ori	r22, 0x80	; 128
    1aaa:	4e 2d       	mov	r20, r14
    1aac:	8d e0       	ldi	r24, 0x0D	; 13
    1aae:	57 df       	rcall	.-338    	; 0x195e <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1ab0:	6e 2d       	mov	r22, r14
    1ab2:	84 e0       	ldi	r24, 0x04	; 4
    1ab4:	70 df       	rcall	.-288    	; 0x1996 <mfrc522_read>
    1ab6:	b8 2e       	mov	r11, r24
    1ab8:	c0 e0       	ldi	r28, 0x00	; 0
    1aba:	d0 e0       	ldi	r29, 0x00	; 0
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1abc:	ec 2d       	mov	r30, r12
    1abe:	e1 60       	ori	r30, 0x01	; 1
    1ac0:	ce 2e       	mov	r12, r30
    1ac2:	0a c0       	rjmp	.+20     	; 0x1ad8 <mfrc522_to_card+0x110>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
	do
	{
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read(ComIrqReg,ch);
    1ac4:	6e 2d       	mov	r22, r14
    1ac6:	84 e0       	ldi	r24, 0x04	; 4
    1ac8:	66 df       	rcall	.-308    	; 0x1996 <mfrc522_read>
    1aca:	b8 2e       	mov	r11, r24
    1acc:	21 96       	adiw	r28, 0x01	; 1
    1ace:	cf 3c       	cpi	r28, 0xCF	; 207
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));
    1ad0:	f7 e0       	ldi	r31, 0x07	; 7
    1ad2:	df 07       	cpc	r29, r31
    1ad4:	09 f4       	brne	.+2      	; 0x1ad8 <mfrc522_to_card+0x110>
    1ad6:	68 c0       	rjmp	.+208    	; 0x1ba8 <mfrc522_to_card+0x1e0>
    1ad8:	8c 2d       	mov	r24, r12
    1ada:	8b 21       	and	r24, r11
    1adc:	99 f3       	breq	.-26     	; 0x1ac4 <mfrc522_to_card+0xfc>
    1ade:	6e c0       	rjmp	.+220    	; 0x1bbc <mfrc522_to_card+0x1f4>
    1ae0:	83 2d       	mov	r24, r3
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
			if (n & irqEn & 0x01)
    1ae2:	81 70       	andi	r24, 0x01	; 1
    1ae4:	b8 22       	and	r11, r24
    1ae6:	11 f0       	breq	.+4      	; 0x1aec <mfrc522_to_card+0x124>
			{
				status = CARD_NOT_FOUND;			//??
    1ae8:	c2 e0       	ldi	r28, 0x02	; 2
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
		{
			status = CARD_FOUND;
    1aea:	01 c0       	rjmp	.+2      	; 0x1aee <mfrc522_to_card+0x126>
			if (n & irqEn & 0x01)
			{
				status = CARD_NOT_FOUND;			//??
			}

			if (cmd == MFRC522_CMD_Transceive)
    1aec:	c1 e0       	ldi	r28, 0x01	; 1
    1aee:	8c e0       	ldi	r24, 0x0C	; 12
    1af0:	f8 12       	cpse	r15, r24
			{
				n = mfrc522_read(FIFOLevelReg,ch);
    1af2:	73 c0       	rjmp	.+230    	; 0x1bda <mfrc522_to_card+0x212>
    1af4:	6e 2d       	mov	r22, r14
    1af6:	8a e0       	ldi	r24, 0x0A	; 10
    1af8:	4e df       	rcall	.-356    	; 0x1996 <mfrc522_read>
    1afa:	88 2e       	mov	r8, r24
				lastBits = mfrc522_read(ControlReg,ch) & 0x07;
    1afc:	6e 2d       	mov	r22, r14
    1afe:	8c e0       	ldi	r24, 0x0C	; 12
    1b00:	4a df       	rcall	.-364    	; 0x1996 <mfrc522_read>
    1b02:	28 2f       	mov	r18, r24
    1b04:	27 70       	andi	r18, 0x07	; 7
    1b06:	a9 f0       	breq	.+42     	; 0x1b32 <mfrc522_to_card+0x16a>
				if (lastBits)
    1b08:	88 2d       	mov	r24, r8
				{
					*back_data_len = (n-1)*8 + lastBits;
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	01 97       	sbiw	r24, 0x01	; 1
    1b0e:	88 0f       	add	r24, r24
    1b10:	99 1f       	adc	r25, r25
    1b12:	88 0f       	add	r24, r24
    1b14:	99 1f       	adc	r25, r25
    1b16:	88 0f       	add	r24, r24
    1b18:	99 1f       	adc	r25, r25
    1b1a:	82 0f       	add	r24, r18
    1b1c:	91 1d       	adc	r25, r1
    1b1e:	09 2e       	mov	r0, r25
    1b20:	00 0c       	add	r0, r0
    1b22:	aa 0b       	sbc	r26, r26
    1b24:	bb 0b       	sbc	r27, r27
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 83       	st	Z, r24
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	a2 83       	std	Z+2, r26	; 0x02
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
    1b30:	11 c0       	rjmp	.+34     	; 0x1b54 <mfrc522_to_card+0x18c>
    1b32:	88 2d       	mov	r24, r8
				}
				else
				{
					*back_data_len = n*8;
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	88 0f       	add	r24, r24
    1b38:	99 1f       	adc	r25, r25
    1b3a:	88 0f       	add	r24, r24
    1b3c:	99 1f       	adc	r25, r25
    1b3e:	88 0f       	add	r24, r24
    1b40:	99 1f       	adc	r25, r25
    1b42:	09 2e       	mov	r0, r25
    1b44:	00 0c       	add	r0, r0
    1b46:	aa 0b       	sbc	r26, r26
    1b48:	bb 0b       	sbc	r27, r27
    1b4a:	f8 01       	movw	r30, r16
    1b4c:	80 83       	st	Z, r24
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	a2 83       	std	Z+2, r26	; 0x02
    1b52:	b3 83       	std	Z+3, r27	; 0x03
    1b54:	88 20       	and	r8, r8
				}

				if (n == 0)
    1b56:	71 f0       	breq	.+28     	; 0x1b74 <mfrc522_to_card+0x1ac>
    1b58:	88 2d       	mov	r24, r8
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1b5a:	81 31       	cpi	r24, 0x11	; 17
    1b5c:	08 f0       	brcs	.+2      	; 0x1b60 <mfrc522_to_card+0x198>
    1b5e:	80 e1       	ldi	r24, 0x10	; 16
    1b60:	88 2e       	mov	r8, r24
    1b62:	91 2c       	mov	r9, r1
    1b64:	a1 2c       	mov	r10, r1
    1b66:	b1 2c       	mov	r11, r1
    1b68:	81 14       	cp	r8, r1
    1b6a:	91 04       	cpc	r9, r1
    1b6c:	a1 04       	cpc	r10, r1
    1b6e:	b1 04       	cpc	r11, r1
    1b70:	29 f4       	brne	.+10     	; 0x1b7c <mfrc522_to_card+0x1b4>
    1b72:	33 c0       	rjmp	.+102    	; 0x1bda <mfrc522_to_card+0x212>
    1b74:	81 2c       	mov	r8, r1
    1b76:	91 2c       	mov	r9, r1
    1b78:	54 01       	movw	r10, r8
    1b7a:	83 94       	inc	r8
    1b7c:	02 2d       	mov	r16, r2
    1b7e:	1d 2d       	mov	r17, r13
    1b80:	41 2c       	mov	r4, r1
    1b82:	51 2c       	mov	r5, r1
    1b84:	32 01       	movw	r6, r4
				{
					back_data[i] = mfrc522_read(FIFODataReg,ch);
    1b86:	6e 2d       	mov	r22, r14
    1b88:	89 e0       	ldi	r24, 0x09	; 9
    1b8a:	05 df       	rcall	.-502    	; 0x1996 <mfrc522_read>
    1b8c:	f8 01       	movw	r30, r16
    1b8e:	81 93       	st	Z+, r24
    1b90:	8f 01       	movw	r16, r30
				{
					n = MAX_LEN;
				}
				
				//Reading the received data in FIFO
				for (i=0; i<n; i++)
    1b92:	ff ef       	ldi	r31, 0xFF	; 255
    1b94:	4f 1a       	sub	r4, r31
    1b96:	5f 0a       	sbc	r5, r31
    1b98:	6f 0a       	sbc	r6, r31
    1b9a:	7f 0a       	sbc	r7, r31
    1b9c:	48 14       	cp	r4, r8
    1b9e:	59 04       	cpc	r5, r9
    1ba0:	6a 04       	cpc	r6, r10
    1ba2:	7b 04       	cpc	r7, r11
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1ba4:	80 f3       	brcs	.-32     	; 0x1b86 <mfrc522_to_card+0x1be>
    1ba6:	19 c0       	rjmp	.+50     	; 0x1bda <mfrc522_to_card+0x212>
    1ba8:	6e 2d       	mov	r22, r14
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1baa:	8d e0       	ldi	r24, 0x0D	; 13
    1bac:	f4 de       	rcall	.-536    	; 0x1996 <mfrc522_read>
    1bae:	68 2f       	mov	r22, r24
    1bb0:	6f 77       	andi	r22, 0x7F	; 127
    1bb2:	4e 2d       	mov	r20, r14
	return value;
}

static unsigned char mfrc522_to_card(unsigned char cmd, unsigned char *send_data, unsigned char send_data_len, unsigned char *back_data, uint32_t *back_data_len, unsigned char ch)
{
	uint8_t status = ERROR;
    1bb4:	8d e0       	ldi	r24, 0x0D	; 13
    1bb6:	d3 de       	rcall	.-602    	; 0x195e <mfrc522_write>
		n = mfrc522_read(ComIrqReg,ch);
		i--;
	}
	while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg,ch);
    1bb8:	c3 e0       	ldi	r28, 0x03	; 3
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <mfrc522_to_card+0x212>
    1bbc:	6e 2d       	mov	r22, r14
    1bbe:	8d e0       	ldi	r24, 0x0D	; 13
	mfrc522_write(BitFramingReg,tmp&(~0x80),ch);
    1bc0:	ea de       	rcall	.-556    	; 0x1996 <mfrc522_read>
    1bc2:	68 2f       	mov	r22, r24
    1bc4:	6f 77       	andi	r22, 0x7F	; 127
    1bc6:	4e 2d       	mov	r20, r14
    1bc8:	8d e0       	ldi	r24, 0x0D	; 13
    1bca:	c9 de       	rcall	.-622    	; 0x195e <mfrc522_write>
	
	if (i != 0)
	{
		if(!(mfrc522_read(ErrorReg,ch) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
    1bcc:	6e 2d       	mov	r22, r14
    1bce:	86 e0       	ldi	r24, 0x06	; 6
    1bd0:	e2 de       	rcall	.-572    	; 0x1996 <mfrc522_read>
    1bd2:	8b 71       	andi	r24, 0x1B	; 27
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <mfrc522_to_card+0x210>
    1bd6:	84 cf       	rjmp	.-248    	; 0x1ae0 <mfrc522_to_card+0x118>
    1bd8:	c3 e0       	ldi	r28, 0x03	; 3
				}
			}
		}
		else
		{
			status = ERROR;
    1bda:	8c 2f       	mov	r24, r28
	
	// 	SetBitMask(ControlReg,0x80);           //timer stops
	//mfrc522_write(CommandReg, MFRC522_CMD_Idle);

	return status;
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	bf 90       	pop	r11
    1bee:	af 90       	pop	r10
    1bf0:	9f 90       	pop	r9
    1bf2:	8f 90       	pop	r8
    1bf4:	7f 90       	pop	r7
    1bf6:	6f 90       	pop	r6
    1bf8:	5f 90       	pop	r5
    1bfa:	4f 90       	pop	r4
    1bfc:	3f 90       	pop	r3
    1bfe:	2f 90       	pop	r2
    1c00:	08 95       	ret

00001c02 <mfrc522_init>:
    1c02:	cf 93       	push	r28

void mfrc522_init(unsigned char ch)
{
    1c04:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	spi_init(_SPI_MASTER_MODE,_SPI_CLK_PRESC_16,_SPI_CLK_LO_LEADING);
    1c06:	1f 92       	push	r1
    1c08:	1f 92       	push	r1
    1c0a:	1f 92       	push	r1
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	8f 93       	push	r24
    1c10:	83 e0       	ldi	r24, 0x03	; 3
    1c12:	8f 93       	push	r24
    1c14:	17 d1       	rcall	.+558    	; 0x1e44 <spi_init>
	
	//SS핀 출력모드 및 디폴트 하이로 설정해두어야 함.
	SS_DDR|=(0x03); // C포트 0번핀을 SS핀으로 사용
    1c16:	84 b3       	in	r24, 0x14	; 20
    1c18:	83 60       	ori	r24, 0x03	; 3
    1c1a:	84 bb       	out	0x14, r24	; 20
	SS_PORT=0; //입력핀이 전원에 영향 끼치는 행위를 막기 위함
    1c1c:	15 ba       	out	0x15, r1	; 21
    1c1e:	2f ef       	ldi	r18, 0xFF	; 255
    1c20:	89 ef       	ldi	r24, 0xF9	; 249
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	21 50       	subi	r18, 0x01	; 1
    1c26:	80 40       	sbci	r24, 0x00	; 0
    1c28:	90 40       	sbci	r25, 0x00	; 0
    1c2a:	e1 f7       	brne	.-8      	; 0x1c24 <mfrc522_init+0x22>
    1c2c:	00 c0       	rjmp	.+0      	; 0x1c2e <mfrc522_init+0x2c>
    1c2e:	00 00       	nop
	//이렇게 케어해두니, 이상 동작하지 않아서 좋음
	_delay_ms(20);
	SS_PORT|=(0x03); //Default HIGH
    1c30:	85 b3       	in	r24, 0x15	; 21
    1c32:	83 60       	ori	r24, 0x03	; 3
    1c34:	85 bb       	out	0x15, r24	; 21
}

static void mfrc522_reset(unsigned char ch){ //장치의 데이터를 모두 리셋시킴.
	//내부 버퍼는 유지되며, 레지스터의 데이터들은 reset values로 set된다.
	
	mfrc522_write(CommandReg,MFRC522_CMD_SoftReset,ch); // 0x01<<1 , 0x0F
    1c36:	4c 2f       	mov	r20, r28
    1c38:	6f e0       	ldi	r22, 0x0F	; 15
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 de       	rcall	.-736    	; 0x195e <mfrc522_write>
	
	// When communicating with a PICC we need a timeout if something goes wrong.
	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].
	// TPrescaler_Hi are the four low bits in TModeReg. TPrescaler_Lo is TPrescalerReg.
	// 통신을 할 때, 잘못되는 상황을 대비하여 timeout을 걸어놓아야 한다.
	mfrc522_write(TModeReg, 0x8D,ch); //Timer setting and prescalingH
    1c3e:	4c 2f       	mov	r20, r28
    1c40:	6d e8       	ldi	r22, 0x8D	; 141
    1c42:	8a e2       	ldi	r24, 0x2A	; 42
    1c44:	8c de       	rcall	.-744    	; 0x195e <mfrc522_write>
	mfrc522_write(TPrescalerReg, 0x3E,ch); //prescalingL  ==> pre:0xD3E=3390
    1c46:	4c 2f       	mov	r20, r28
    1c48:	6e e3       	ldi	r22, 0x3E	; 62
    1c4a:	8b e2       	ldi	r24, 0x2B	; 43
    1c4c:	88 de       	rcall	.-752    	; 0x195e <mfrc522_write>
	mfrc522_write(TReloadRegH, 30,ch); //16-bit timer reload value high.
    1c4e:	4c 2f       	mov	r20, r28
    1c50:	6e e1       	ldi	r22, 0x1E	; 30
    1c52:	8c e2       	ldi	r24, 0x2C	; 44
    1c54:	84 de       	rcall	.-760    	; 0x195e <mfrc522_write>
	mfrc522_write(TReloadRegL, 0,ch); //16-bit timer reload value low. ==>Reload Timer :0x1E0=480  ==> (ie 120ms before timeout.
    1c56:	4c 2f       	mov	r20, r28
    1c58:	60 e0       	ldi	r22, 0x00	; 0
    1c5a:	8d e2       	ldi	r24, 0x2D	; 45
    1c5c:	80 de       	rcall	.-768    	; 0x195e <mfrc522_write>
	
	
	mfrc522_write(TxASKReg, 0x40,ch); //Controls transmit modulation settings. (Force100ASK)
    1c5e:	4c 2f       	mov	r20, r28
    1c60:	60 e4       	ldi	r22, 0x40	; 64
    1c62:	85 e1       	ldi	r24, 0x15	; 21
    1c64:	7c de       	rcall	.-776    	; 0x195e <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D,ch); //Defines general mode settings for transmitting and receiving.
    1c66:	4c 2f       	mov	r20, r28
    1c68:	6d e3       	ldi	r22, 0x3D	; 61
    1c6a:	81 e1       	ldi	r24, 0x11	; 17
    1c6c:	78 de       	rcall	.-784    	; 0x195e <mfrc522_write>
    1c6e:	6c 2f       	mov	r22, r28
	
	
	//AntennaOn. reset 시 해당 핀은 다시 disable된다.
	byte = mfrc522_read(TxControlReg,ch);
    1c70:	84 e1       	ldi	r24, 0x14	; 20
    1c72:	91 de       	rcall	.-734    	; 0x1996 <mfrc522_read>
    1c74:	98 2f       	mov	r25, r24
    1c76:	93 70       	andi	r25, 0x03	; 3
	if(!(byte&0x03)) //0번비트 1번비트 둘다 모두 0으로 클리어 되어있는 경우
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	29 f4       	brne	.+10     	; 0x1c8e <mfrc522_init+0x8c>
    1c84:	68 2f       	mov	r22, r24
	{
		mfrc522_write(TxControlReg,byte|0x03,ch);
    1c86:	63 60       	ori	r22, 0x03	; 3
    1c88:	4c 2f       	mov	r20, r28
    1c8a:	84 e1       	ldi	r24, 0x14	; 20
    1c8c:	68 de       	rcall	.-816    	; 0x195e <mfrc522_write>
    1c8e:	cf 91       	pop	r28
    1c90:	08 95       	ret

00001c92 <mfrc522_version_check>:
	}
}
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29




void mfrc522_version_check(unsigned char ch){
    1c96:	d8 2f       	mov	r29, r24
	
	unsigned char byte;
	
	byte = mfrc522_read(VersionReg, ch);
    1c98:	68 2f       	mov	r22, r24
    1c9a:	87 e3       	ldi	r24, 0x37	; 55
    1c9c:	7c de       	rcall	.-776    	; 0x1996 <mfrc522_read>
    1c9e:	c8 2f       	mov	r28, r24
    1ca0:	2f ef       	ldi	r18, 0xFF	; 255
    1ca2:	89 ef       	ldi	r24, 0xF9	; 249
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	21 50       	subi	r18, 0x01	; 1
    1ca8:	80 40       	sbci	r24, 0x00	; 0
    1caa:	90 40       	sbci	r25, 0x00	; 0
    1cac:	e1 f7       	brne	.-8      	; 0x1ca6 <mfrc522_version_check+0x14>
    1cae:	00 c0       	rjmp	.+0      	; 0x1cb0 <mfrc522_version_check+0x1e>
    1cb0:	00 00       	nop
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
    1cb2:	d1 11       	cpse	r29, r1
    1cb4:	06 c0       	rjmp	.+12     	; 0x1cc2 <mfrc522_version_check+0x30>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	6d d1       	rcall	.+730    	; 0x1f96 <uart0_tx_string>
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
    1cbc:	c2 39       	cpi	r28, 0x92	; 146
    1cbe:	59 f5       	brne	.+86     	; 0x1d16 <mfrc522_version_check+0x84>
    1cc0:	0f c0       	rjmp	.+30     	; 0x1ce0 <mfrc522_version_check+0x4e>
	byte = mfrc522_read(VersionReg, ch);
	//uart0_tx_string_IT(IntToString(byte));
	_delay_ms(20); //전송시 여유가 있어야 함...
	///
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
    1cc2:	8b e0       	ldi	r24, 0x0B	; 11
    1cc4:	94 e0       	ldi	r25, 0x04	; 4
    1cc6:	67 d1       	rcall	.+718    	; 0x1f96 <uart0_tx_string>
	
	if(byte == 0x92)
    1cc8:	c2 39       	cpi	r28, 0x92	; 146
    1cca:	91 f5       	brne	.+100    	; 0x1d30 <mfrc522_version_check+0x9e>
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
	}else
	{
		uart0_tx_string(" No reader found]\n");
    1ccc:	12 c0       	rjmp	.+36     	; 0x1cf2 <mfrc522_version_check+0x60>
    1cce:	87 e1       	ldi	r24, 0x17	; 23
    1cd0:	94 e0       	ldi	r25, 0x04	; 4
    1cd2:	61 d1       	rcall	.+706    	; 0x1f96 <uart0_tx_string>
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
    1cd4:	4a e2       	ldi	r20, 0x2A	; 42
    1cd6:	54 e0       	ldi	r21, 0x04	; 4
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	82 e0       	ldi	r24, 0x02	; 2
    1cdc:	9f dd       	rcall	.-1218   	; 0x181c <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1cde:	ff cf       	rjmp	.-2      	; 0x1cde <mfrc522_version_check+0x4c>
    1ce0:	8e e3       	ldi	r24, 0x3E	; 62
    1ce2:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1ce4:	58 d1       	rcall	.+688    	; 0x1f96 <uart0_tx_string>
    1ce6:	42 e6       	ldi	r20, 0x62	; 98
    1ce8:	54 e0       	ldi	r21, 0x04	; 4
    1cea:	60 e0       	ldi	r22, 0x00	; 0
    1cec:	82 e0       	ldi	r24, 0x02	; 2
    1cee:	96 dd       	rcall	.-1236   	; 0x181c <i2c_lcd_string>
	if(ch==CH0)uart0_tx_string("\n[channel 0");
	else uart0_tx_string("\n[channel 1");
	
	if(byte == 0x92)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
    1cf0:	23 c0       	rjmp	.+70     	; 0x1d38 <mfrc522_version_check+0xa6>
    1cf2:	8e e3       	ldi	r24, 0x3E	; 62
    1cf4:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1cf6:	4f d1       	rcall	.+670    	; 0x1f96 <uart0_tx_string>
    1cf8:	47 e7       	ldi	r20, 0x77	; 119
    1cfa:	54 e0       	ldi	r21, 0x04	; 4
    1cfc:	60 e0       	ldi	r22, 0x00	; 0
    1cfe:	82 e0       	ldi	r24, 0x02	; 2
		
	}else if(byte == 0x91 || byte==0x90)
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1d00:	8d dd       	rcall	.-1254   	; 0x181c <i2c_lcd_string>
    1d02:	1a c0       	rjmp	.+52     	; 0x1d38 <mfrc522_version_check+0xa6>
    1d04:	8c e8       	ldi	r24, 0x8C	; 140
    1d06:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
    1d08:	46 d1       	rcall	.+652    	; 0x1f96 <uart0_tx_string>
    1d0a:	42 e6       	ldi	r20, 0x62	; 98
    1d0c:	54 e0       	ldi	r21, 0x04	; 4
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	84 dd       	rcall	.-1272   	; 0x181c <i2c_lcd_string>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1d14:	11 c0       	rjmp	.+34     	; 0x1d38 <mfrc522_version_check+0xa6>
    1d16:	c0 59       	subi	r28, 0x90	; 144
    1d18:	c2 30       	cpi	r28, 0x02	; 2
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v1\n");
    1d1a:	c8 f6       	brcc	.-78     	; 0x1cce <mfrc522_version_check+0x3c>
    1d1c:	f3 cf       	rjmp	.-26     	; 0x1d04 <mfrc522_version_check+0x72>
    1d1e:	8c e8       	ldi	r24, 0x8C	; 140
    1d20:	94 e0       	ldi	r25, 0x04	; 4
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
    1d22:	39 d1       	rcall	.+626    	; 0x1f96 <uart0_tx_string>
    1d24:	47 e7       	ldi	r20, 0x77	; 119
    1d26:	54 e0       	ldi	r21, 0x04	; 4
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	82 e0       	ldi	r24, 0x02	; 2
    1d2c:	77 dd       	rcall	.-1298   	; 0x181c <i2c_lcd_string>
    1d2e:	04 c0       	rjmp	.+8      	; 0x1d38 <mfrc522_version_check+0xa6>
	{
		uart0_tx_string(" Detected Version]: MIFARE RC522v2\n");
		if(ch==CH0) i2c_lcd_string(2,0,"     O_________     ");
		else i2c_lcd_string(2,0,"     OO________     ");
		
	}else if(byte == 0x91 || byte==0x90)
    1d30:	c0 59       	subi	r28, 0x90	; 144
    1d32:	c2 30       	cpi	r28, 0x02	; 2
    1d34:	60 f6       	brcc	.-104    	; 0x1cce <mfrc522_version_check+0x3c>
    1d36:	f3 cf       	rjmp	.-26     	; 0x1d1e <mfrc522_version_check+0x8c>
		uart0_tx_string(" No reader found]\n");
		i2c_lcd_string(2,0,"Error, Plz CHK RFID");
		while(1);
	}
	
}
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	08 95       	ret

00001d3e <mfrc522_IRQ_enable>:

void mfrc522_IRQ_enable(unsigned char ch)
{
    1d3e:	cf 93       	push	r28
    1d40:	c8 2f       	mov	r28, r24
	unsigned char byte;
	
	byte=mfrc522_read(ComIEnReg, ch);
    1d42:	68 2f       	mov	r22, r24
    1d44:	82 e0       	ldi	r24, 0x02	; 2
    1d46:	27 de       	rcall	.-946    	; 0x1996 <mfrc522_read>
	mfrc522_write(ComIEnReg,byte|0x20, ch); //RxInterrupt Enable
    1d48:	68 2f       	mov	r22, r24
    1d4a:	60 62       	ori	r22, 0x20	; 32
    1d4c:	4c 2f       	mov	r20, r28
    1d4e:	82 e0       	ldi	r24, 0x02	; 2
    1d50:	06 de       	rcall	.-1012   	; 0x195e <mfrc522_write>
	byte=mfrc522_read(DivIEnReg, ch);
    1d52:	6c 2f       	mov	r22, r28
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	1f de       	rcall	.-962    	; 0x1996 <mfrc522_read>
	mfrc522_write(DivIEnReg,byte|0x80, ch); //IRQPushPull
    1d58:	68 2f       	mov	r22, r24
    1d5a:	60 68       	ori	r22, 0x80	; 128
    1d5c:	4c 2f       	mov	r20, r28
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	fe dd       	rcall	.-1028   	; 0x195e <mfrc522_write>
}
    1d62:	cf 91       	pop	r28
    1d64:	08 95       	ret

00001d66 <mfrc522_request>:


unsigned char mfrc522_request(unsigned char req_mode, unsigned char * tag_type, unsigned char ch)
{
    1d66:	cf 92       	push	r12
    1d68:	df 92       	push	r13
    1d6a:	ef 92       	push	r14
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <mfrc522_request+0x10>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <mfrc522_request+0x12>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	18 2f       	mov	r17, r24
    1d7e:	6b 01       	movw	r12, r22
    1d80:	e4 2e       	mov	r14, r20
	uint8_t  status;
	uint32_t backBits;//The received data bits

	//Adjustments for bit-oriented frames.
	mfrc522_write(BitFramingReg, 0x07, ch);//TxLastBists = BitFramingReg[2..0]	???
    1d82:	67 e0       	ldi	r22, 0x07	; 7
    1d84:	8d e0       	ldi	r24, 0x0D	; 13
    1d86:	eb dd       	rcall	.-1066   	; 0x195e <mfrc522_write>
	
	tag_type[0] = req_mode;
    1d88:	f6 01       	movw	r30, r12
    1d8a:	10 83       	st	Z, r17
	status = mfrc522_to_card(MFRC522_CMD_Transceive, tag_type, 1, tag_type, &backBits, ch);
    1d8c:	8e 01       	movw	r16, r28
    1d8e:	0f 5f       	subi	r16, 0xFF	; 255
    1d90:	1f 4f       	sbci	r17, 0xFF	; 255
    1d92:	96 01       	movw	r18, r12
    1d94:	41 e0       	ldi	r20, 0x01	; 1
    1d96:	b6 01       	movw	r22, r12
    1d98:	8c e0       	ldi	r24, 0x0C	; 12
    1d9a:	16 de       	rcall	.-980    	; 0x19c8 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
    1d9c:	81 30       	cpi	r24, 0x01	; 1
    1d9e:	59 f4       	brne	.+22     	; 0x1db6 <mfrc522_request+0x50>
    1da0:	49 81       	ldd	r20, Y+1	; 0x01
    1da2:	5a 81       	ldd	r21, Y+2	; 0x02
    1da4:	6b 81       	ldd	r22, Y+3	; 0x03
    1da6:	7c 81       	ldd	r23, Y+4	; 0x04
    1da8:	40 31       	cpi	r20, 0x10	; 16
    1daa:	51 05       	cpc	r21, r1
    1dac:	61 05       	cpc	r22, r1
    1dae:	71 05       	cpc	r23, r1
    1db0:	19 f0       	breq	.+6      	; 0x1db8 <mfrc522_request+0x52>
	{
		status = ERROR;
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <mfrc522_request+0x52>
    1db6:	83 e0       	ldi	r24, 0x03	; 3
	}
	
	return status;
}
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	0f 90       	pop	r0
    1dc0:	df 91       	pop	r29
    1dc2:	cf 91       	pop	r28
    1dc4:	1f 91       	pop	r17
    1dc6:	0f 91       	pop	r16
    1dc8:	ef 90       	pop	r14
    1dca:	df 90       	pop	r13
    1dcc:	cf 90       	pop	r12
    1dce:	08 95       	ret

00001dd0 <mfrc522_get_card_serial>:



unsigned char mfrc522_get_card_serial(unsigned char * serial_out, unsigned char ch)
{
    1dd0:	cf 92       	push	r12
    1dd2:	df 92       	push	r13
    1dd4:	ef 92       	push	r14
    1dd6:	0f 93       	push	r16
    1dd8:	1f 93       	push	r17
    1dda:	cf 93       	push	r28
    1ddc:	df 93       	push	r29
    1dde:	00 d0       	rcall	.+0      	; 0x1de0 <mfrc522_get_card_serial+0x10>
    1de0:	00 d0       	rcall	.+0      	; 0x1de2 <mfrc522_get_card_serial+0x12>
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	6c 01       	movw	r12, r24
    1de8:	e6 2e       	mov	r14, r22
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
	uint32_t unLen;
	
	mfrc522_write(BitFramingReg, 0x00,ch);		//TxLastBists = BitFramingReg[2..0]
    1dea:	46 2f       	mov	r20, r22
    1dec:	60 e0       	ldi	r22, 0x00	; 0
    1dee:	8d e0       	ldi	r24, 0x0D	; 13
    1df0:	b6 dd       	rcall	.-1172   	; 0x195e <mfrc522_write>
	
	serial_out[0] = PICC_ANTICOLL;
    1df2:	83 e9       	ldi	r24, 0x93	; 147
    1df4:	f6 01       	movw	r30, r12
    1df6:	80 83       	st	Z, r24
	serial_out[1] = 0x20;
    1df8:	80 e2       	ldi	r24, 0x20	; 32
    1dfa:	81 83       	std	Z+1, r24	; 0x01
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);
    1dfc:	8e 01       	movw	r16, r28
    1dfe:	0f 5f       	subi	r16, 0xFF	; 255
    1e00:	1f 4f       	sbci	r17, 0xFF	; 255
    1e02:	96 01       	movw	r18, r12
    1e04:	42 e0       	ldi	r20, 0x02	; 2
    1e06:	b6 01       	movw	r22, r12
    1e08:	8c e0       	ldi	r24, 0x0C	; 12
    1e0a:	de dd       	rcall	.-1092   	; 0x19c8 <mfrc522_to_card>

	if (status == CARD_FOUND)
    1e0c:	81 30       	cpi	r24, 0x01	; 1
    1e0e:	71 f4       	brne	.+28     	; 0x1e2c <mfrc522_get_card_serial+0x5c>
    1e10:	f6 01       	movw	r30, r12
    1e12:	a6 01       	movw	r20, r12
    1e14:	4c 5f       	subi	r20, 0xFC	; 252
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{
			serNumCheck ^= serial_out[i];
    1e1a:	21 91       	ld	r18, Z+
    1e1c:	92 27       	eor	r25, r18
	status = mfrc522_to_card(MFRC522_CMD_Transceive, serial_out, 2, serial_out, &unLen,ch);

	if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
    1e1e:	4e 17       	cp	r20, r30
    1e20:	5f 07       	cpc	r21, r31
    1e22:	d9 f7       	brne	.-10     	; 0x1e1a <mfrc522_get_card_serial+0x4a>
		{
			serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
    1e24:	f6 01       	movw	r30, r12
    1e26:	24 81       	ldd	r18, Z+4	; 0x04
    1e28:	92 13       	cpse	r25, r18
		{
			status = ERROR;
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
	return status;
}
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	0f 90       	pop	r0
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ef 90       	pop	r14
    1e3e:	df 90       	pop	r13
    1e40:	cf 90       	pop	r12
    1e42:	08 95       	ret

00001e44 <spi_init>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <spi_init+0x6>
    1e4a:	1f 92       	push	r1
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	88 85       	ldd	r24, Y+8	; 0x08
    1e52:	83 30       	cpi	r24, 0x03	; 3
    1e54:	21 f1       	breq	.+72     	; 0x1e9e <spi_init+0x5a>
    1e56:	81 11       	cpse	r24, r1
    1e58:	32 c0       	rjmp	.+100    	; 0x1ebe <spi_init+0x7a>
    1e5a:	29 c0       	rjmp	.+82     	; 0x1eae <spi_init+0x6a>
    1e5c:	9c 91       	ld	r25, X
    1e5e:	12 96       	adiw	r26, 0x02	; 2
    1e60:	91 93       	st	Z+, r25
    1e62:	e2 17       	cp	r30, r18
    1e64:	f3 07       	cpc	r31, r19
    1e66:	d1 f7       	brne	.-12     	; 0x1e5c <spi_init+0x18>
    1e68:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6a:	92 30       	cpi	r25, 0x02	; 2
    1e6c:	20 f1       	brcs	.+72     	; 0x1eb6 <spi_init+0x72>
    1e6e:	1b 82       	std	Y+3, r1	; 0x03
    1e70:	1d b8       	out	0x0d, r1	; 13
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	71 f4       	brne	.+28     	; 0x1e92 <spi_init+0x4e>
    1e76:	c0 9a       	sbi	0x18, 0	; 24
    1e78:	87 b3       	in	r24, 0x17	; 23
    1e7a:	87 60       	ori	r24, 0x07	; 7
    1e7c:	87 bb       	out	0x17, r24	; 23
    1e7e:	99 81       	ldd	r25, Y+1	; 0x01
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	89 2b       	or	r24, r25
    1e84:	80 65       	ori	r24, 0x50	; 80
    1e86:	2e b1       	in	r18, 0x0e	; 14
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	92 2b       	or	r25, r18
    1e8c:	9e b9       	out	0x0e, r25	; 14
    1e8e:	8d b9       	out	0x0d, r24	; 13
    1e90:	16 c0       	rjmp	.+44     	; 0x1ebe <spi_init+0x7a>
    1e92:	81 11       	cpse	r24, r1
    1e94:	14 c0       	rjmp	.+40     	; 0x1ebe <spi_init+0x7a>
    1e96:	bb 9a       	sbi	0x17, 3	; 23
    1e98:	80 e4       	ldi	r24, 0x40	; 64
    1e9a:	8d b9       	out	0x0d, r24	; 13
    1e9c:	10 c0       	rjmp	.+32     	; 0x1ebe <spi_init+0x7a>
    1e9e:	de 01       	movw	r26, r28
    1ea0:	19 96       	adiw	r26, 0x09	; 9
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	31 96       	adiw	r30, 0x01	; 1
    1ea6:	9e 01       	movw	r18, r28
    1ea8:	2c 5f       	subi	r18, 0xFC	; 252
    1eaa:	3f 4f       	sbci	r19, 0xFF	; 255
    1eac:	d7 cf       	rjmp	.-82     	; 0x1e5c <spi_init+0x18>
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	92 30       	cpi	r25, 0x02	; 2
    1eb2:	e8 f6       	brcc	.-70     	; 0x1e6e <spi_init+0x2a>
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <spi_init+0x76>
    1eb6:	1d b8       	out	0x0d, r1	; 13
    1eb8:	de cf       	rjmp	.-68     	; 0x1e76 <spi_init+0x32>
    1eba:	1d b8       	out	0x0d, r1	; 13
    1ebc:	ec cf       	rjmp	.-40     	; 0x1e96 <spi_init+0x52>
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	08 95       	ret

00001eca <spi_master_tx>:
    1eca:	8f b9       	out	0x0f, r24	; 15
    1ecc:	77 9b       	sbis	0x0e, 7	; 14
    1ece:	fe cf       	rjmp	.-4      	; 0x1ecc <spi_master_tx+0x2>
    1ed0:	08 95       	ret

00001ed2 <spi_master_rx>:
    1ed2:	1f b8       	out	0x0f, r1	; 15
    1ed4:	77 9b       	sbis	0x0e, 7	; 14
    1ed6:	fe cf       	rjmp	.-4      	; 0x1ed4 <spi_master_rx+0x2>
    1ed8:	8f b1       	in	r24, 0x0f	; 15
    1eda:	08 95       	ret

00001edc <timer0_init>:
}

void setOCR3C(int num)
{
	OCR3CH = (unsigned char)(num>>8);
	OCR3CL = (unsigned char)(num&0xff);
    1edc:	bc 9a       	sbi	0x17, 4	; 23
    1ede:	8c e0       	ldi	r24, 0x0C	; 12
    1ee0:	83 bf       	out	0x33, r24	; 51
    1ee2:	8a ef       	ldi	r24, 0xFA	; 250
    1ee4:	81 bf       	out	0x31, r24	; 49
    1ee6:	87 b7       	in	r24, 0x37	; 55
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	87 bf       	out	0x37, r24	; 55
    1eec:	08 95       	ret

00001eee <timer1_init>:
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	8f bd       	out	0x2f, r24	; 47
    1ef2:	8a e1       	ldi	r24, 0x1A	; 26
    1ef4:	8e bd       	out	0x2e, r24	; 46
    1ef6:	1d bc       	out	0x2d, r1	; 45
    1ef8:	1c bc       	out	0x2c, r1	; 44
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	87 bd       	out	0x27, r24	; 39
    1efe:	8f e8       	ldi	r24, 0x8F	; 143
    1f00:	86 bd       	out	0x26, r24	; 38
    1f02:	87 b7       	in	r24, 0x37	; 55
    1f04:	84 60       	ori	r24, 0x04	; 4
    1f06:	87 bf       	out	0x37, r24	; 55
    1f08:	08 95       	ret

00001f0a <timer3_init>:
    1f0a:	13 9a       	sbi	0x02, 3	; 2
    1f0c:	80 e4       	ldi	r24, 0x40	; 64
    1f0e:	80 93 8b 00 	sts	0x008B, r24	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    1f12:	8a e1       	ldi	r24, 0x1A	; 26
    1f14:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    1f18:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1f1c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1f20:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    1f24:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f28:	08 95       	ret

00001f2a <setICR3>:
{
	//high write first
	/**8MHz의 경우*/
	//num=(int)(num*0.5);
	
	ICR3H = (unsigned char)(num>>8);
    1f2a:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	ICR3L = (unsigned char)(num&0xff);
    1f2e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    1f32:	08 95       	ret

00001f34 <uart_init>:
	
	uart1.tx1Cnt=1;
	uart1.tx1CntMax=_len+1;
	UCSR1B |= (1<<TXCIE1);
	
}
    1f34:	cf 93       	push	r28
    1f36:	df 93       	push	r29
    1f38:	ec 01       	movw	r28, r24
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	40 e0       	ldi	r20, 0x00	; 0
    1f3e:	50 e0       	ldi	r21, 0x00	; 0
    1f40:	60 e4       	ldi	r22, 0x40	; 64
    1f42:	72 e4       	ldi	r23, 0x42	; 66
    1f44:	8f e0       	ldi	r24, 0x0F	; 15
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	4f d1       	rcall	.+670    	; 0x21e8 <__udivmodsi4>
    1f4a:	21 50       	subi	r18, 0x01	; 1
    1f4c:	31 09       	sbc	r19, r1
    1f4e:	20 97       	sbiw	r28, 0x00	; 0
    1f50:	59 f4       	brne	.+22     	; 0x1f68 <uart_init+0x34>
    1f52:	10 98       	cbi	0x02, 0	; 2
    1f54:	30 93 90 00 	sts	0x0090, r19	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1f58:	29 b9       	out	0x09, r18	; 9
    1f5a:	88 e1       	ldi	r24, 0x18	; 24
    1f5c:	8a b9       	out	0x0a, r24	; 10
    1f5e:	57 9a       	sbi	0x0a, 7	; 10
    1f60:	86 e0       	ldi	r24, 0x06	; 6
    1f62:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
    1f66:	10 c0       	rjmp	.+32     	; 0x1f88 <uart_init+0x54>
    1f68:	21 97       	sbiw	r28, 0x01	; 1
    1f6a:	71 f4       	brne	.+28     	; 0x1f88 <uart_init+0x54>
    1f6c:	30 93 98 00 	sts	0x0098, r19	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1f70:	20 93 99 00 	sts	0x0099, r18	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1f74:	ea e9       	ldi	r30, 0x9A	; 154
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	88 e1       	ldi	r24, 0x18	; 24
    1f7a:	80 83       	st	Z, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	80 83       	st	Z, r24
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
    1f88:	df 91       	pop	r29
    1f8a:	cf 91       	pop	r28
    1f8c:	08 95       	ret

00001f8e <uart0_tx_char>:
    1f8e:	5d 9b       	sbis	0x0b, 5	; 11
    1f90:	fe cf       	rjmp	.-4      	; 0x1f8e <uart0_tx_char>
    1f92:	8c b9       	out	0x0c, r24	; 12
    1f94:	08 95       	ret

00001f96 <uart0_tx_string>:
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	ec 01       	movw	r28, r24
    1f9c:	88 81       	ld	r24, Y
    1f9e:	88 23       	and	r24, r24
    1fa0:	29 f0       	breq	.+10     	; 0x1fac <uart0_tx_string+0x16>
    1fa2:	21 96       	adiw	r28, 0x01	; 1
    1fa4:	f4 df       	rcall	.-24     	; 0x1f8e <uart0_tx_char>
    1fa6:	89 91       	ld	r24, Y+
    1fa8:	81 11       	cpse	r24, r1
    1faa:	fc cf       	rjmp	.-8      	; 0x1fa4 <uart0_tx_string+0xe>
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <uart1_tx_char>:
    1fb2:	eb e9       	ldi	r30, 0x9B	; 155
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	90 81       	ld	r25, Z
    1fb8:	95 ff       	sbrs	r25, 5
    1fba:	fd cf       	rjmp	.-6      	; 0x1fb6 <uart1_tx_char+0x4>
    1fbc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
    1fc0:	08 95       	ret

00001fc2 <uart1_tx_string>:
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	88 81       	ld	r24, Y
    1fca:	88 23       	and	r24, r24
    1fcc:	29 f0       	breq	.+10     	; 0x1fd8 <uart1_tx_string+0x16>
    1fce:	21 96       	adiw	r28, 0x01	; 1
    1fd0:	f0 df       	rcall	.-32     	; 0x1fb2 <uart1_tx_char>
    1fd2:	89 91       	ld	r24, Y+
    1fd4:	81 11       	cpse	r24, r1
    1fd6:	fc cf       	rjmp	.-8      	; 0x1fd0 <uart1_tx_string+0xe>
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <IntToString>:

char * IntToString(int num)
{
    1fde:	0f 93       	push	r16
    1fe0:	1f 93       	push	r17
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	cd b7       	in	r28, 0x3d	; 61
    1fe8:	de b7       	in	r29, 0x3e	; 62
    1fea:	64 97       	sbiw	r28, 0x14	; 20
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	de bf       	out	0x3e, r29	; 62
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	cd bf       	out	0x3d, r28	; 61
	/** Dummy Function*/
	char buf[20];
	sprintf(buf,"%02d",num); //고유 자릿값
    1ff6:	9f 93       	push	r25
    1ff8:	8f 93       	push	r24
    1ffa:	80 eb       	ldi	r24, 0xB0	; 176
    1ffc:	94 e0       	ldi	r25, 0x04	; 4
    1ffe:	9f 93       	push	r25
    2000:	8f 93       	push	r24
    2002:	8e 01       	movw	r16, r28
    2004:	0f 5f       	subi	r16, 0xFF	; 255
    2006:	1f 4f       	sbci	r17, 0xFF	; 255
    2008:	1f 93       	push	r17
    200a:	0f 93       	push	r16
    200c:	4f d1       	rcall	.+670    	; 0x22ac <sprintf>
	//memset(buff.itos_buff,1,sizeof(buff.itos_buff));
	strcpy(buff.itos_buff,buf);
    200e:	b8 01       	movw	r22, r16
    2010:	80 ec       	ldi	r24, 0xC0	; 192
    2012:	96 e0       	ldi	r25, 0x06	; 6
    2014:	3c d1       	rcall	.+632    	; 0x228e <strcpy>
	
	return (buff.itos_buff);
    2016:	0f 90       	pop	r0
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
}
    2022:	80 ec       	ldi	r24, 0xC0	; 192
    2024:	96 e0       	ldi	r25, 0x06	; 6
    2026:	64 96       	adiw	r28, 0x14	; 20
    2028:	0f b6       	in	r0, 0x3f	; 63
    202a:	f8 94       	cli
    202c:	de bf       	out	0x3e, r29	; 62
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	cd bf       	out	0x3d, r28	; 61
    2032:	df 91       	pop	r29
    2034:	cf 91       	pop	r28
    2036:	1f 91       	pop	r17
    2038:	0f 91       	pop	r16
    203a:	08 95       	ret

0000203c <HexToString>:
 
 char * HexToString(char num)
 {
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	64 97       	sbiw	r28, 0x14	; 20
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
	 /** Dummy Function*/
	 char buf[20];
	 sprintf(buf,"%02X",num); //고유 자릿값
    2054:	1f 92       	push	r1
    2056:	8f 93       	push	r24
    2058:	85 eb       	ldi	r24, 0xB5	; 181
    205a:	94 e0       	ldi	r25, 0x04	; 4
    205c:	9f 93       	push	r25
    205e:	8f 93       	push	r24
    2060:	8e 01       	movw	r16, r28
    2062:	0f 5f       	subi	r16, 0xFF	; 255
    2064:	1f 4f       	sbci	r17, 0xFF	; 255
    2066:	1f 93       	push	r17
    2068:	0f 93       	push	r16
    206a:	20 d1       	rcall	.+576    	; 0x22ac <sprintf>
	 
	 strcpy(buff.itos_buff,buf);
    206c:	b8 01       	movw	r22, r16
    206e:	80 ec       	ldi	r24, 0xC0	; 192
    2070:	96 e0       	ldi	r25, 0x06	; 6
    2072:	0d d1       	rcall	.+538    	; 0x228e <strcpy>
	 
	 return (buff.itos_buff);
    2074:	0f 90       	pop	r0
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
 }
    2080:	80 ec       	ldi	r24, 0xC0	; 192
    2082:	96 e0       	ldi	r25, 0x06	; 6
    2084:	64 96       	adiw	r28, 0x14	; 20
    2086:	0f b6       	in	r0, 0x3f	; 63
    2088:	f8 94       	cli
    208a:	de bf       	out	0x3e, r29	; 62
    208c:	0f be       	out	0x3f, r0	; 63
    208e:	cd bf       	out	0x3d, r28	; 61
    2090:	df 91       	pop	r29
    2092:	cf 91       	pop	r28
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	08 95       	ret

0000209a <connect_to_AP>:
 
 
 
char* connect_to_AP(char * cmd,char *ssid,char*password){
    209a:	cf 92       	push	r12
    209c:	df 92       	push	r13
    209e:	ef 92       	push	r14
    20a0:	ff 92       	push	r15
    20a2:	0f 93       	push	r16
    20a4:	1f 93       	push	r17
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	c0 54       	subi	r28, 0x40	; 64
    20b0:	d1 09       	sbc	r29, r1
    20b2:	0f b6       	in	r0, 0x3f	; 63
    20b4:	f8 94       	cli
    20b6:	de bf       	out	0x3e, r29	; 62
    20b8:	0f be       	out	0x3f, r0	; 63
    20ba:	cd bf       	out	0x3d, r28	; 61
    20bc:	6b 01       	movw	r12, r22
    20be:	7a 01       	movw	r14, r20
	//문자열 변수 ?
	//"AT+CWJAP=\""
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    20c0:	20 e4       	ldi	r18, 0x40	; 64
    20c2:	e0 e0       	ldi	r30, 0x00	; 0
    20c4:	f7 e0       	ldi	r31, 0x07	; 7
    20c6:	df 01       	movw	r26, r30
    20c8:	1d 92       	st	X+, r1
    20ca:	2a 95       	dec	r18
    20cc:	e9 f7       	brne	.-6      	; 0x20c8 <connect_to_AP+0x2e>
	
	strcpy(buf,cmd);//"AT+CWJAP=\""
    20ce:	bc 01       	movw	r22, r24
    20d0:	8e 01       	movw	r16, r28
    20d2:	0f 5f       	subi	r16, 0xFF	; 255
    20d4:	1f 4f       	sbci	r17, 0xFF	; 255
    20d6:	c8 01       	movw	r24, r16
    20d8:	da d0       	rcall	.+436    	; 0x228e <strcpy>
	strcat(buf,ssid);
    20da:	b6 01       	movw	r22, r12
    20dc:	c8 01       	movw	r24, r16
    20de:	c3 d0       	rcall	.+390    	; 0x2266 <strcat>
	strcat(buf,"\",\"");
    20e0:	f8 01       	movw	r30, r16
    20e2:	01 90       	ld	r0, Z+
    20e4:	00 20       	and	r0, r0
    20e6:	e9 f7       	brne	.-6      	; 0x20e2 <connect_to_AP+0x48>
    20e8:	31 97       	sbiw	r30, 0x01	; 1
    20ea:	82 e2       	ldi	r24, 0x22	; 34
    20ec:	9c e2       	ldi	r25, 0x2C	; 44
    20ee:	91 83       	std	Z+1, r25	; 0x01
    20f0:	80 83       	st	Z, r24
    20f2:	82 e2       	ldi	r24, 0x22	; 34
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	93 83       	std	Z+3, r25	; 0x03
    20f8:	82 83       	std	Z+2, r24	; 0x02
	strcat(buf,password);
    20fa:	b7 01       	movw	r22, r14
    20fc:	c8 01       	movw	r24, r16
    20fe:	b3 d0       	rcall	.+358    	; 0x2266 <strcat>
	strcat(buf,"\"\r\n");
    2100:	f8 01       	movw	r30, r16
    2102:	01 90       	ld	r0, Z+
    2104:	00 20       	and	r0, r0
    2106:	e9 f7       	brne	.-6      	; 0x2102 <connect_to_AP+0x68>
    2108:	31 97       	sbiw	r30, 0x01	; 1
    210a:	82 e2       	ldi	r24, 0x22	; 34
    210c:	9d e0       	ldi	r25, 0x0D	; 13
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
    2112:	8a e0       	ldi	r24, 0x0A	; 10
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	93 83       	std	Z+3, r25	; 0x03
    2118:	82 83       	std	Z+2, r24	; 0x02
	strcpy(buff.esp_buff,buf);
    211a:	b8 01       	movw	r22, r16
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	97 e0       	ldi	r25, 0x07	; 7
    2120:	b6 d0       	rcall	.+364    	; 0x228e <strcpy>
	return buff.esp_buff;
	
}
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	97 e0       	ldi	r25, 0x07	; 7
    2126:	c0 5c       	subi	r28, 0xC0	; 192
    2128:	df 4f       	sbci	r29, 0xFF	; 255
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	f8 94       	cli
    212e:	de bf       	out	0x3e, r29	; 62
    2130:	0f be       	out	0x3f, r0	; 63
    2132:	cd bf       	out	0x3d, r28	; 61
    2134:	df 91       	pop	r29
    2136:	cf 91       	pop	r28
    2138:	1f 91       	pop	r17
    213a:	0f 91       	pop	r16
    213c:	ff 90       	pop	r15
    213e:	ef 90       	pop	r14
    2140:	df 90       	pop	r13
    2142:	cf 90       	pop	r12
    2144:	08 95       	ret

00002146 <TCP_connect>:

char* TCP_connect(char * ip, char* port)
{//uart1_tx_string("AT+CIPSTART=\"TCP\",\"172.20.10.3\",23\r\n"); //성공시 OK\r\n Linked  데이터 들어옴
    2146:	ef 92       	push	r14
    2148:	ff 92       	push	r15
    214a:	0f 93       	push	r16
    214c:	1f 93       	push	r17
    214e:	cf 93       	push	r28
    2150:	df 93       	push	r29
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	c0 54       	subi	r28, 0x40	; 64
    2158:	d1 09       	sbc	r29, r1
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	9c 01       	movw	r18, r24
    2166:	7b 01       	movw	r14, r22
	char buf[64];
	memset(buff.esp_buff,0,sizeof(buff.esp_buff));
    2168:	80 e4       	ldi	r24, 0x40	; 64
    216a:	e0 e0       	ldi	r30, 0x00	; 0
    216c:	f7 e0       	ldi	r31, 0x07	; 7
    216e:	df 01       	movw	r26, r30
    2170:	1d 92       	st	X+, r1
    2172:	8a 95       	dec	r24
    2174:	e9 f7       	brne	.-6      	; 0x2170 <TCP_connect+0x2a>
		
	strcpy(buf,"AT+CIPSTART=\"TCP\",\"");
    2176:	94 e1       	ldi	r25, 0x14	; 20
    2178:	ea eb       	ldi	r30, 0xBA	; 186
    217a:	f4 e0       	ldi	r31, 0x04	; 4
    217c:	8e 01       	movw	r16, r28
    217e:	0f 5f       	subi	r16, 0xFF	; 255
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	d8 01       	movw	r26, r16
    2184:	01 90       	ld	r0, Z+
    2186:	0d 92       	st	X+, r0
    2188:	9a 95       	dec	r25
    218a:	e1 f7       	brne	.-8      	; 0x2184 <TCP_connect+0x3e>
	strcat(buf,ip);
    218c:	b9 01       	movw	r22, r18
    218e:	c8 01       	movw	r24, r16
    2190:	6a d0       	rcall	.+212    	; 0x2266 <strcat>
	strcat(buf,"\",");
    2192:	f8 01       	movw	r30, r16
    2194:	01 90       	ld	r0, Z+
    2196:	00 20       	and	r0, r0
    2198:	e9 f7       	brne	.-6      	; 0x2194 <TCP_connect+0x4e>
    219a:	31 97       	sbiw	r30, 0x01	; 1
    219c:	82 e2       	ldi	r24, 0x22	; 34
    219e:	9c e2       	ldi	r25, 0x2C	; 44
    21a0:	91 83       	std	Z+1, r25	; 0x01
    21a2:	80 83       	st	Z, r24
    21a4:	12 82       	std	Z+2, r1	; 0x02
	strcat(buf,port);
    21a6:	b7 01       	movw	r22, r14
    21a8:	c8 01       	movw	r24, r16
    21aa:	5d d0       	rcall	.+186    	; 0x2266 <strcat>
	strcat(buf,"\r\n");
    21ac:	f8 01       	movw	r30, r16
    21ae:	01 90       	ld	r0, Z+
    21b0:	00 20       	and	r0, r0
    21b2:	e9 f7       	brne	.-6      	; 0x21ae <TCP_connect+0x68>
    21b4:	31 97       	sbiw	r30, 0x01	; 1
    21b6:	8d e0       	ldi	r24, 0x0D	; 13
    21b8:	9a e0       	ldi	r25, 0x0A	; 10
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	12 82       	std	Z+2, r1	; 0x02
	strcpy(buff.esp_buff,buf);
    21c0:	b8 01       	movw	r22, r16
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	97 e0       	ldi	r25, 0x07	; 7
    21c6:	63 d0       	rcall	.+198    	; 0x228e <strcpy>
	
	return buff.esp_buff;
	
}
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	97 e0       	ldi	r25, 0x07	; 7
    21cc:	c0 5c       	subi	r28, 0xC0	; 192
    21ce:	df 4f       	sbci	r29, 0xFF	; 255
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	ff 90       	pop	r15
    21e4:	ef 90       	pop	r14
    21e6:	08 95       	ret

000021e8 <__udivmodsi4>:
    21e8:	a1 e2       	ldi	r26, 0x21	; 33
    21ea:	1a 2e       	mov	r1, r26
    21ec:	aa 1b       	sub	r26, r26
    21ee:	bb 1b       	sub	r27, r27
    21f0:	fd 01       	movw	r30, r26
    21f2:	0d c0       	rjmp	.+26     	; 0x220e <__udivmodsi4_ep>

000021f4 <__udivmodsi4_loop>:
    21f4:	aa 1f       	adc	r26, r26
    21f6:	bb 1f       	adc	r27, r27
    21f8:	ee 1f       	adc	r30, r30
    21fa:	ff 1f       	adc	r31, r31
    21fc:	a2 17       	cp	r26, r18
    21fe:	b3 07       	cpc	r27, r19
    2200:	e4 07       	cpc	r30, r20
    2202:	f5 07       	cpc	r31, r21
    2204:	20 f0       	brcs	.+8      	; 0x220e <__udivmodsi4_ep>
    2206:	a2 1b       	sub	r26, r18
    2208:	b3 0b       	sbc	r27, r19
    220a:	e4 0b       	sbc	r30, r20
    220c:	f5 0b       	sbc	r31, r21

0000220e <__udivmodsi4_ep>:
    220e:	66 1f       	adc	r22, r22
    2210:	77 1f       	adc	r23, r23
    2212:	88 1f       	adc	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	1a 94       	dec	r1
    2218:	69 f7       	brne	.-38     	; 0x21f4 <__udivmodsi4_loop>
    221a:	60 95       	com	r22
    221c:	70 95       	com	r23
    221e:	80 95       	com	r24
    2220:	90 95       	com	r25
    2222:	9b 01       	movw	r18, r22
    2224:	ac 01       	movw	r20, r24
    2226:	bd 01       	movw	r22, r26
    2228:	cf 01       	movw	r24, r30
    222a:	08 95       	ret

0000222c <atoi>:
    222c:	fc 01       	movw	r30, r24
    222e:	88 27       	eor	r24, r24
    2230:	99 27       	eor	r25, r25
    2232:	e8 94       	clt
    2234:	21 91       	ld	r18, Z+
    2236:	20 32       	cpi	r18, 0x20	; 32
    2238:	e9 f3       	breq	.-6      	; 0x2234 <atoi+0x8>
    223a:	29 30       	cpi	r18, 0x09	; 9
    223c:	10 f0       	brcs	.+4      	; 0x2242 <atoi+0x16>
    223e:	2e 30       	cpi	r18, 0x0E	; 14
    2240:	c8 f3       	brcs	.-14     	; 0x2234 <atoi+0x8>
    2242:	2b 32       	cpi	r18, 0x2B	; 43
    2244:	39 f0       	breq	.+14     	; 0x2254 <atoi+0x28>
    2246:	2d 32       	cpi	r18, 0x2D	; 45
    2248:	31 f4       	brne	.+12     	; 0x2256 <atoi+0x2a>
    224a:	68 94       	set
    224c:	03 c0       	rjmp	.+6      	; 0x2254 <atoi+0x28>
    224e:	26 d0       	rcall	.+76     	; 0x229c <__mulhi_const_10>
    2250:	82 0f       	add	r24, r18
    2252:	91 1d       	adc	r25, r1
    2254:	21 91       	ld	r18, Z+
    2256:	20 53       	subi	r18, 0x30	; 48
    2258:	2a 30       	cpi	r18, 0x0A	; 10
    225a:	c8 f3       	brcs	.-14     	; 0x224e <atoi+0x22>
    225c:	1e f4       	brtc	.+6      	; 0x2264 <atoi+0x38>
    225e:	90 95       	com	r25
    2260:	81 95       	neg	r24
    2262:	9f 4f       	sbci	r25, 0xFF	; 255
    2264:	08 95       	ret

00002266 <strcat>:
    2266:	fb 01       	movw	r30, r22
    2268:	dc 01       	movw	r26, r24
    226a:	0d 90       	ld	r0, X+
    226c:	00 20       	and	r0, r0
    226e:	e9 f7       	brne	.-6      	; 0x226a <strcat+0x4>
    2270:	11 97       	sbiw	r26, 0x01	; 1
    2272:	01 90       	ld	r0, Z+
    2274:	0d 92       	st	X+, r0
    2276:	00 20       	and	r0, r0
    2278:	e1 f7       	brne	.-8      	; 0x2272 <strcat+0xc>
    227a:	08 95       	ret

0000227c <strcmp>:
    227c:	fb 01       	movw	r30, r22
    227e:	dc 01       	movw	r26, r24
    2280:	8d 91       	ld	r24, X+
    2282:	01 90       	ld	r0, Z+
    2284:	80 19       	sub	r24, r0
    2286:	01 10       	cpse	r0, r1
    2288:	d9 f3       	breq	.-10     	; 0x2280 <strcmp+0x4>
    228a:	99 0b       	sbc	r25, r25
    228c:	08 95       	ret

0000228e <strcpy>:
    228e:	fb 01       	movw	r30, r22
    2290:	dc 01       	movw	r26, r24
    2292:	01 90       	ld	r0, Z+
    2294:	0d 92       	st	X+, r0
    2296:	00 20       	and	r0, r0
    2298:	e1 f7       	brne	.-8      	; 0x2292 <strcpy+0x4>
    229a:	08 95       	ret

0000229c <__mulhi_const_10>:
    229c:	7a e0       	ldi	r23, 0x0A	; 10
    229e:	97 9f       	mul	r25, r23
    22a0:	90 2d       	mov	r25, r0
    22a2:	87 9f       	mul	r24, r23
    22a4:	80 2d       	mov	r24, r0
    22a6:	91 0d       	add	r25, r1
    22a8:	11 24       	eor	r1, r1
    22aa:	08 95       	ret

000022ac <sprintf>:
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	2e 97       	sbiw	r28, 0x0e	; 14
    22ba:	0f b6       	in	r0, 0x3f	; 63
    22bc:	f8 94       	cli
    22be:	de bf       	out	0x3e, r29	; 62
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	cd bf       	out	0x3d, r28	; 61
    22c4:	0d 89       	ldd	r16, Y+21	; 0x15
    22c6:	1e 89       	ldd	r17, Y+22	; 0x16
    22c8:	86 e0       	ldi	r24, 0x06	; 6
    22ca:	8c 83       	std	Y+4, r24	; 0x04
    22cc:	1a 83       	std	Y+2, r17	; 0x02
    22ce:	09 83       	std	Y+1, r16	; 0x01
    22d0:	8f ef       	ldi	r24, 0xFF	; 255
    22d2:	9f e7       	ldi	r25, 0x7F	; 127
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	ae 01       	movw	r20, r28
    22da:	47 5e       	subi	r20, 0xE7	; 231
    22dc:	5f 4f       	sbci	r21, 0xFF	; 255
    22de:	6f 89       	ldd	r22, Y+23	; 0x17
    22e0:	78 8d       	ldd	r23, Y+24	; 0x18
    22e2:	ce 01       	movw	r24, r28
    22e4:	01 96       	adiw	r24, 0x01	; 1
    22e6:	10 d0       	rcall	.+32     	; 0x2308 <vfprintf>
    22e8:	ef 81       	ldd	r30, Y+7	; 0x07
    22ea:	f8 85       	ldd	r31, Y+8	; 0x08
    22ec:	e0 0f       	add	r30, r16
    22ee:	f1 1f       	adc	r31, r17
    22f0:	10 82       	st	Z, r1
    22f2:	2e 96       	adiw	r28, 0x0e	; 14
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	f8 94       	cli
    22f8:	de bf       	out	0x3e, r29	; 62
    22fa:	0f be       	out	0x3f, r0	; 63
    22fc:	cd bf       	out	0x3d, r28	; 61
    22fe:	df 91       	pop	r29
    2300:	cf 91       	pop	r28
    2302:	1f 91       	pop	r17
    2304:	0f 91       	pop	r16
    2306:	08 95       	ret

00002308 <vfprintf>:
    2308:	2f 92       	push	r2
    230a:	3f 92       	push	r3
    230c:	4f 92       	push	r4
    230e:	5f 92       	push	r5
    2310:	6f 92       	push	r6
    2312:	7f 92       	push	r7
    2314:	8f 92       	push	r8
    2316:	9f 92       	push	r9
    2318:	af 92       	push	r10
    231a:	bf 92       	push	r11
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	1f 93       	push	r17
    2328:	cf 93       	push	r28
    232a:	df 93       	push	r29
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	2b 97       	sbiw	r28, 0x0b	; 11
    2332:	0f b6       	in	r0, 0x3f	; 63
    2334:	f8 94       	cli
    2336:	de bf       	out	0x3e, r29	; 62
    2338:	0f be       	out	0x3f, r0	; 63
    233a:	cd bf       	out	0x3d, r28	; 61
    233c:	6c 01       	movw	r12, r24
    233e:	7b 01       	movw	r14, r22
    2340:	8a 01       	movw	r16, r20
    2342:	fc 01       	movw	r30, r24
    2344:	17 82       	std	Z+7, r1	; 0x07
    2346:	16 82       	std	Z+6, r1	; 0x06
    2348:	83 81       	ldd	r24, Z+3	; 0x03
    234a:	81 ff       	sbrs	r24, 1
    234c:	bf c1       	rjmp	.+894    	; 0x26cc <vfprintf+0x3c4>
    234e:	ce 01       	movw	r24, r28
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	3c 01       	movw	r6, r24
    2354:	f6 01       	movw	r30, r12
    2356:	93 81       	ldd	r25, Z+3	; 0x03
    2358:	f7 01       	movw	r30, r14
    235a:	93 fd       	sbrc	r25, 3
    235c:	85 91       	lpm	r24, Z+
    235e:	93 ff       	sbrs	r25, 3
    2360:	81 91       	ld	r24, Z+
    2362:	7f 01       	movw	r14, r30
    2364:	88 23       	and	r24, r24
    2366:	09 f4       	brne	.+2      	; 0x236a <vfprintf+0x62>
    2368:	ad c1       	rjmp	.+858    	; 0x26c4 <vfprintf+0x3bc>
    236a:	85 32       	cpi	r24, 0x25	; 37
    236c:	39 f4       	brne	.+14     	; 0x237c <vfprintf+0x74>
    236e:	93 fd       	sbrc	r25, 3
    2370:	85 91       	lpm	r24, Z+
    2372:	93 ff       	sbrs	r25, 3
    2374:	81 91       	ld	r24, Z+
    2376:	7f 01       	movw	r14, r30
    2378:	85 32       	cpi	r24, 0x25	; 37
    237a:	21 f4       	brne	.+8      	; 0x2384 <vfprintf+0x7c>
    237c:	b6 01       	movw	r22, r12
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	d6 d1       	rcall	.+940    	; 0x272e <fputc>
    2382:	e8 cf       	rjmp	.-48     	; 0x2354 <vfprintf+0x4c>
    2384:	91 2c       	mov	r9, r1
    2386:	21 2c       	mov	r2, r1
    2388:	31 2c       	mov	r3, r1
    238a:	ff e1       	ldi	r31, 0x1F	; 31
    238c:	f3 15       	cp	r31, r3
    238e:	d8 f0       	brcs	.+54     	; 0x23c6 <vfprintf+0xbe>
    2390:	8b 32       	cpi	r24, 0x2B	; 43
    2392:	79 f0       	breq	.+30     	; 0x23b2 <vfprintf+0xaa>
    2394:	38 f4       	brcc	.+14     	; 0x23a4 <vfprintf+0x9c>
    2396:	80 32       	cpi	r24, 0x20	; 32
    2398:	79 f0       	breq	.+30     	; 0x23b8 <vfprintf+0xb0>
    239a:	83 32       	cpi	r24, 0x23	; 35
    239c:	a1 f4       	brne	.+40     	; 0x23c6 <vfprintf+0xbe>
    239e:	23 2d       	mov	r18, r3
    23a0:	20 61       	ori	r18, 0x10	; 16
    23a2:	1d c0       	rjmp	.+58     	; 0x23de <vfprintf+0xd6>
    23a4:	8d 32       	cpi	r24, 0x2D	; 45
    23a6:	61 f0       	breq	.+24     	; 0x23c0 <vfprintf+0xb8>
    23a8:	80 33       	cpi	r24, 0x30	; 48
    23aa:	69 f4       	brne	.+26     	; 0x23c6 <vfprintf+0xbe>
    23ac:	23 2d       	mov	r18, r3
    23ae:	21 60       	ori	r18, 0x01	; 1
    23b0:	16 c0       	rjmp	.+44     	; 0x23de <vfprintf+0xd6>
    23b2:	83 2d       	mov	r24, r3
    23b4:	82 60       	ori	r24, 0x02	; 2
    23b6:	38 2e       	mov	r3, r24
    23b8:	e3 2d       	mov	r30, r3
    23ba:	e4 60       	ori	r30, 0x04	; 4
    23bc:	3e 2e       	mov	r3, r30
    23be:	2a c0       	rjmp	.+84     	; 0x2414 <vfprintf+0x10c>
    23c0:	f3 2d       	mov	r31, r3
    23c2:	f8 60       	ori	r31, 0x08	; 8
    23c4:	1d c0       	rjmp	.+58     	; 0x2400 <vfprintf+0xf8>
    23c6:	37 fc       	sbrc	r3, 7
    23c8:	2d c0       	rjmp	.+90     	; 0x2424 <vfprintf+0x11c>
    23ca:	20 ed       	ldi	r18, 0xD0	; 208
    23cc:	28 0f       	add	r18, r24
    23ce:	2a 30       	cpi	r18, 0x0A	; 10
    23d0:	40 f0       	brcs	.+16     	; 0x23e2 <vfprintf+0xda>
    23d2:	8e 32       	cpi	r24, 0x2E	; 46
    23d4:	b9 f4       	brne	.+46     	; 0x2404 <vfprintf+0xfc>
    23d6:	36 fc       	sbrc	r3, 6
    23d8:	75 c1       	rjmp	.+746    	; 0x26c4 <vfprintf+0x3bc>
    23da:	23 2d       	mov	r18, r3
    23dc:	20 64       	ori	r18, 0x40	; 64
    23de:	32 2e       	mov	r3, r18
    23e0:	19 c0       	rjmp	.+50     	; 0x2414 <vfprintf+0x10c>
    23e2:	36 fe       	sbrs	r3, 6
    23e4:	06 c0       	rjmp	.+12     	; 0x23f2 <vfprintf+0xea>
    23e6:	8a e0       	ldi	r24, 0x0A	; 10
    23e8:	98 9e       	mul	r9, r24
    23ea:	20 0d       	add	r18, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	92 2e       	mov	r9, r18
    23f0:	11 c0       	rjmp	.+34     	; 0x2414 <vfprintf+0x10c>
    23f2:	ea e0       	ldi	r30, 0x0A	; 10
    23f4:	2e 9e       	mul	r2, r30
    23f6:	20 0d       	add	r18, r0
    23f8:	11 24       	eor	r1, r1
    23fa:	22 2e       	mov	r2, r18
    23fc:	f3 2d       	mov	r31, r3
    23fe:	f0 62       	ori	r31, 0x20	; 32
    2400:	3f 2e       	mov	r3, r31
    2402:	08 c0       	rjmp	.+16     	; 0x2414 <vfprintf+0x10c>
    2404:	8c 36       	cpi	r24, 0x6C	; 108
    2406:	21 f4       	brne	.+8      	; 0x2410 <vfprintf+0x108>
    2408:	83 2d       	mov	r24, r3
    240a:	80 68       	ori	r24, 0x80	; 128
    240c:	38 2e       	mov	r3, r24
    240e:	02 c0       	rjmp	.+4      	; 0x2414 <vfprintf+0x10c>
    2410:	88 36       	cpi	r24, 0x68	; 104
    2412:	41 f4       	brne	.+16     	; 0x2424 <vfprintf+0x11c>
    2414:	f7 01       	movw	r30, r14
    2416:	93 fd       	sbrc	r25, 3
    2418:	85 91       	lpm	r24, Z+
    241a:	93 ff       	sbrs	r25, 3
    241c:	81 91       	ld	r24, Z+
    241e:	7f 01       	movw	r14, r30
    2420:	81 11       	cpse	r24, r1
    2422:	b3 cf       	rjmp	.-154    	; 0x238a <vfprintf+0x82>
    2424:	98 2f       	mov	r25, r24
    2426:	9f 7d       	andi	r25, 0xDF	; 223
    2428:	95 54       	subi	r25, 0x45	; 69
    242a:	93 30       	cpi	r25, 0x03	; 3
    242c:	28 f4       	brcc	.+10     	; 0x2438 <vfprintf+0x130>
    242e:	0c 5f       	subi	r16, 0xFC	; 252
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	9f e3       	ldi	r25, 0x3F	; 63
    2434:	99 83       	std	Y+1, r25	; 0x01
    2436:	0d c0       	rjmp	.+26     	; 0x2452 <vfprintf+0x14a>
    2438:	83 36       	cpi	r24, 0x63	; 99
    243a:	31 f0       	breq	.+12     	; 0x2448 <vfprintf+0x140>
    243c:	83 37       	cpi	r24, 0x73	; 115
    243e:	71 f0       	breq	.+28     	; 0x245c <vfprintf+0x154>
    2440:	83 35       	cpi	r24, 0x53	; 83
    2442:	09 f0       	breq	.+2      	; 0x2446 <vfprintf+0x13e>
    2444:	55 c0       	rjmp	.+170    	; 0x24f0 <vfprintf+0x1e8>
    2446:	20 c0       	rjmp	.+64     	; 0x2488 <vfprintf+0x180>
    2448:	f8 01       	movw	r30, r16
    244a:	80 81       	ld	r24, Z
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	0e 5f       	subi	r16, 0xFE	; 254
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	88 24       	eor	r8, r8
    2454:	83 94       	inc	r8
    2456:	91 2c       	mov	r9, r1
    2458:	53 01       	movw	r10, r6
    245a:	12 c0       	rjmp	.+36     	; 0x2480 <vfprintf+0x178>
    245c:	28 01       	movw	r4, r16
    245e:	f2 e0       	ldi	r31, 0x02	; 2
    2460:	4f 0e       	add	r4, r31
    2462:	51 1c       	adc	r5, r1
    2464:	f8 01       	movw	r30, r16
    2466:	a0 80       	ld	r10, Z
    2468:	b1 80       	ldd	r11, Z+1	; 0x01
    246a:	36 fe       	sbrs	r3, 6
    246c:	03 c0       	rjmp	.+6      	; 0x2474 <vfprintf+0x16c>
    246e:	69 2d       	mov	r22, r9
    2470:	70 e0       	ldi	r23, 0x00	; 0
    2472:	02 c0       	rjmp	.+4      	; 0x2478 <vfprintf+0x170>
    2474:	6f ef       	ldi	r22, 0xFF	; 255
    2476:	7f ef       	ldi	r23, 0xFF	; 255
    2478:	c5 01       	movw	r24, r10
    247a:	4e d1       	rcall	.+668    	; 0x2718 <strnlen>
    247c:	4c 01       	movw	r8, r24
    247e:	82 01       	movw	r16, r4
    2480:	f3 2d       	mov	r31, r3
    2482:	ff 77       	andi	r31, 0x7F	; 127
    2484:	3f 2e       	mov	r3, r31
    2486:	15 c0       	rjmp	.+42     	; 0x24b2 <vfprintf+0x1aa>
    2488:	28 01       	movw	r4, r16
    248a:	22 e0       	ldi	r18, 0x02	; 2
    248c:	42 0e       	add	r4, r18
    248e:	51 1c       	adc	r5, r1
    2490:	f8 01       	movw	r30, r16
    2492:	a0 80       	ld	r10, Z
    2494:	b1 80       	ldd	r11, Z+1	; 0x01
    2496:	36 fe       	sbrs	r3, 6
    2498:	03 c0       	rjmp	.+6      	; 0x24a0 <vfprintf+0x198>
    249a:	69 2d       	mov	r22, r9
    249c:	70 e0       	ldi	r23, 0x00	; 0
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <vfprintf+0x19c>
    24a0:	6f ef       	ldi	r22, 0xFF	; 255
    24a2:	7f ef       	ldi	r23, 0xFF	; 255
    24a4:	c5 01       	movw	r24, r10
    24a6:	2d d1       	rcall	.+602    	; 0x2702 <strnlen_P>
    24a8:	4c 01       	movw	r8, r24
    24aa:	f3 2d       	mov	r31, r3
    24ac:	f0 68       	ori	r31, 0x80	; 128
    24ae:	3f 2e       	mov	r3, r31
    24b0:	82 01       	movw	r16, r4
    24b2:	33 fc       	sbrc	r3, 3
    24b4:	19 c0       	rjmp	.+50     	; 0x24e8 <vfprintf+0x1e0>
    24b6:	82 2d       	mov	r24, r2
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	88 16       	cp	r8, r24
    24bc:	99 06       	cpc	r9, r25
    24be:	a0 f4       	brcc	.+40     	; 0x24e8 <vfprintf+0x1e0>
    24c0:	b6 01       	movw	r22, r12
    24c2:	80 e2       	ldi	r24, 0x20	; 32
    24c4:	90 e0       	ldi	r25, 0x00	; 0
    24c6:	33 d1       	rcall	.+614    	; 0x272e <fputc>
    24c8:	2a 94       	dec	r2
    24ca:	f5 cf       	rjmp	.-22     	; 0x24b6 <vfprintf+0x1ae>
    24cc:	f5 01       	movw	r30, r10
    24ce:	37 fc       	sbrc	r3, 7
    24d0:	85 91       	lpm	r24, Z+
    24d2:	37 fe       	sbrs	r3, 7
    24d4:	81 91       	ld	r24, Z+
    24d6:	5f 01       	movw	r10, r30
    24d8:	b6 01       	movw	r22, r12
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	28 d1       	rcall	.+592    	; 0x272e <fputc>
    24de:	21 10       	cpse	r2, r1
    24e0:	2a 94       	dec	r2
    24e2:	21 e0       	ldi	r18, 0x01	; 1
    24e4:	82 1a       	sub	r8, r18
    24e6:	91 08       	sbc	r9, r1
    24e8:	81 14       	cp	r8, r1
    24ea:	91 04       	cpc	r9, r1
    24ec:	79 f7       	brne	.-34     	; 0x24cc <vfprintf+0x1c4>
    24ee:	e1 c0       	rjmp	.+450    	; 0x26b2 <vfprintf+0x3aa>
    24f0:	84 36       	cpi	r24, 0x64	; 100
    24f2:	11 f0       	breq	.+4      	; 0x24f8 <vfprintf+0x1f0>
    24f4:	89 36       	cpi	r24, 0x69	; 105
    24f6:	39 f5       	brne	.+78     	; 0x2546 <vfprintf+0x23e>
    24f8:	f8 01       	movw	r30, r16
    24fa:	37 fe       	sbrs	r3, 7
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <vfprintf+0x204>
    24fe:	60 81       	ld	r22, Z
    2500:	71 81       	ldd	r23, Z+1	; 0x01
    2502:	82 81       	ldd	r24, Z+2	; 0x02
    2504:	93 81       	ldd	r25, Z+3	; 0x03
    2506:	0c 5f       	subi	r16, 0xFC	; 252
    2508:	1f 4f       	sbci	r17, 0xFF	; 255
    250a:	08 c0       	rjmp	.+16     	; 0x251c <vfprintf+0x214>
    250c:	60 81       	ld	r22, Z
    250e:	71 81       	ldd	r23, Z+1	; 0x01
    2510:	07 2e       	mov	r0, r23
    2512:	00 0c       	add	r0, r0
    2514:	88 0b       	sbc	r24, r24
    2516:	99 0b       	sbc	r25, r25
    2518:	0e 5f       	subi	r16, 0xFE	; 254
    251a:	1f 4f       	sbci	r17, 0xFF	; 255
    251c:	f3 2d       	mov	r31, r3
    251e:	ff 76       	andi	r31, 0x6F	; 111
    2520:	3f 2e       	mov	r3, r31
    2522:	97 ff       	sbrs	r25, 7
    2524:	09 c0       	rjmp	.+18     	; 0x2538 <vfprintf+0x230>
    2526:	90 95       	com	r25
    2528:	80 95       	com	r24
    252a:	70 95       	com	r23
    252c:	61 95       	neg	r22
    252e:	7f 4f       	sbci	r23, 0xFF	; 255
    2530:	8f 4f       	sbci	r24, 0xFF	; 255
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	f0 68       	ori	r31, 0x80	; 128
    2536:	3f 2e       	mov	r3, r31
    2538:	2a e0       	ldi	r18, 0x0A	; 10
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	a3 01       	movw	r20, r6
    253e:	33 d1       	rcall	.+614    	; 0x27a6 <__ultoa_invert>
    2540:	88 2e       	mov	r8, r24
    2542:	86 18       	sub	r8, r6
    2544:	44 c0       	rjmp	.+136    	; 0x25ce <vfprintf+0x2c6>
    2546:	85 37       	cpi	r24, 0x75	; 117
    2548:	31 f4       	brne	.+12     	; 0x2556 <vfprintf+0x24e>
    254a:	23 2d       	mov	r18, r3
    254c:	2f 7e       	andi	r18, 0xEF	; 239
    254e:	b2 2e       	mov	r11, r18
    2550:	2a e0       	ldi	r18, 0x0A	; 10
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	25 c0       	rjmp	.+74     	; 0x25a0 <vfprintf+0x298>
    2556:	93 2d       	mov	r25, r3
    2558:	99 7f       	andi	r25, 0xF9	; 249
    255a:	b9 2e       	mov	r11, r25
    255c:	8f 36       	cpi	r24, 0x6F	; 111
    255e:	c1 f0       	breq	.+48     	; 0x2590 <vfprintf+0x288>
    2560:	18 f4       	brcc	.+6      	; 0x2568 <vfprintf+0x260>
    2562:	88 35       	cpi	r24, 0x58	; 88
    2564:	79 f0       	breq	.+30     	; 0x2584 <vfprintf+0x27c>
    2566:	ae c0       	rjmp	.+348    	; 0x26c4 <vfprintf+0x3bc>
    2568:	80 37       	cpi	r24, 0x70	; 112
    256a:	19 f0       	breq	.+6      	; 0x2572 <vfprintf+0x26a>
    256c:	88 37       	cpi	r24, 0x78	; 120
    256e:	21 f0       	breq	.+8      	; 0x2578 <vfprintf+0x270>
    2570:	a9 c0       	rjmp	.+338    	; 0x26c4 <vfprintf+0x3bc>
    2572:	e9 2f       	mov	r30, r25
    2574:	e0 61       	ori	r30, 0x10	; 16
    2576:	be 2e       	mov	r11, r30
    2578:	b4 fe       	sbrs	r11, 4
    257a:	0d c0       	rjmp	.+26     	; 0x2596 <vfprintf+0x28e>
    257c:	fb 2d       	mov	r31, r11
    257e:	f4 60       	ori	r31, 0x04	; 4
    2580:	bf 2e       	mov	r11, r31
    2582:	09 c0       	rjmp	.+18     	; 0x2596 <vfprintf+0x28e>
    2584:	34 fe       	sbrs	r3, 4
    2586:	0a c0       	rjmp	.+20     	; 0x259c <vfprintf+0x294>
    2588:	29 2f       	mov	r18, r25
    258a:	26 60       	ori	r18, 0x06	; 6
    258c:	b2 2e       	mov	r11, r18
    258e:	06 c0       	rjmp	.+12     	; 0x259c <vfprintf+0x294>
    2590:	28 e0       	ldi	r18, 0x08	; 8
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	05 c0       	rjmp	.+10     	; 0x25a0 <vfprintf+0x298>
    2596:	20 e1       	ldi	r18, 0x10	; 16
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	02 c0       	rjmp	.+4      	; 0x25a0 <vfprintf+0x298>
    259c:	20 e1       	ldi	r18, 0x10	; 16
    259e:	32 e0       	ldi	r19, 0x02	; 2
    25a0:	f8 01       	movw	r30, r16
    25a2:	b7 fe       	sbrs	r11, 7
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <vfprintf+0x2ac>
    25a6:	60 81       	ld	r22, Z
    25a8:	71 81       	ldd	r23, Z+1	; 0x01
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	0c 5f       	subi	r16, 0xFC	; 252
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	06 c0       	rjmp	.+12     	; 0x25c0 <vfprintf+0x2b8>
    25b4:	60 81       	ld	r22, Z
    25b6:	71 81       	ldd	r23, Z+1	; 0x01
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	0e 5f       	subi	r16, 0xFE	; 254
    25be:	1f 4f       	sbci	r17, 0xFF	; 255
    25c0:	a3 01       	movw	r20, r6
    25c2:	f1 d0       	rcall	.+482    	; 0x27a6 <__ultoa_invert>
    25c4:	88 2e       	mov	r8, r24
    25c6:	86 18       	sub	r8, r6
    25c8:	fb 2d       	mov	r31, r11
    25ca:	ff 77       	andi	r31, 0x7F	; 127
    25cc:	3f 2e       	mov	r3, r31
    25ce:	36 fe       	sbrs	r3, 6
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <vfprintf+0x2e4>
    25d2:	23 2d       	mov	r18, r3
    25d4:	2e 7f       	andi	r18, 0xFE	; 254
    25d6:	a2 2e       	mov	r10, r18
    25d8:	89 14       	cp	r8, r9
    25da:	58 f4       	brcc	.+22     	; 0x25f2 <vfprintf+0x2ea>
    25dc:	34 fe       	sbrs	r3, 4
    25de:	0b c0       	rjmp	.+22     	; 0x25f6 <vfprintf+0x2ee>
    25e0:	32 fc       	sbrc	r3, 2
    25e2:	09 c0       	rjmp	.+18     	; 0x25f6 <vfprintf+0x2ee>
    25e4:	83 2d       	mov	r24, r3
    25e6:	8e 7e       	andi	r24, 0xEE	; 238
    25e8:	a8 2e       	mov	r10, r24
    25ea:	05 c0       	rjmp	.+10     	; 0x25f6 <vfprintf+0x2ee>
    25ec:	b8 2c       	mov	r11, r8
    25ee:	a3 2c       	mov	r10, r3
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <vfprintf+0x2f0>
    25f2:	b8 2c       	mov	r11, r8
    25f4:	01 c0       	rjmp	.+2      	; 0x25f8 <vfprintf+0x2f0>
    25f6:	b9 2c       	mov	r11, r9
    25f8:	a4 fe       	sbrs	r10, 4
    25fa:	0f c0       	rjmp	.+30     	; 0x261a <vfprintf+0x312>
    25fc:	fe 01       	movw	r30, r28
    25fe:	e8 0d       	add	r30, r8
    2600:	f1 1d       	adc	r31, r1
    2602:	80 81       	ld	r24, Z
    2604:	80 33       	cpi	r24, 0x30	; 48
    2606:	21 f4       	brne	.+8      	; 0x2610 <vfprintf+0x308>
    2608:	9a 2d       	mov	r25, r10
    260a:	99 7e       	andi	r25, 0xE9	; 233
    260c:	a9 2e       	mov	r10, r25
    260e:	09 c0       	rjmp	.+18     	; 0x2622 <vfprintf+0x31a>
    2610:	a2 fe       	sbrs	r10, 2
    2612:	06 c0       	rjmp	.+12     	; 0x2620 <vfprintf+0x318>
    2614:	b3 94       	inc	r11
    2616:	b3 94       	inc	r11
    2618:	04 c0       	rjmp	.+8      	; 0x2622 <vfprintf+0x31a>
    261a:	8a 2d       	mov	r24, r10
    261c:	86 78       	andi	r24, 0x86	; 134
    261e:	09 f0       	breq	.+2      	; 0x2622 <vfprintf+0x31a>
    2620:	b3 94       	inc	r11
    2622:	a3 fc       	sbrc	r10, 3
    2624:	10 c0       	rjmp	.+32     	; 0x2646 <vfprintf+0x33e>
    2626:	a0 fe       	sbrs	r10, 0
    2628:	06 c0       	rjmp	.+12     	; 0x2636 <vfprintf+0x32e>
    262a:	b2 14       	cp	r11, r2
    262c:	80 f4       	brcc	.+32     	; 0x264e <vfprintf+0x346>
    262e:	28 0c       	add	r2, r8
    2630:	92 2c       	mov	r9, r2
    2632:	9b 18       	sub	r9, r11
    2634:	0d c0       	rjmp	.+26     	; 0x2650 <vfprintf+0x348>
    2636:	b2 14       	cp	r11, r2
    2638:	58 f4       	brcc	.+22     	; 0x2650 <vfprintf+0x348>
    263a:	b6 01       	movw	r22, r12
    263c:	80 e2       	ldi	r24, 0x20	; 32
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	76 d0       	rcall	.+236    	; 0x272e <fputc>
    2642:	b3 94       	inc	r11
    2644:	f8 cf       	rjmp	.-16     	; 0x2636 <vfprintf+0x32e>
    2646:	b2 14       	cp	r11, r2
    2648:	18 f4       	brcc	.+6      	; 0x2650 <vfprintf+0x348>
    264a:	2b 18       	sub	r2, r11
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <vfprintf+0x34a>
    264e:	98 2c       	mov	r9, r8
    2650:	21 2c       	mov	r2, r1
    2652:	a4 fe       	sbrs	r10, 4
    2654:	0f c0       	rjmp	.+30     	; 0x2674 <vfprintf+0x36c>
    2656:	b6 01       	movw	r22, r12
    2658:	80 e3       	ldi	r24, 0x30	; 48
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	68 d0       	rcall	.+208    	; 0x272e <fputc>
    265e:	a2 fe       	sbrs	r10, 2
    2660:	16 c0       	rjmp	.+44     	; 0x268e <vfprintf+0x386>
    2662:	a1 fc       	sbrc	r10, 1
    2664:	03 c0       	rjmp	.+6      	; 0x266c <vfprintf+0x364>
    2666:	88 e7       	ldi	r24, 0x78	; 120
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <vfprintf+0x368>
    266c:	88 e5       	ldi	r24, 0x58	; 88
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	b6 01       	movw	r22, r12
    2672:	0c c0       	rjmp	.+24     	; 0x268c <vfprintf+0x384>
    2674:	8a 2d       	mov	r24, r10
    2676:	86 78       	andi	r24, 0x86	; 134
    2678:	51 f0       	breq	.+20     	; 0x268e <vfprintf+0x386>
    267a:	a1 fe       	sbrs	r10, 1
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <vfprintf+0x37a>
    267e:	8b e2       	ldi	r24, 0x2B	; 43
    2680:	01 c0       	rjmp	.+2      	; 0x2684 <vfprintf+0x37c>
    2682:	80 e2       	ldi	r24, 0x20	; 32
    2684:	a7 fc       	sbrc	r10, 7
    2686:	8d e2       	ldi	r24, 0x2D	; 45
    2688:	b6 01       	movw	r22, r12
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	50 d0       	rcall	.+160    	; 0x272e <fputc>
    268e:	89 14       	cp	r8, r9
    2690:	30 f4       	brcc	.+12     	; 0x269e <vfprintf+0x396>
    2692:	b6 01       	movw	r22, r12
    2694:	80 e3       	ldi	r24, 0x30	; 48
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	4a d0       	rcall	.+148    	; 0x272e <fputc>
    269a:	9a 94       	dec	r9
    269c:	f8 cf       	rjmp	.-16     	; 0x268e <vfprintf+0x386>
    269e:	8a 94       	dec	r8
    26a0:	f3 01       	movw	r30, r6
    26a2:	e8 0d       	add	r30, r8
    26a4:	f1 1d       	adc	r31, r1
    26a6:	80 81       	ld	r24, Z
    26a8:	b6 01       	movw	r22, r12
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	40 d0       	rcall	.+128    	; 0x272e <fputc>
    26ae:	81 10       	cpse	r8, r1
    26b0:	f6 cf       	rjmp	.-20     	; 0x269e <vfprintf+0x396>
    26b2:	22 20       	and	r2, r2
    26b4:	09 f4       	brne	.+2      	; 0x26b8 <vfprintf+0x3b0>
    26b6:	4e ce       	rjmp	.-868    	; 0x2354 <vfprintf+0x4c>
    26b8:	b6 01       	movw	r22, r12
    26ba:	80 e2       	ldi	r24, 0x20	; 32
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	37 d0       	rcall	.+110    	; 0x272e <fputc>
    26c0:	2a 94       	dec	r2
    26c2:	f7 cf       	rjmp	.-18     	; 0x26b2 <vfprintf+0x3aa>
    26c4:	f6 01       	movw	r30, r12
    26c6:	86 81       	ldd	r24, Z+6	; 0x06
    26c8:	97 81       	ldd	r25, Z+7	; 0x07
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <vfprintf+0x3c8>
    26cc:	8f ef       	ldi	r24, 0xFF	; 255
    26ce:	9f ef       	ldi	r25, 0xFF	; 255
    26d0:	2b 96       	adiw	r28, 0x0b	; 11
    26d2:	0f b6       	in	r0, 0x3f	; 63
    26d4:	f8 94       	cli
    26d6:	de bf       	out	0x3e, r29	; 62
    26d8:	0f be       	out	0x3f, r0	; 63
    26da:	cd bf       	out	0x3d, r28	; 61
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	df 90       	pop	r13
    26ea:	cf 90       	pop	r12
    26ec:	bf 90       	pop	r11
    26ee:	af 90       	pop	r10
    26f0:	9f 90       	pop	r9
    26f2:	8f 90       	pop	r8
    26f4:	7f 90       	pop	r7
    26f6:	6f 90       	pop	r6
    26f8:	5f 90       	pop	r5
    26fa:	4f 90       	pop	r4
    26fc:	3f 90       	pop	r3
    26fe:	2f 90       	pop	r2
    2700:	08 95       	ret

00002702 <strnlen_P>:
    2702:	fc 01       	movw	r30, r24
    2704:	05 90       	lpm	r0, Z+
    2706:	61 50       	subi	r22, 0x01	; 1
    2708:	70 40       	sbci	r23, 0x00	; 0
    270a:	01 10       	cpse	r0, r1
    270c:	d8 f7       	brcc	.-10     	; 0x2704 <strnlen_P+0x2>
    270e:	80 95       	com	r24
    2710:	90 95       	com	r25
    2712:	8e 0f       	add	r24, r30
    2714:	9f 1f       	adc	r25, r31
    2716:	08 95       	ret

00002718 <strnlen>:
    2718:	fc 01       	movw	r30, r24
    271a:	61 50       	subi	r22, 0x01	; 1
    271c:	70 40       	sbci	r23, 0x00	; 0
    271e:	01 90       	ld	r0, Z+
    2720:	01 10       	cpse	r0, r1
    2722:	d8 f7       	brcc	.-10     	; 0x271a <strnlen+0x2>
    2724:	80 95       	com	r24
    2726:	90 95       	com	r25
    2728:	8e 0f       	add	r24, r30
    272a:	9f 1f       	adc	r25, r31
    272c:	08 95       	ret

0000272e <fputc>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	fb 01       	movw	r30, r22
    2738:	23 81       	ldd	r18, Z+3	; 0x03
    273a:	21 fd       	sbrc	r18, 1
    273c:	03 c0       	rjmp	.+6      	; 0x2744 <fputc+0x16>
    273e:	8f ef       	ldi	r24, 0xFF	; 255
    2740:	9f ef       	ldi	r25, 0xFF	; 255
    2742:	2c c0       	rjmp	.+88     	; 0x279c <fputc+0x6e>
    2744:	22 ff       	sbrs	r18, 2
    2746:	16 c0       	rjmp	.+44     	; 0x2774 <fputc+0x46>
    2748:	46 81       	ldd	r20, Z+6	; 0x06
    274a:	57 81       	ldd	r21, Z+7	; 0x07
    274c:	24 81       	ldd	r18, Z+4	; 0x04
    274e:	35 81       	ldd	r19, Z+5	; 0x05
    2750:	42 17       	cp	r20, r18
    2752:	53 07       	cpc	r21, r19
    2754:	44 f4       	brge	.+16     	; 0x2766 <fputc+0x38>
    2756:	a0 81       	ld	r26, Z
    2758:	b1 81       	ldd	r27, Z+1	; 0x01
    275a:	9d 01       	movw	r18, r26
    275c:	2f 5f       	subi	r18, 0xFF	; 255
    275e:	3f 4f       	sbci	r19, 0xFF	; 255
    2760:	31 83       	std	Z+1, r19	; 0x01
    2762:	20 83       	st	Z, r18
    2764:	8c 93       	st	X, r24
    2766:	26 81       	ldd	r18, Z+6	; 0x06
    2768:	37 81       	ldd	r19, Z+7	; 0x07
    276a:	2f 5f       	subi	r18, 0xFF	; 255
    276c:	3f 4f       	sbci	r19, 0xFF	; 255
    276e:	37 83       	std	Z+7, r19	; 0x07
    2770:	26 83       	std	Z+6, r18	; 0x06
    2772:	14 c0       	rjmp	.+40     	; 0x279c <fputc+0x6e>
    2774:	8b 01       	movw	r16, r22
    2776:	ec 01       	movw	r28, r24
    2778:	fb 01       	movw	r30, r22
    277a:	00 84       	ldd	r0, Z+8	; 0x08
    277c:	f1 85       	ldd	r31, Z+9	; 0x09
    277e:	e0 2d       	mov	r30, r0
    2780:	09 95       	icall
    2782:	89 2b       	or	r24, r25
    2784:	e1 f6       	brne	.-72     	; 0x273e <fputc+0x10>
    2786:	d8 01       	movw	r26, r16
    2788:	16 96       	adiw	r26, 0x06	; 6
    278a:	8d 91       	ld	r24, X+
    278c:	9c 91       	ld	r25, X
    278e:	17 97       	sbiw	r26, 0x07	; 7
    2790:	01 96       	adiw	r24, 0x01	; 1
    2792:	17 96       	adiw	r26, 0x07	; 7
    2794:	9c 93       	st	X, r25
    2796:	8e 93       	st	-X, r24
    2798:	16 97       	sbiw	r26, 0x06	; 6
    279a:	ce 01       	movw	r24, r28
    279c:	df 91       	pop	r29
    279e:	cf 91       	pop	r28
    27a0:	1f 91       	pop	r17
    27a2:	0f 91       	pop	r16
    27a4:	08 95       	ret

000027a6 <__ultoa_invert>:
    27a6:	fa 01       	movw	r30, r20
    27a8:	aa 27       	eor	r26, r26
    27aa:	28 30       	cpi	r18, 0x08	; 8
    27ac:	51 f1       	breq	.+84     	; 0x2802 <__ultoa_invert+0x5c>
    27ae:	20 31       	cpi	r18, 0x10	; 16
    27b0:	81 f1       	breq	.+96     	; 0x2812 <__ultoa_invert+0x6c>
    27b2:	e8 94       	clt
    27b4:	6f 93       	push	r22
    27b6:	6e 7f       	andi	r22, 0xFE	; 254
    27b8:	6e 5f       	subi	r22, 0xFE	; 254
    27ba:	7f 4f       	sbci	r23, 0xFF	; 255
    27bc:	8f 4f       	sbci	r24, 0xFF	; 255
    27be:	9f 4f       	sbci	r25, 0xFF	; 255
    27c0:	af 4f       	sbci	r26, 0xFF	; 255
    27c2:	b1 e0       	ldi	r27, 0x01	; 1
    27c4:	3e d0       	rcall	.+124    	; 0x2842 <__ultoa_invert+0x9c>
    27c6:	b4 e0       	ldi	r27, 0x04	; 4
    27c8:	3c d0       	rcall	.+120    	; 0x2842 <__ultoa_invert+0x9c>
    27ca:	67 0f       	add	r22, r23
    27cc:	78 1f       	adc	r23, r24
    27ce:	89 1f       	adc	r24, r25
    27d0:	9a 1f       	adc	r25, r26
    27d2:	a1 1d       	adc	r26, r1
    27d4:	68 0f       	add	r22, r24
    27d6:	79 1f       	adc	r23, r25
    27d8:	8a 1f       	adc	r24, r26
    27da:	91 1d       	adc	r25, r1
    27dc:	a1 1d       	adc	r26, r1
    27de:	6a 0f       	add	r22, r26
    27e0:	71 1d       	adc	r23, r1
    27e2:	81 1d       	adc	r24, r1
    27e4:	91 1d       	adc	r25, r1
    27e6:	a1 1d       	adc	r26, r1
    27e8:	20 d0       	rcall	.+64     	; 0x282a <__ultoa_invert+0x84>
    27ea:	09 f4       	brne	.+2      	; 0x27ee <__ultoa_invert+0x48>
    27ec:	68 94       	set
    27ee:	3f 91       	pop	r19
    27f0:	2a e0       	ldi	r18, 0x0A	; 10
    27f2:	26 9f       	mul	r18, r22
    27f4:	11 24       	eor	r1, r1
    27f6:	30 19       	sub	r19, r0
    27f8:	30 5d       	subi	r19, 0xD0	; 208
    27fa:	31 93       	st	Z+, r19
    27fc:	de f6       	brtc	.-74     	; 0x27b4 <__ultoa_invert+0xe>
    27fe:	cf 01       	movw	r24, r30
    2800:	08 95       	ret
    2802:	46 2f       	mov	r20, r22
    2804:	47 70       	andi	r20, 0x07	; 7
    2806:	40 5d       	subi	r20, 0xD0	; 208
    2808:	41 93       	st	Z+, r20
    280a:	b3 e0       	ldi	r27, 0x03	; 3
    280c:	0f d0       	rcall	.+30     	; 0x282c <__ultoa_invert+0x86>
    280e:	c9 f7       	brne	.-14     	; 0x2802 <__ultoa_invert+0x5c>
    2810:	f6 cf       	rjmp	.-20     	; 0x27fe <__ultoa_invert+0x58>
    2812:	46 2f       	mov	r20, r22
    2814:	4f 70       	andi	r20, 0x0F	; 15
    2816:	40 5d       	subi	r20, 0xD0	; 208
    2818:	4a 33       	cpi	r20, 0x3A	; 58
    281a:	18 f0       	brcs	.+6      	; 0x2822 <__ultoa_invert+0x7c>
    281c:	49 5d       	subi	r20, 0xD9	; 217
    281e:	31 fd       	sbrc	r19, 1
    2820:	40 52       	subi	r20, 0x20	; 32
    2822:	41 93       	st	Z+, r20
    2824:	02 d0       	rcall	.+4      	; 0x282a <__ultoa_invert+0x84>
    2826:	a9 f7       	brne	.-22     	; 0x2812 <__ultoa_invert+0x6c>
    2828:	ea cf       	rjmp	.-44     	; 0x27fe <__ultoa_invert+0x58>
    282a:	b4 e0       	ldi	r27, 0x04	; 4
    282c:	a6 95       	lsr	r26
    282e:	97 95       	ror	r25
    2830:	87 95       	ror	r24
    2832:	77 95       	ror	r23
    2834:	67 95       	ror	r22
    2836:	ba 95       	dec	r27
    2838:	c9 f7       	brne	.-14     	; 0x282c <__ultoa_invert+0x86>
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	61 05       	cpc	r22, r1
    283e:	71 05       	cpc	r23, r1
    2840:	08 95       	ret
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	0a 2e       	mov	r0, r26
    2848:	06 94       	lsr	r0
    284a:	57 95       	ror	r21
    284c:	47 95       	ror	r20
    284e:	37 95       	ror	r19
    2850:	27 95       	ror	r18
    2852:	ba 95       	dec	r27
    2854:	c9 f7       	brne	.-14     	; 0x2848 <__ultoa_invert+0xa2>
    2856:	62 0f       	add	r22, r18
    2858:	73 1f       	adc	r23, r19
    285a:	84 1f       	adc	r24, r20
    285c:	95 1f       	adc	r25, r21
    285e:	a0 1d       	adc	r26, r0
    2860:	08 95       	ret

00002862 <_exit>:
    2862:	f8 94       	cli

00002864 <__stop_program>:
    2864:	ff cf       	rjmp	.-2      	; 0x2864 <__stop_program>
